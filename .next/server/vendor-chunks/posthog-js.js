"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/posthog-js";
exports.ids = ["vendor-chunks/posthog-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/posthog-js/dist/module.js":
/*!************************************************!*\
  !*** ./node_modules/posthog-js/dist/module.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COPY_AUTOCAPTURE_EVENT: () => (/* binding */ p),\n/* harmony export */   Compression: () => (/* binding */ t),\n/* harmony export */   PostHog: () => (/* binding */ Ro),\n/* harmony export */   SurveyPosition: () => (/* binding */ Mo),\n/* harmony export */   SurveyQuestionBranchingType: () => (/* binding */ Fo),\n/* harmony export */   SurveyQuestionType: () => (/* binding */ Co),\n/* harmony export */   SurveySchedule: () => (/* binding */ Ao),\n/* harmony export */   SurveyType: () => (/* binding */ Oo),\n/* harmony export */   SurveyWidgetType: () => (/* binding */ To),\n/* harmony export */   \"default\": () => (/* binding */ jo),\n/* harmony export */   knownUnsafeEditableEvent: () => (/* binding */ g),\n/* harmony export */   posthog: () => (/* binding */ jo),\n/* harmony export */   severityLevels: () => (/* binding */ _)\n/* harmony export */ });\nvar t, i =  false ? 0 : void 0, e = \"undefined\" != typeof globalThis ? globalThis : i, r = Array.prototype, s = r.forEach, n = r.indexOf, o = null == e ? void 0 : e.navigator, a = null == e ? void 0 : e.document, l = null == e ? void 0 : e.location, u = null == e ? void 0 : e.fetch, h = null != e && e.XMLHttpRequest && \"withCredentials\" in new e.XMLHttpRequest ? e.XMLHttpRequest : void 0, d = null == e ? void 0 : e.AbortController, v = null == o ? void 0 : o.userAgent, c = null != i ? i : {}, f = {\n    DEBUG: !1,\n    LIB_VERSION: \"1.237.0\"\n}, p = \"$copy_autocapture\", g = [\n    \"$snapshot\",\n    \"$pageview\",\n    \"$pageleave\",\n    \"$set\",\n    \"survey dismissed\",\n    \"survey sent\",\n    \"survey shown\",\n    \"$identify\",\n    \"$groupidentify\",\n    \"$create_alias\",\n    \"$$client_ingestion_warning\",\n    \"$web_experiment_applied\",\n    \"$feature_enrollment_update\",\n    \"$feature_flag_called\"\n];\n!function(t) {\n    t.GZipJS = \"gzip-js\", t.Base64 = \"base64\";\n}(t || (t = {}));\nvar _ = [\n    \"fatal\",\n    \"error\",\n    \"warning\",\n    \"log\",\n    \"info\",\n    \"debug\"\n];\nfunction m(t, i) {\n    return -1 !== t.indexOf(i);\n}\nvar b = function(t) {\n    return t.trim();\n}, w = function(t) {\n    return t.replace(/^\\$/, \"\");\n};\nvar y = Array.isArray, S = Object.prototype, $ = S.hasOwnProperty, k = S.toString, x = y || function(t) {\n    return \"[object Array]\" === k.call(t);\n}, E = (t)=>\"function\" == typeof t, I = (t)=>t === Object(t) && !x(t), P = (t)=>{\n    if (I(t)) {\n        for(var i in t)if ($.call(t, i)) return !1;\n        return !0;\n    }\n    return !1;\n}, R = (t)=>void 0 === t, T = (t)=>\"[object String]\" == k.call(t), M = (t)=>T(t) && 0 === t.trim().length, O = (t)=>null === t, C = (t)=>R(t) || O(t), F = (t)=>\"[object Number]\" == k.call(t), A = (t)=>\"[object Boolean]\" === k.call(t), D = (t)=>t instanceof FormData, j = (t)=>m(g, t), L = (t)=>{\n    var e = {\n        t: function(e) {\n            if (i && (f.DEBUG || c.POSTHOG_DEBUG) && !R(i.console) && i.console) {\n                for(var r = (\"__rrweb_original__\" in i.console[e]) ? i.console[e].__rrweb_original__ : i.console[e], s = arguments.length, n = new Array(s > 1 ? s - 1 : 0), o = 1; o < s; o++)n[o - 1] = arguments[o];\n                r(t, ...n);\n            }\n        },\n        info: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"log\", ...i);\n        },\n        warn: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"warn\", ...i);\n        },\n        error: function() {\n            for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++)i[r] = arguments[r];\n            e.t(\"error\", ...i);\n        },\n        critical: function() {\n            for(var i = arguments.length, e = new Array(i), r = 0; r < i; r++)e[r] = arguments[r];\n            console.error(t, ...e);\n        },\n        uninitializedWarning: (t)=>{\n            e.error(\"You must initialize PostHog before calling \" + t);\n        },\n        createLogger: (i)=>L(t + \" \" + i)\n    };\n    return e;\n}, N = L(\"[PostHog.js]\"), z = N.createLogger, U = z(\"[ExternalScriptsLoader]\"), q = (t, i, e)=>{\n    if (t.config.disable_external_dependency_loading) return U.warn(i + \" was requested but loading of external scripts is disabled.\"), e(\"Loading of external scripts is disabled\");\n    var r = null == a ? void 0 : a.querySelectorAll(\"script\");\n    if (r) {\n        for(var s = 0; s < r.length; s++)if (r[s].src === i) return e();\n    }\n    var n = ()=>{\n        if (!a) return e(\"document not found\");\n        var r = a.createElement(\"script\");\n        if (r.type = \"text/javascript\", r.crossOrigin = \"anonymous\", r.src = i, r.onload = (t)=>e(void 0, t), r.onerror = (t)=>e(t), t.config.prepare_external_dependency_script && (r = t.config.prepare_external_dependency_script(r)), !r) return e(\"prepare_external_dependency_script returned null\");\n        var s, n = a.querySelectorAll(\"body > script\");\n        n.length > 0 ? null == (s = n[0].parentNode) || s.insertBefore(r, n[0]) : a.body.appendChild(r);\n    };\n    null != a && a.body ? n() : null == a || a.addEventListener(\"DOMContentLoaded\", n);\n};\nfunction B() {\n    return B = Object.assign ? Object.assign.bind() : function(t) {\n        for(var i = 1; i < arguments.length; i++){\n            var e = arguments[i];\n            for(var r in e)Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n        }\n        return t;\n    }, B.apply(this, arguments);\n}\nfunction H(t, i) {\n    if (null == t) return {};\n    var e, r, s = {}, n = Object.keys(t);\n    for(r = 0; r < n.length; r++)e = n[r], i.indexOf(e) >= 0 || (s[e] = t[e]);\n    return s;\n}\nc.__PosthogExtensions__ = c.__PosthogExtensions__ || {}, c.__PosthogExtensions__.loadExternalDependency = (t, i, e)=>{\n    var r = \"/static/\" + i + \".js?v=\" + t.version;\n    if (\"remote-config\" === i && (r = \"/array/\" + t.config.token + \"/config.js\"), \"toolbar\" === i) {\n        var s = 3e5;\n        r = r + \"&t=\" + Math.floor(Date.now() / s) * s;\n    }\n    var n = t.requestRouter.endpointFor(\"assets\", r);\n    q(t, n, e);\n}, c.__PosthogExtensions__.loadSiteApp = (t, i, e)=>{\n    var r = t.requestRouter.endpointFor(\"api\", i);\n    q(t, r, e);\n};\nvar W = {};\nfunction G(t, i, e) {\n    if (x(t)) {\n        if (s && t.forEach === s) t.forEach(i, e);\n        else if (\"length\" in t && t.length === +t.length) {\n            for(var r = 0, n = t.length; r < n; r++)if (r in t && i.call(e, t[r], r) === W) return;\n        }\n    }\n}\nfunction J(t, i, e) {\n    if (!C(t)) {\n        if (x(t)) return G(t, i, e);\n        if (D(t)) {\n            for (var r of t.entries())if (i.call(e, r[1], r[0]) === W) return;\n        } else for(var s in t)if ($.call(t, s) && i.call(e, t[s], s) === W) return;\n    }\n}\nvar V = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        for(var e in i)void 0 !== i[e] && (t[e] = i[e]);\n    }), t;\n}, K = function(t) {\n    for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n    return G(e, function(i) {\n        G(i, function(i) {\n            t.push(i);\n        });\n    }), t;\n};\nfunction Y(t) {\n    for(var i = Object.keys(t), e = i.length, r = new Array(e); e--;)r[e] = [\n        i[e],\n        t[i[e]]\n    ];\n    return r;\n}\nvar X = function(t) {\n    try {\n        return t();\n    } catch (t) {\n        return;\n    }\n}, Q = function(t) {\n    return function() {\n        try {\n            for(var i = arguments.length, e = new Array(i), r = 0; r < i; r++)e[r] = arguments[r];\n            return t.apply(this, e);\n        } catch (t) {\n            N.critical(\"Implementation error. Please turn on debug mode and open a ticket on https://app.posthog.com/home#panel=support%3Asupport%3A.\"), N.critical(t);\n        }\n    };\n}, Z = function(t) {\n    var i = {};\n    return J(t, function(t, e) {\n        (T(t) && t.length > 0 || F(t)) && (i[e] = t);\n    }), i;\n};\nfunction tt(t, i) {\n    return e = t, r = (t)=>T(t) && !O(i) ? t.slice(0, i) : t, s = new Set, function t(i, e) {\n        return i !== Object(i) ? r ? r(i, e) : i : s.has(i) ? void 0 : (s.add(i), x(i) ? (n = [], G(i, (i)=>{\n            n.push(t(i));\n        })) : (n = {}, J(i, (i, e)=>{\n            s.has(i) || (n[e] = t(i, e));\n        })), n);\n        var n;\n    }(e);\n    var e, r, s;\n}\nvar it = [\n    \"herokuapp.com\",\n    \"vercel.app\",\n    \"netlify.app\"\n];\nfunction et(t) {\n    var i = null == t ? void 0 : t.hostname;\n    if (!T(i)) return !1;\n    var e = i.split(\".\").slice(-2).join(\".\");\n    for (var r of it)if (e === r) return !1;\n    return !0;\n}\nfunction rt(t, i) {\n    for(var e = 0; e < t.length; e++)if (i(t[e])) return t[e];\n}\nfunction st(t, i, e, r) {\n    var { capture: s = !1, passive: n = !0 } = null != r ? r : {};\n    null == t || t.addEventListener(i, e, {\n        capture: s,\n        passive: n\n    });\n}\nvar nt = \"$people_distinct_id\", ot = \"__alias\", at = \"__timers\", lt = \"$autocapture_disabled_server_side\", ut = \"$heatmaps_enabled_server_side\", ht = \"$exception_capture_enabled_server_side\", dt = \"$web_vitals_enabled_server_side\", vt = \"$dead_clicks_enabled_server_side\", ct = \"$web_vitals_allowed_metrics\", ft = \"$session_recording_enabled_server_side\", pt = \"$console_log_recording_enabled_server_side\", gt = \"$session_recording_network_payload_capture\", _t = \"$session_recording_masking\", mt = \"$session_recording_canvas_recording\", bt = \"$replay_sample_rate\", wt = \"$replay_minimum_duration\", yt = \"$replay_script_config\", St = \"$sesid\", $t = \"$session_is_sampled\", kt = \"$session_recording_url_trigger_activated_session\", xt = \"$session_recording_event_trigger_activated_session\", Et = \"$enabled_feature_flags\", It = \"$early_access_features\", Pt = \"$feature_flag_details\", Rt = \"$stored_person_properties\", Tt = \"$stored_group_properties\", Mt = \"$surveys\", Ot = \"$surveys_activated\", Ct = \"$flag_call_reported\", Ft = \"$user_state\", At = \"$client_session_props\", Dt = \"$capture_rate_limit\", jt = \"$initial_campaign_params\", Lt = \"$initial_referrer_info\", Nt = \"$initial_person_info\", zt = \"$epp\", Ut = \"__POSTHOG_TOOLBAR__\", qt = \"$posthog_cookieless\", Bt = [\n    nt,\n    ot,\n    \"__cmpns\",\n    at,\n    ft,\n    ut,\n    St,\n    Et,\n    Ft,\n    It,\n    Pt,\n    Tt,\n    Rt,\n    Mt,\n    Ct,\n    At,\n    Dt,\n    jt,\n    Lt,\n    zt\n];\nfunction Ht(t) {\n    return t instanceof Element && (t.id === Ut || !(null == t.closest || !t.closest(\".toolbar-global-fade-container\")));\n}\nfunction Wt(t) {\n    return !!t && 1 === t.nodeType;\n}\nfunction Gt(t, i) {\n    return !!t && !!t.tagName && t.tagName.toLowerCase() === i.toLowerCase();\n}\nfunction Jt(t) {\n    return !!t && 3 === t.nodeType;\n}\nfunction Vt(t) {\n    return !!t && 11 === t.nodeType;\n}\nfunction Kt(t) {\n    return t ? b(t).split(/\\s+/) : [];\n}\nfunction Yt(t) {\n    var e = null == i ? void 0 : i.location.href;\n    return !!(e && t && t.some((t)=>e.match(t)));\n}\nfunction Xt(t) {\n    var i = \"\";\n    switch(typeof t.className){\n        case \"string\":\n            i = t.className;\n            break;\n        case \"object\":\n            i = (t.className && \"baseVal\" in t.className ? t.className.baseVal : null) || t.getAttribute(\"class\") || \"\";\n            break;\n        default:\n            i = \"\";\n    }\n    return Kt(i);\n}\nfunction Qt(t) {\n    return C(t) ? null : b(t).split(/(\\s+)/).filter((t)=>vi(t)).join(\"\").replace(/[\\r\\n]/g, \" \").replace(/[ ]+/g, \" \").substring(0, 255);\n}\nfunction Zt(t) {\n    var i = \"\";\n    return si(t) && !ni(t) && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        Jt(t) && t.textContent && (i += null !== (e = Qt(t.textContent)) && void 0 !== e ? e : \"\");\n    }), b(i);\n}\nfunction ti(t) {\n    return R(t.target) ? t.srcElement || null : null != (i = t.target) && i.shadowRoot ? t.composedPath()[0] || null : t.target || null;\n    var i;\n}\nvar ii = [\n    \"a\",\n    \"button\",\n    \"form\",\n    \"input\",\n    \"select\",\n    \"textarea\",\n    \"label\"\n];\nfunction ei(t) {\n    var i = t.parentNode;\n    return !(!i || !Wt(i)) && i;\n}\nfunction ri(t, e, r, s, n) {\n    var o, a, l;\n    if (void 0 === r && (r = void 0), !i || !t || Gt(t, \"html\") || !Wt(t)) return !1;\n    if (null != (o = r) && o.url_allowlist && !Yt(r.url_allowlist)) return !1;\n    if (null != (a = r) && a.url_ignorelist && Yt(r.url_ignorelist)) return !1;\n    if (null != (l = r) && l.dom_event_allowlist) {\n        var u = r.dom_event_allowlist;\n        if (u && !u.some((t)=>e.type === t)) return !1;\n    }\n    for(var h = !1, d = [\n        t\n    ], v = !0, c = t; c.parentNode && !Gt(c, \"body\");)if (Vt(c.parentNode)) d.push(c.parentNode.host), c = c.parentNode.host;\n    else {\n        if (!(v = ei(c))) break;\n        if (s || ii.indexOf(v.tagName.toLowerCase()) > -1) h = !0;\n        else {\n            var f = i.getComputedStyle(v);\n            f && \"pointer\" === f.getPropertyValue(\"cursor\") && (h = !0);\n        }\n        d.push(v), c = v;\n    }\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.element_allowlist;\n        if (R(e)) return !0;\n        var r = function(t) {\n            if (e.some((i)=>t.tagName.toLowerCase() === i)) return {\n                v: !0\n            };\n        };\n        for (var s of t){\n            var n = r(s);\n            if (\"object\" == typeof n) return n.v;\n        }\n        return !1;\n    }(d, r)) return !1;\n    if (!function(t, i) {\n        var e = null == i ? void 0 : i.css_selector_allowlist;\n        if (R(e)) return !0;\n        var r = function(t) {\n            if (e.some((i)=>t.matches(i))) return {\n                v: !0\n            };\n        };\n        for (var s of t){\n            var n = r(s);\n            if (\"object\" == typeof n) return n.v;\n        }\n        return !1;\n    }(d, r)) return !1;\n    var p = i.getComputedStyle(t);\n    if (p && \"pointer\" === p.getPropertyValue(\"cursor\") && \"click\" === e.type) return !0;\n    var g = t.tagName.toLowerCase();\n    switch(g){\n        case \"html\":\n            return !1;\n        case \"form\":\n            return (n || [\n                \"submit\"\n            ]).indexOf(e.type) >= 0;\n        case \"input\":\n        case \"select\":\n        case \"textarea\":\n            return (n || [\n                \"change\",\n                \"click\"\n            ]).indexOf(e.type) >= 0;\n        default:\n            return h ? (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 : (n || [\n                \"click\"\n            ]).indexOf(e.type) >= 0 && (ii.indexOf(g) > -1 || \"true\" === t.getAttribute(\"contenteditable\"));\n    }\n}\nfunction si(t) {\n    for(var i = t; i.parentNode && !Gt(i, \"body\"); i = i.parentNode){\n        var e = Xt(i);\n        if (m(e, \"ph-sensitive\") || m(e, \"ph-no-capture\")) return !1;\n    }\n    if (m(Xt(t), \"ph-include\")) return !0;\n    var r = t.type || \"\";\n    if (T(r)) switch(r.toLowerCase()){\n        case \"hidden\":\n        case \"password\":\n            return !1;\n    }\n    var s = t.name || t.id || \"\";\n    if (T(s)) {\n        if (/^cc|cardnum|ccnum|creditcard|csc|cvc|cvv|exp|pass|pwd|routing|seccode|securitycode|securitynum|socialsec|socsec|ssn/i.test(s.replace(/[^a-zA-Z0-9]/g, \"\"))) return !1;\n    }\n    return !0;\n}\nfunction ni(t) {\n    return !!(Gt(t, \"input\") && ![\n        \"button\",\n        \"checkbox\",\n        \"submit\",\n        \"reset\"\n    ].includes(t.type) || Gt(t, \"select\") || Gt(t, \"textarea\") || \"true\" === t.getAttribute(\"contenteditable\"));\n}\nvar oi = \"(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})\", ai = new RegExp(\"^(?:\" + oi + \")$\"), li = new RegExp(oi), ui = \"\\\\d{3}-?\\\\d{2}-?\\\\d{4}\", hi = new RegExp(\"^(\" + ui + \")$\"), di = new RegExp(\"(\" + ui + \")\");\nfunction vi(t, i) {\n    if (void 0 === i && (i = !0), C(t)) return !1;\n    if (T(t)) {\n        if (t = b(t), (i ? ai : li).test((t || \"\").replace(/[- ]/g, \"\"))) return !1;\n        if ((i ? hi : di).test(t)) return !1;\n    }\n    return !0;\n}\nfunction ci(t) {\n    var i = Zt(t);\n    return vi(i = (i + \" \" + fi(t)).trim()) ? i : \"\";\n}\nfunction fi(t) {\n    var i = \"\";\n    return t && t.childNodes && t.childNodes.length && J(t.childNodes, function(t) {\n        var e;\n        if (t && \"span\" === (null == (e = t.tagName) ? void 0 : e.toLowerCase())) try {\n            var r = Zt(t);\n            i = (i + \" \" + r).trim(), t.childNodes && t.childNodes.length && (i = (i + \" \" + fi(t)).trim());\n        } catch (t) {\n            N.error(\"[AutoCapture]\", t);\n        }\n    }), i;\n}\nfunction pi(t) {\n    return function(t) {\n        var i = t.map((t)=>{\n            var i, e, r = \"\";\n            if (t.tag_name && (r += t.tag_name), t.attr_class) for (var s of (t.attr_class.sort(), t.attr_class))r += \".\" + s.replace(/\"/g, \"\");\n            var n = B({}, t.text ? {\n                text: t.text\n            } : {}, {\n                \"nth-child\": null !== (i = t.nth_child) && void 0 !== i ? i : 0,\n                \"nth-of-type\": null !== (e = t.nth_of_type) && void 0 !== e ? e : 0\n            }, t.href ? {\n                href: t.href\n            } : {}, t.attr_id ? {\n                attr_id: t.attr_id\n            } : {}, t.attributes), o = {};\n            return Y(n).sort((t, i)=>{\n                var [e] = t, [r] = i;\n                return e.localeCompare(r);\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return o[gi(i.toString())] = gi(e.toString());\n            }), r += \":\", r += Y(n).map((t)=>{\n                var [i, e] = t;\n                return i + '=\"' + e + '\"';\n            }).join(\"\");\n        });\n        return i.join(\";\");\n    }(function(t) {\n        return t.map((t)=>{\n            var i, e, r = {\n                text: null == (i = t.$el_text) ? void 0 : i.slice(0, 400),\n                tag_name: t.tag_name,\n                href: null == (e = t.attr__href) ? void 0 : e.slice(0, 2048),\n                attr_class: _i(t),\n                attr_id: t.attr__id,\n                nth_child: t.nth_child,\n                nth_of_type: t.nth_of_type,\n                attributes: {}\n            };\n            return Y(t).filter((t)=>{\n                var [i] = t;\n                return 0 === i.indexOf(\"attr__\");\n            }).forEach((t)=>{\n                var [i, e] = t;\n                return r.attributes[i] = e;\n            }), r;\n        });\n    }(t));\n}\nfunction gi(t) {\n    return t.replace(/\"|\\\\\"/g, '\\\\\"');\n}\nfunction _i(t) {\n    var i = t.attr__class;\n    return i ? x(i) ? i : Kt(i) : void 0;\n}\nclass mi {\n    constructor(){\n        this.clicks = [];\n    }\n    isRageClick(t, i, e) {\n        var r = this.clicks[this.clicks.length - 1];\n        if (r && Math.abs(t - r.x) + Math.abs(i - r.y) < 30 && e - r.timestamp < 1e3) {\n            if (this.clicks.push({\n                x: t,\n                y: i,\n                timestamp: e\n            }), 3 === this.clicks.length) return !0;\n        } else this.clicks = [\n            {\n                x: t,\n                y: i,\n                timestamp: e\n            }\n        ];\n        return !1;\n    }\n}\nvar bi = [\n    \"localhost\",\n    \"127.0.0.1\"\n], wi = (t)=>{\n    var i = null == a ? void 0 : a.createElement(\"a\");\n    return R(i) ? null : (i.href = t, i);\n}, yi = function(t, i) {\n    var e, r;\n    void 0 === i && (i = \"&\");\n    var s = [];\n    return J(t, function(t, i) {\n        R(t) || R(i) || \"undefined\" === i || (e = encodeURIComponent(((t)=>t instanceof File)(t) ? t.name : t.toString()), r = encodeURIComponent(i), s[s.length] = r + \"=\" + e);\n    }), s.join(i);\n}, Si = function(t, i) {\n    for(var e, r = ((t.split(\"#\")[0] || \"\").split(/\\?(.*)/)[1] || \"\").replace(/^\\?+/g, \"\").split(\"&\"), s = 0; s < r.length; s++){\n        var n = r[s].split(\"=\");\n        if (n[0] === i) {\n            e = n;\n            break;\n        }\n    }\n    if (!x(e) || e.length < 2) return \"\";\n    var o = e[1];\n    try {\n        o = decodeURIComponent(o);\n    } catch (t) {\n        N.error(\"Skipping decoding for malformed query param: \" + o);\n    }\n    return o.replace(/\\+/g, \" \");\n}, $i = function(t, i, e) {\n    if (!t || !i || !i.length) return t;\n    for(var r = t.split(\"#\"), s = r[0] || \"\", n = r[1], o = s.split(\"?\"), a = o[1], l = o[0], u = (a || \"\").split(\"&\"), h = [], d = 0; d < u.length; d++){\n        var v = u[d].split(\"=\");\n        x(v) && (i.includes(v[0]) ? h.push(v[0] + \"=\" + e) : h.push(u[d]));\n    }\n    var c = l;\n    return null != a && (c += \"?\" + h.join(\"&\")), null != n && (c += \"#\" + n), c;\n}, ki = function(t, i) {\n    var e = t.match(new RegExp(i + \"=([^&]*)\"));\n    return e ? e[1] : null;\n}, xi = z(\"[AutoCapture]\");\nfunction Ei(t, i) {\n    return i.length > t ? i.slice(0, t) + \"...\" : i;\n}\nfunction Ii(t) {\n    if (t.previousElementSibling) return t.previousElementSibling;\n    var i = t;\n    do {\n        i = i.previousSibling;\n    }while (i && !Wt(i));\n    return i;\n}\nfunction Pi(t, i, e, r) {\n    var s = t.tagName.toLowerCase(), n = {\n        tag_name: s\n    };\n    ii.indexOf(s) > -1 && !e && (\"a\" === s.toLowerCase() || \"button\" === s.toLowerCase() ? n.$el_text = Ei(1024, ci(t)) : n.$el_text = Ei(1024, Zt(t)));\n    var o = Xt(t);\n    o.length > 0 && (n.classes = o.filter(function(t) {\n        return \"\" !== t;\n    })), J(t.attributes, function(e) {\n        var s;\n        if ((!ni(t) || -1 !== [\n            \"name\",\n            \"id\",\n            \"class\",\n            \"aria-label\"\n        ].indexOf(e.name)) && (null == r || !r.includes(e.name)) && !i && vi(e.value) && (s = e.name, !T(s) || \"_ngcontent\" !== s.substring(0, 10) && \"_nghost\" !== s.substring(0, 7))) {\n            var o = e.value;\n            \"class\" === e.name && (o = Kt(o).join(\" \")), n[\"attr__\" + e.name] = Ei(1024, o);\n        }\n    });\n    for(var a = 1, l = 1, u = t; u = Ii(u);)a++, u.tagName === t.tagName && l++;\n    return n.nth_child = a, n.nth_of_type = l, n;\n}\nfunction Ri(t, e) {\n    for(var r, s, { e: n, maskAllElementAttributes: o, maskAllText: a, elementAttributeIgnoreList: l, elementsChainAsString: u } = e, h = [\n        t\n    ], d = t; d.parentNode && !Gt(d, \"body\");)Vt(d.parentNode) ? (h.push(d.parentNode.host), d = d.parentNode.host) : (h.push(d.parentNode), d = d.parentNode);\n    var v, c = [], f = {}, p = !1, g = !1;\n    if (J(h, (t)=>{\n        var i = si(t);\n        \"a\" === t.tagName.toLowerCase() && (p = t.getAttribute(\"href\"), p = i && p && vi(p) && p), m(Xt(t), \"ph-no-capture\") && (g = !0), c.push(Pi(t, o, a, l));\n        var e = function(t) {\n            if (!si(t)) return {};\n            var i = {};\n            return J(t.attributes, function(t) {\n                if (t.name && 0 === t.name.indexOf(\"data-ph-capture-attribute\")) {\n                    var e = t.name.replace(\"data-ph-capture-attribute-\", \"\"), r = t.value;\n                    e && r && vi(r) && (i[e] = r);\n                }\n            }), i;\n        }(t);\n        V(f, e);\n    }), g) return {\n        props: {},\n        explicitNoCapture: g\n    };\n    if (a || (\"a\" === t.tagName.toLowerCase() || \"button\" === t.tagName.toLowerCase() ? c[0].$el_text = ci(t) : c[0].$el_text = Zt(t)), p) {\n        var _, b;\n        c[0].attr__href = p;\n        var w = null == (_ = wi(p)) ? void 0 : _.host, y = null == i || null == (b = i.location) ? void 0 : b.host;\n        w && y && w !== y && (v = p);\n    }\n    return {\n        props: V({\n            $event_type: n.type,\n            $ce_version: 1\n        }, u ? {} : {\n            $elements: c\n        }, {\n            $elements_chain: pi(c)\n        }, null != (r = c[0]) && r.$el_text ? {\n            $el_text: null == (s = c[0]) ? void 0 : s.$el_text\n        } : {}, v && \"click\" === n.type ? {\n            $external_click_url: v\n        } : {}, f)\n    };\n}\nclass Ti {\n    constructor(t){\n        this.i = !1, this.o = null, this.rageclicks = new mi, this.h = !1, this.instance = t, this.m = null;\n    }\n    get S() {\n        var t, i, e = I(this.instance.config.autocapture) ? this.instance.config.autocapture : {};\n        return e.url_allowlist = null == (t = e.url_allowlist) ? void 0 : t.map((t)=>new RegExp(t)), e.url_ignorelist = null == (i = e.url_ignorelist) ? void 0 : i.map((t)=>new RegExp(t)), e;\n    }\n    $() {\n        if (this.isBrowserSupported()) {\n            if (i && a) {\n                var t = (t)=>{\n                    t = t || (null == i ? void 0 : i.event);\n                    try {\n                        this.k(t);\n                    } catch (t) {\n                        xi.error(\"Failed to capture event\", t);\n                    }\n                };\n                if (st(a, \"submit\", t, {\n                    capture: !0\n                }), st(a, \"change\", t, {\n                    capture: !0\n                }), st(a, \"click\", t, {\n                    capture: !0\n                }), this.S.capture_copied_text) {\n                    var e = (t)=>{\n                        t = t || (null == i ? void 0 : i.event), this.k(t, p);\n                    };\n                    st(a, \"copy\", e, {\n                        capture: !0\n                    }), st(a, \"cut\", e, {\n                        capture: !0\n                    });\n                }\n            }\n        } else xi.info(\"Disabling Automatic Event Collection because this browser is not supported\");\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (this.$(), this.i = !0);\n    }\n    onRemoteConfig(t) {\n        t.elementsChainAsString && (this.h = t.elementsChainAsString), this.instance.persistence && this.instance.persistence.register({\n            [lt]: !!t.autocapture_opt_out\n        }), this.o = !!t.autocapture_opt_out, this.startIfEnabled();\n    }\n    setElementSelectors(t) {\n        this.m = t;\n    }\n    getElementSelectors(t) {\n        var i, e = [];\n        return null == (i = this.m) || i.forEach((i)=>{\n            var r = null == a ? void 0 : a.querySelectorAll(i);\n            null == r || r.forEach((r)=>{\n                t === r && e.push(i);\n            });\n        }), e;\n    }\n    get isEnabled() {\n        var t, i, e = null == (t = this.instance.persistence) ? void 0 : t.props[lt], r = this.o;\n        if (O(r) && !A(e) && !this.instance.config.advanced_disable_decide) return !1;\n        var s = null !== (i = this.o) && void 0 !== i ? i : !!e;\n        return !!this.instance.config.autocapture && !s;\n    }\n    k(t, e) {\n        if (void 0 === e && (e = \"$autocapture\"), this.isEnabled) {\n            var r, s = ti(t);\n            if (Jt(s) && (s = s.parentNode || null), \"$autocapture\" === e && \"click\" === t.type && t instanceof MouseEvent) this.instance.config.rageclick && null != (r = this.rageclicks) && r.isRageClick(t.clientX, t.clientY, (new Date).getTime()) && this.k(t, \"$rageclick\");\n            var n = e === p;\n            if (s && ri(s, t, this.S, n, n ? [\n                \"copy\",\n                \"cut\"\n            ] : void 0)) {\n                var { props: o, explicitNoCapture: a } = Ri(s, {\n                    e: t,\n                    maskAllElementAttributes: this.instance.config.mask_all_element_attributes,\n                    maskAllText: this.instance.config.mask_all_text,\n                    elementAttributeIgnoreList: this.S.element_attribute_ignorelist,\n                    elementsChainAsString: this.h\n                });\n                if (a) return !1;\n                var l = this.getElementSelectors(s);\n                if (l && l.length > 0 && (o.$element_selectors = l), e === p) {\n                    var u, h = Qt(null == i || null == (u = i.getSelection()) ? void 0 : u.toString()), d = t.type || \"clipboard\";\n                    if (!h) return !1;\n                    o.$selected_content = h, o.$copy_type = d;\n                }\n                return this.instance.capture(e, o), !0;\n            }\n        }\n    }\n    isBrowserSupported() {\n        return E(null == a ? void 0 : a.querySelectorAll);\n    }\n}\nMath.trunc || (Math.trunc = function(t) {\n    return t < 0 ? Math.ceil(t) : Math.floor(t);\n}), Number.isInteger || (Number.isInteger = function(t) {\n    return F(t) && isFinite(t) && Math.floor(t) === t;\n});\nvar Mi = \"0123456789abcdef\";\nclass Oi {\n    constructor(t){\n        if (this.bytes = t, 16 !== t.length) throw new TypeError(\"not 128-bit length\");\n    }\n    static fromFieldsV7(t, i, e, r) {\n        if (!Number.isInteger(t) || !Number.isInteger(i) || !Number.isInteger(e) || !Number.isInteger(r) || t < 0 || i < 0 || e < 0 || r < 0 || t > 0xffffffffffff || i > 4095 || e > 1073741823 || r > 4294967295) throw new RangeError(\"invalid field value\");\n        var s = new Uint8Array(16);\n        return s[0] = t / Math.pow(2, 40), s[1] = t / Math.pow(2, 32), s[2] = t / Math.pow(2, 24), s[3] = t / Math.pow(2, 16), s[4] = t / Math.pow(2, 8), s[5] = t, s[6] = 112 | i >>> 8, s[7] = i, s[8] = 128 | e >>> 24, s[9] = e >>> 16, s[10] = e >>> 8, s[11] = e, s[12] = r >>> 24, s[13] = r >>> 16, s[14] = r >>> 8, s[15] = r, new Oi(s);\n    }\n    toString() {\n        for(var t = \"\", i = 0; i < this.bytes.length; i++)t = t + Mi.charAt(this.bytes[i] >>> 4) + Mi.charAt(15 & this.bytes[i]), 3 !== i && 5 !== i && 7 !== i && 9 !== i || (t += \"-\");\n        if (36 !== t.length) throw new Error(\"Invalid UUIDv7 was generated\");\n        return t;\n    }\n    clone() {\n        return new Oi(this.bytes.slice(0));\n    }\n    equals(t) {\n        return 0 === this.compareTo(t);\n    }\n    compareTo(t) {\n        for(var i = 0; i < 16; i++){\n            var e = this.bytes[i] - t.bytes[i];\n            if (0 !== e) return Math.sign(e);\n        }\n        return 0;\n    }\n}\nclass Ci {\n    constructor(){\n        this.I = 0, this.P = 0, this.R = new Di;\n    }\n    generate() {\n        var t = this.generateOrAbort();\n        if (R(t)) {\n            this.I = 0;\n            var i = this.generateOrAbort();\n            if (R(i)) throw new Error(\"Could not generate UUID after timestamp reset\");\n            return i;\n        }\n        return t;\n    }\n    generateOrAbort() {\n        var t = Date.now();\n        if (t > this.I) this.I = t, this.T();\n        else {\n            if (!(t + 1e4 > this.I)) return;\n            this.P++, this.P > 4398046511103 && (this.I++, this.T());\n        }\n        return Oi.fromFieldsV7(this.I, Math.trunc(this.P / Math.pow(2, 30)), this.P & Math.pow(2, 30) - 1, this.R.nextUint32());\n    }\n    T() {\n        this.P = 1024 * this.R.nextUint32() + (1023 & this.R.nextUint32());\n    }\n}\nvar Fi, Ai = (t)=>{\n    if (\"undefined\" != typeof UUIDV7_DENY_WEAK_RNG && UUIDV7_DENY_WEAK_RNG) throw new Error(\"no cryptographically strong RNG available\");\n    for(var i = 0; i < t.length; i++)t[i] = 65536 * Math.trunc(65536 * Math.random()) + Math.trunc(65536 * Math.random());\n    return t;\n};\ni && !R(i.crypto) && crypto.getRandomValues && (Ai = (t)=>crypto.getRandomValues(t));\nclass Di {\n    constructor(){\n        this.M = new Uint32Array(8), this.O = 1 / 0;\n    }\n    nextUint32() {\n        return this.O >= this.M.length && (Ai(this.M), this.O = 0), this.M[this.O++];\n    }\n}\nvar ji = ()=>Li().toString(), Li = ()=>(Fi || (Fi = new Ci)).generate(), Ni = \"Thu, 01 Jan 1970 00:00:00 GMT\", zi = \"\";\nvar Ui = /[a-z0-9][a-z0-9-]+\\.[a-z]{2,}$/i;\nfunction qi(t, i) {\n    if (i) {\n        var e = function(t, i) {\n            if (void 0 === i && (i = a), zi) return zi;\n            if (!i) return \"\";\n            if ([\n                \"localhost\",\n                \"127.0.0.1\"\n            ].includes(t)) return \"\";\n            for(var e = t.split(\".\"), r = Math.min(e.length, 8), s = \"dmn_chk_\" + ji(), n = new RegExp(\"(^|;)\\\\s*\" + s + \"=1\"); !zi && r--;){\n                var o = e.slice(r).join(\".\"), l = s + \"=1;domain=.\" + o;\n                i.cookie = l, n.test(i.cookie) && (i.cookie = l + \";expires=\" + Ni, zi = o);\n            }\n            return zi;\n        }(t);\n        if (!e) {\n            var r = ((t)=>{\n                var i = t.match(Ui);\n                return i ? i[0] : \"\";\n            })(t);\n            r !== e && N.info(\"Warning: cookie subdomain discovery mismatch\", r, e), e = r;\n        }\n        return e ? \"; domain=.\" + e : \"\";\n    }\n    return \"\";\n}\nvar Bi, Hi = {\n    C: ()=>!!a,\n    F: function(t) {\n        N.error(\"cookieStore error: \" + t);\n    },\n    A: function(t) {\n        if (a) {\n            try {\n                for(var i = t + \"=\", e = a.cookie.split(\";\").filter((t)=>t.length), r = 0; r < e.length; r++){\n                    for(var s = e[r]; \" \" == s.charAt(0);)s = s.substring(1, s.length);\n                    if (0 === s.indexOf(i)) return decodeURIComponent(s.substring(i.length, s.length));\n                }\n            } catch (t) {}\n            return null;\n        }\n    },\n    D: function(t) {\n        var i;\n        try {\n            i = JSON.parse(Hi.A(t)) || {};\n        } catch (t) {}\n        return i;\n    },\n    j: function(t, i, e, r, s) {\n        if (a) try {\n            var n = \"\", o = \"\", l = qi(a.location.hostname, r);\n            if (e) {\n                var u = new Date;\n                u.setTime(u.getTime() + 24 * e * 60 * 60 * 1e3), n = \"; expires=\" + u.toUTCString();\n            }\n            s && (o = \"; secure\");\n            var h = t + \"=\" + encodeURIComponent(JSON.stringify(i)) + n + \"; SameSite=Lax; path=/\" + l + o;\n            return h.length > 3686.4 && N.warn(\"cookieStore warning: large cookie, len=\" + h.length), a.cookie = h, h;\n        } catch (t) {\n            return;\n        }\n    },\n    L: function(t, i) {\n        try {\n            Hi.j(t, \"\", -1, i);\n        } catch (t) {\n            return;\n        }\n    }\n}, Wi = null, Gi = {\n    C: function() {\n        if (!O(Wi)) return Wi;\n        var t = !0;\n        if (R(i)) t = !1;\n        else try {\n            var e = \"__mplssupport__\";\n            Gi.j(e, \"xyz\"), '\"xyz\"' !== Gi.A(e) && (t = !1), Gi.L(e);\n        } catch (i) {\n            t = !1;\n        }\n        return t || N.error(\"localStorage unsupported; falling back to cookie store\"), Wi = t, t;\n    },\n    F: function(t) {\n        N.error(\"localStorage error: \" + t);\n    },\n    A: function(t) {\n        try {\n            return null == i ? void 0 : i.localStorage.getItem(t);\n        } catch (t) {\n            Gi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Gi.A(t)) || {};\n        } catch (t) {}\n        return null;\n    },\n    j: function(t, e) {\n        try {\n            null == i || i.localStorage.setItem(t, JSON.stringify(e));\n        } catch (t) {\n            Gi.F(t);\n        }\n    },\n    L: function(t) {\n        try {\n            null == i || i.localStorage.removeItem(t);\n        } catch (t) {\n            Gi.F(t);\n        }\n    }\n}, Ji = [\n    \"distinct_id\",\n    St,\n    $t,\n    zt,\n    Nt\n], Vi = B({}, Gi, {\n    D: function(t) {\n        try {\n            var i = {};\n            try {\n                i = Hi.D(t) || {};\n            } catch (t) {}\n            var e = V(i, JSON.parse(Gi.A(t) || \"{}\"));\n            return Gi.j(t, e), e;\n        } catch (t) {}\n        return null;\n    },\n    j: function(t, i, e, r, s, n) {\n        try {\n            Gi.j(t, i, void 0, void 0, n);\n            var o = {};\n            Ji.forEach((t)=>{\n                i[t] && (o[t] = i[t]);\n            }), Object.keys(o).length && Hi.j(t, o, e, r, s, n);\n        } catch (t) {\n            Gi.F(t);\n        }\n    },\n    L: function(t, e) {\n        try {\n            null == i || i.localStorage.removeItem(t), Hi.L(t, e);\n        } catch (t) {\n            Gi.F(t);\n        }\n    }\n}), Ki = {}, Yi = {\n    C: function() {\n        return !0;\n    },\n    F: function(t) {\n        N.error(\"memoryStorage error: \" + t);\n    },\n    A: function(t) {\n        return Ki[t] || null;\n    },\n    D: function(t) {\n        return Ki[t] || null;\n    },\n    j: function(t, i) {\n        Ki[t] = i;\n    },\n    L: function(t) {\n        delete Ki[t];\n    }\n}, Xi = null, Qi = {\n    C: function() {\n        if (!O(Xi)) return Xi;\n        if (Xi = !0, R(i)) Xi = !1;\n        else try {\n            var t = \"__support__\";\n            Qi.j(t, \"xyz\"), '\"xyz\"' !== Qi.A(t) && (Xi = !1), Qi.L(t);\n        } catch (t) {\n            Xi = !1;\n        }\n        return Xi;\n    },\n    F: function(t) {\n        N.error(\"sessionStorage error: \", t);\n    },\n    A: function(t) {\n        try {\n            return null == i ? void 0 : i.sessionStorage.getItem(t);\n        } catch (t) {\n            Qi.F(t);\n        }\n        return null;\n    },\n    D: function(t) {\n        try {\n            return JSON.parse(Qi.A(t)) || null;\n        } catch (t) {}\n        return null;\n    },\n    j: function(t, e) {\n        try {\n            null == i || i.sessionStorage.setItem(t, JSON.stringify(e));\n        } catch (t) {\n            Qi.F(t);\n        }\n    },\n    L: function(t) {\n        try {\n            null == i || i.sessionStorage.removeItem(t);\n        } catch (t) {\n            Qi.F(t);\n        }\n    }\n};\n!function(t) {\n    t[t.PENDING = -1] = \"PENDING\", t[t.DENIED = 0] = \"DENIED\", t[t.GRANTED = 1] = \"GRANTED\";\n}(Bi || (Bi = {}));\nclass Zi {\n    constructor(t){\n        this.N = t;\n    }\n    get S() {\n        return this.N.config;\n    }\n    get consent() {\n        return this.U() ? Bi.DENIED : this.q;\n    }\n    isOptedOut() {\n        return this.consent === Bi.DENIED || this.consent === Bi.PENDING && this.S.opt_out_capturing_by_default;\n    }\n    isOptedIn() {\n        return !this.isOptedOut();\n    }\n    optInOut(t) {\n        this.B.j(this.H, t ? 1 : 0, this.S.cookie_expiration, this.S.cross_subdomain_cookie, this.S.secure_cookie);\n    }\n    reset() {\n        this.B.L(this.H, this.S.cross_subdomain_cookie);\n    }\n    get H() {\n        var { token: t, opt_out_capturing_cookie_prefix: i } = this.N.config;\n        return (i || \"__ph_opt_in_out_\") + t;\n    }\n    get q() {\n        var t = this.B.A(this.H);\n        return \"1\" === t ? Bi.GRANTED : \"0\" === t ? Bi.DENIED : Bi.PENDING;\n    }\n    get B() {\n        if (!this.W) {\n            var t = this.S.opt_out_capturing_persistence_type;\n            this.W = \"localStorage\" === t ? Gi : Hi;\n            var i = \"localStorage\" === t ? Hi : Gi;\n            i.A(this.H) && (this.W.A(this.H) || this.optInOut(\"1\" === i.A(this.H)), i.L(this.H, this.S.cross_subdomain_cookie));\n        }\n        return this.W;\n    }\n    U() {\n        return !!this.S.respect_dnt && !!rt([\n            null == o ? void 0 : o.doNotTrack,\n            null == o ? void 0 : o.msDoNotTrack,\n            c.doNotTrack\n        ], (t)=>m([\n                !0,\n                1,\n                \"1\",\n                \"yes\"\n            ], t));\n    }\n}\nvar te = z(\"[Dead Clicks]\"), ie = ()=>!0, ee = (t)=>{\n    var i, e = !(null == (i = t.instance.persistence) || !i.get_property(vt)), r = t.instance.config.capture_dead_clicks;\n    return A(r) ? r : e;\n};\nclass re {\n    get lazyLoadedDeadClicksAutocapture() {\n        return this.G;\n    }\n    constructor(t, i, e){\n        this.instance = t, this.isEnabled = i, this.onCapture = e, this.startIfEnabled();\n    }\n    onRemoteConfig(t) {\n        this.instance.persistence && this.instance.persistence.register({\n            [vt]: null == t ? void 0 : t.captureDeadClicks\n        }), this.startIfEnabled();\n    }\n    startIfEnabled() {\n        this.isEnabled(this) && this.J(()=>{\n            this.V();\n        });\n    }\n    J(t) {\n        var i, e;\n        null != (i = c.__PosthogExtensions__) && i.initDeadClicksAutocapture && t(), null == (e = c.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.instance, \"dead-clicks-autocapture\", (i)=>{\n            i ? te.error(\"failed to load script\", i) : t();\n        });\n    }\n    V() {\n        var t;\n        if (a) {\n            if (!this.G && null != (t = c.__PosthogExtensions__) && t.initDeadClicksAutocapture) {\n                var i = I(this.instance.config.capture_dead_clicks) ? this.instance.config.capture_dead_clicks : {};\n                i.__onCapture = this.onCapture, this.G = c.__PosthogExtensions__.initDeadClicksAutocapture(this.instance, i), this.G.start(a), te.info(\"starting...\");\n            }\n        } else te.error(\"`document` not found. Cannot start.\");\n    }\n    stop() {\n        this.G && (this.G.stop(), this.G = void 0, te.info(\"stopping...\"));\n    }\n}\nvar se = z(\"[ExceptionAutocapture]\");\nclass ne {\n    constructor(t){\n        var e;\n        this.K = ()=>{\n            var t;\n            if (i && this.isEnabled && null != (t = c.__PosthogExtensions__) && t.errorWrappingFunctions) {\n                var e = c.__PosthogExtensions__.errorWrappingFunctions.wrapOnError, r = c.__PosthogExtensions__.errorWrappingFunctions.wrapUnhandledRejection, s = c.__PosthogExtensions__.errorWrappingFunctions.wrapConsoleError;\n                try {\n                    !this.Y && this.config.capture_unhandled_errors && (this.Y = e(this.captureException.bind(this))), !this.X && this.config.capture_unhandled_rejections && (this.X = r(this.captureException.bind(this))), !this.Z && this.config.capture_console_errors && (this.Z = s(this.captureException.bind(this)));\n                } catch (t) {\n                    se.error(\"failed to start\", t), this.tt();\n                }\n            }\n        }, this.instance = t, this.remoteEnabled = !(null == (e = this.instance.persistence) || !e.props[ht]), this.config = this.it(), this.startIfEnabled();\n    }\n    it() {\n        var t = this.instance.config.capture_exceptions, i = {\n            capture_unhandled_errors: !1,\n            capture_unhandled_rejections: !1,\n            capture_console_errors: !1\n        };\n        return I(t) ? i = B({}, i, t) : (R(t) ? this.remoteEnabled : t) && (i = B({}, i, {\n            capture_unhandled_errors: !0,\n            capture_unhandled_rejections: !0\n        })), i;\n    }\n    get isEnabled() {\n        return this.config.capture_console_errors || this.config.capture_unhandled_errors || this.config.capture_unhandled_rejections;\n    }\n    startIfEnabled() {\n        this.isEnabled && (se.info(\"enabled\"), this.J(this.K));\n    }\n    J(t) {\n        var i, e;\n        null != (i = c.__PosthogExtensions__) && i.errorWrappingFunctions && t(), null == (e = c.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.instance, \"exception-autocapture\", (i)=>{\n            if (i) return se.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    tt() {\n        var t, i, e;\n        null == (t = this.Y) || t.call(this), this.Y = void 0, null == (i = this.X) || i.call(this), this.X = void 0, null == (e = this.Z) || e.call(this), this.Z = void 0;\n    }\n    onRemoteConfig(t) {\n        var i = t.autocaptureExceptions;\n        this.remoteEnabled = !!i || !1, this.config = this.it(), this.instance.persistence && this.instance.persistence.register({\n            [ht]: this.remoteEnabled\n        }), this.startIfEnabled();\n    }\n    captureException(t) {\n        var i = this.instance.requestRouter.endpointFor(\"ui\");\n        t.$exception_personURL = i + \"/project/\" + this.instance.config.token + \"/person/\" + this.instance.get_distinct_id(), this.instance.exceptions.sendExceptionEvent(t);\n    }\n}\nfunction oe(t) {\n    return !R(Event) && ae(t, Event);\n}\nfunction ae(t, i) {\n    try {\n        return t instanceof i;\n    } catch (t) {\n        return !1;\n    }\n}\nfunction le(t) {\n    switch(Object.prototype.toString.call(t)){\n        case \"[object Error]\":\n        case \"[object Exception]\":\n        case \"[object DOMException]\":\n        case \"[object DOMError]\":\n            return !0;\n        default:\n            return ae(t, Error);\n    }\n}\nfunction ue(t, i) {\n    return Object.prototype.toString.call(t) === \"[object \" + i + \"]\";\n}\nfunction he(t) {\n    return ue(t, \"DOMError\");\n}\nvar de = /\\(error: (.*)\\)/, ve = 50, ce = \"?\";\nfunction fe(t, i, e, r) {\n    var s = {\n        platform: \"web:javascript\",\n        filename: t,\n        function: \"<anonymous>\" === i ? ce : i,\n        in_app: !0\n    };\n    return R(e) || (s.lineno = e), R(r) || (s.colno = r), s;\n}\nvar pe = /^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i, ge = /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, _e = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/, me = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i, be = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i, we = function() {\n    for(var t = arguments.length, i = new Array(t), e = 0; e < t; e++)i[e] = arguments[e];\n    var r = i.sort((t, i)=>t[0] - i[0]).map((t)=>t[1]);\n    return function(t, i) {\n        void 0 === i && (i = 0);\n        for(var e = [], s = t.split(\"\\n\"), n = i; n < s.length; n++){\n            var o = s[n];\n            if (!(o.length > 1024)) {\n                var a = de.test(o) ? o.replace(de, \"$1\") : o;\n                if (!a.match(/\\S*Error: /)) {\n                    for (var l of r){\n                        var u = l(a);\n                        if (u) {\n                            e.push(u);\n                            break;\n                        }\n                    }\n                    if (e.length >= ve) break;\n                }\n            }\n        }\n        return function(t) {\n            if (!t.length) return [];\n            var i = Array.from(t);\n            return i.reverse(), i.slice(0, ve).map((t)=>B({}, t, {\n                    filename: t.filename || ye(i).filename,\n                    function: t.function || ce\n                }));\n        }(e);\n    };\n}(...[\n    [\n        30,\n        (t)=>{\n            var i = pe.exec(t);\n            if (i) {\n                var [, e, r, s] = i;\n                return fe(e, ce, +r, +s);\n            }\n            var n = ge.exec(t);\n            if (n) {\n                if (n[2] && 0 === n[2].indexOf(\"eval\")) {\n                    var o = _e.exec(n[2]);\n                    o && (n[2] = o[1], n[3] = o[2], n[4] = o[3]);\n                }\n                var [a, l] = xe(n[1] || ce, n[2]);\n                return fe(l, a, n[3] ? +n[3] : void 0, n[4] ? +n[4] : void 0);\n            }\n        }\n    ],\n    [\n        50,\n        (t)=>{\n            var i = me.exec(t);\n            if (i) {\n                if (i[3] && i[3].indexOf(\" > eval\") > -1) {\n                    var e = be.exec(i[3]);\n                    e && (i[1] = i[1] || \"eval\", i[3] = e[1], i[4] = e[2], i[5] = \"\");\n                }\n                var r = i[3], s = i[1] || ce;\n                return [s, r] = xe(s, r), fe(r, s, i[4] ? +i[4] : void 0, i[5] ? +i[5] : void 0);\n            }\n        }\n    ]\n]);\nfunction ye(t) {\n    return t[t.length - 1] || {};\n}\nvar Se, $e, ke, xe = (t, i)=>{\n    var e = -1 !== t.indexOf(\"safari-extension\"), r = -1 !== t.indexOf(\"safari-web-extension\");\n    return e || r ? [\n        -1 !== t.indexOf(\"@\") ? t.split(\"@\")[0] : ce,\n        e ? \"safari-extension:\" + i : \"safari-web-extension:\" + i\n    ] : [\n        t,\n        i\n    ];\n};\nvar Ee = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\nfunction Ie(t, i) {\n    void 0 === i && (i = 0);\n    var e = t.stacktrace || t.stack || \"\", r = function(t) {\n        if (t && Pe.test(t.message)) return 1;\n        return 0;\n    }(t);\n    try {\n        var s = we, n = function(t, i) {\n            var e = function(t) {\n                var i = globalThis._posthogChunkIds;\n                if (!i) return {};\n                var e = Object.keys(i);\n                return ke && e.length === $e || ($e = e.length, ke = e.reduce((e, r)=>{\n                    Se || (Se = {});\n                    var s = Se[r];\n                    if (s) e[s[0]] = s[1];\n                    else for(var n = t(r), o = n.length - 1; o >= 0; o--){\n                        var a = n[o], l = null == a ? void 0 : a.filename, u = i[r];\n                        if (l && u) {\n                            e[l] = u, Se[r] = [\n                                l,\n                                u\n                            ];\n                            break;\n                        }\n                    }\n                    return e;\n                }, {})), ke;\n            }(i);\n            return t.forEach((t)=>{\n                t.filename && (t.chunk_id = e[t.filename]);\n            }), t;\n        }(s(e, r), s);\n        return n.slice(0, n.length - i);\n    } catch (t) {}\n    return [];\n}\nvar Pe = /Minified React error #\\d+;/i;\nfunction Re(t, i) {\n    var e, r, s = Ie(t), n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null !== (r = null == i ? void 0 : i.synthetic) && void 0 !== r && r;\n    return {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : t.name,\n        value: function(t) {\n            var i = t.message;\n            if (i.error && \"string\" == typeof i.error.message) return String(i.error.message);\n            return String(i);\n        }(t),\n        stacktrace: {\n            frames: s,\n            type: \"raw\"\n        },\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n}\nfunction Te(t, i) {\n    var e = Re(t, i);\n    return t.cause && le(t.cause) && t.cause !== t ? [\n        e,\n        ...Te(t.cause, {\n            handled: null == i ? void 0 : i.handled,\n            synthetic: null == i ? void 0 : i.synthetic\n        })\n    ] : [\n        e\n    ];\n}\nfunction Me(t, i) {\n    return {\n        $exception_list: Te(t, i),\n        $exception_level: \"error\"\n    };\n}\nfunction Oe(t, i) {\n    var e, r, s, n = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, o = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, a = {\n        type: null != i && i.overrideExceptionType ? i.overrideExceptionType : null !== (s = null == i ? void 0 : i.defaultExceptionType) && void 0 !== s ? s : \"Error\",\n        value: t || (null == i ? void 0 : i.defaultExceptionMessage),\n        mechanism: {\n            handled: n,\n            synthetic: o\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var l = Ie(i.syntheticException, 1);\n        l.length && (a.stacktrace = {\n            frames: l,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            a\n        ],\n        $exception_level: \"error\"\n    };\n}\nfunction Ce(t) {\n    return T(t) && !M(t) && _.indexOf(t) >= 0;\n}\nfunction Fe(t, i) {\n    var e, r, s = null === (e = null == i ? void 0 : i.handled) || void 0 === e || e, n = null === (r = null == i ? void 0 : i.synthetic) || void 0 === r || r, o = null != i && i.overrideExceptionType ? i.overrideExceptionType : oe(t) ? t.constructor.name : \"Error\", a = \"Non-Error 'exception' captured with keys: \" + function(t, i) {\n        void 0 === i && (i = 40);\n        var e = Object.keys(t);\n        if (e.sort(), !e.length) return \"[object has no keys]\";\n        for(var r = e.length; r > 0; r--){\n            var s = e.slice(0, r).join(\", \");\n            if (!(s.length > i)) return r === e.length || s.length <= i ? s : s.slice(0, i) + \"...\";\n        }\n        return \"\";\n    }(t), l = {\n        type: o,\n        value: a,\n        mechanism: {\n            handled: s,\n            synthetic: n\n        }\n    };\n    if (null != i && i.syntheticException) {\n        var u = Ie(null == i ? void 0 : i.syntheticException, 1);\n        u.length && (l.stacktrace = {\n            frames: u,\n            type: \"raw\"\n        });\n    }\n    return {\n        $exception_list: [\n            l\n        ],\n        $exception_level: Ce(t.level) ? t.level : \"error\"\n    };\n}\nfunction Ae(t, i) {\n    var { error: e, event: r } = t, s = {\n        $exception_list: []\n    }, n = e || r;\n    if (he(n) || function(t) {\n        return ue(t, \"DOMException\");\n    }(n)) {\n        var o = n;\n        if (function(t) {\n            return \"stack\" in t;\n        }(n)) s = Me(n, i);\n        else {\n            var a = o.name || (he(o) ? \"DOMError\" : \"DOMException\"), l = o.message ? a + \": \" + o.message : a;\n            s = Oe(l, B({}, i, {\n                overrideExceptionType: he(o) ? \"DOMError\" : \"DOMException\",\n                defaultExceptionMessage: l\n            }));\n        }\n        return \"code\" in o && (s.$exception_DOMException_code = \"\" + o.code), s;\n    }\n    if (function(t) {\n        return ue(t, \"ErrorEvent\");\n    }(n) && n.error) return Me(n.error, i);\n    if (le(n)) return Me(n, i);\n    if (function(t) {\n        return ue(t, \"Object\");\n    }(n) || oe(n)) return Fe(n, i);\n    if (R(e) && T(r)) {\n        var u = \"Error\", h = r, d = r.match(Ee);\n        return d && (u = d[1], h = d[2]), Oe(h, B({}, i, {\n            overrideExceptionType: u,\n            defaultExceptionMessage: h\n        }));\n    }\n    return Oe(n, i);\n}\nfunction De(t, i, e) {\n    try {\n        if (!(i in t)) return ()=>{};\n        var r = t[i], s = e(r);\n        return E(s) && (s.prototype = s.prototype || {}, Object.defineProperties(s, {\n            __posthog_wrapped__: {\n                enumerable: !1,\n                value: !0\n            }\n        })), t[i] = s, ()=>{\n            t[i] = r;\n        };\n    } catch (t) {\n        return ()=>{};\n    }\n}\nclass je {\n    constructor(t){\n        var e;\n        this.N = t, this.et = (null == i || null == (e = i.location) ? void 0 : e.pathname) || \"\";\n    }\n    get isEnabled() {\n        return \"history_change\" === this.N.config.capture_pageview;\n    }\n    startIfEnabled() {\n        this.isEnabled && (N.info(\"History API monitoring enabled, starting...\"), this.monitorHistoryChanges());\n    }\n    stop() {\n        this.rt && this.rt(), this.rt = void 0, N.info(\"History API monitoring stopped\");\n    }\n    monitorHistoryChanges() {\n        var t, e;\n        if (i && i.history) {\n            var r = this;\n            null != (t = i.history.pushState) && t.__posthog_wrapped__ || De(i.history, \"pushState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"pushState\");\n                }), null != (e = i.history.replaceState) && e.__posthog_wrapped__ || De(i.history, \"replaceState\", (t)=>function(i, e, s) {\n                    t.call(this, i, e, s), r.st(\"replaceState\");\n                }), this.nt();\n        }\n    }\n    st(t) {\n        try {\n            var e, r = null == i || null == (e = i.location) ? void 0 : e.pathname;\n            if (!r) return;\n            r !== this.et && this.isEnabled && this.N.capture(\"$pageview\", {\n                navigation_type: t\n            }), this.et = r;\n        } catch (i) {\n            N.error(\"Error capturing \" + t + \" pageview\", i);\n        }\n    }\n    nt() {\n        if (!this.rt) {\n            var t = ()=>{\n                this.st(\"popstate\");\n            };\n            st(i, \"popstate\", t), this.rt = ()=>{\n                i && i.removeEventListener(\"popstate\", t);\n            };\n        }\n    }\n}\nfunction Le(t) {\n    var i, e;\n    return (null == (i = JSON.stringify(t, (e = [], function(t, i) {\n        if (I(i)) {\n            for(; e.length > 0 && e[e.length - 1] !== this;)e.pop();\n            return e.includes(i) ? \"[Circular]\" : (e.push(i), i);\n        }\n        return i;\n    }))) ? void 0 : i.length) || 0;\n}\nfunction Ne(t, i) {\n    if (void 0 === i && (i = 6606028.8), t.size >= i && t.data.length > 1) {\n        var e = Math.floor(t.data.length / 2), r = t.data.slice(0, e), s = t.data.slice(e);\n        return [\n            Ne({\n                size: Le(r),\n                data: r,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            }),\n            Ne({\n                size: Le(s),\n                data: s,\n                sessionId: t.sessionId,\n                windowId: t.windowId\n            })\n        ].flatMap((t)=>t);\n    }\n    return [\n        t\n    ];\n}\nvar ze = ((t)=>(t[t.DomContentLoaded = 0] = \"DomContentLoaded\", t[t.Load = 1] = \"Load\", t[t.FullSnapshot = 2] = \"FullSnapshot\", t[t.IncrementalSnapshot = 3] = \"IncrementalSnapshot\", t[t.Meta = 4] = \"Meta\", t[t.Custom = 5] = \"Custom\", t[t.Plugin = 6] = \"Plugin\", t))(ze || {}), Ue = ((t)=>(t[t.Mutation = 0] = \"Mutation\", t[t.MouseMove = 1] = \"MouseMove\", t[t.MouseInteraction = 2] = \"MouseInteraction\", t[t.Scroll = 3] = \"Scroll\", t[t.ViewportResize = 4] = \"ViewportResize\", t[t.Input = 5] = \"Input\", t[t.TouchMove = 6] = \"TouchMove\", t[t.MediaInteraction = 7] = \"MediaInteraction\", t[t.StyleSheetRule = 8] = \"StyleSheetRule\", t[t.CanvasMutation = 9] = \"CanvasMutation\", t[t.Font = 10] = \"Font\", t[t.Log = 11] = \"Log\", t[t.Drag = 12] = \"Drag\", t[t.StyleDeclaration = 13] = \"StyleDeclaration\", t[t.Selection = 14] = \"Selection\", t[t.AdoptedStyleSheet = 15] = \"AdoptedStyleSheet\", t[t.CustomElement = 16] = \"CustomElement\", t))(Ue || {}), qe = \"[SessionRecording]\", Be = \"redacted\", He = {\n    initiatorTypes: [\n        \"audio\",\n        \"beacon\",\n        \"body\",\n        \"css\",\n        \"early-hint\",\n        \"embed\",\n        \"fetch\",\n        \"frame\",\n        \"iframe\",\n        \"icon\",\n        \"image\",\n        \"img\",\n        \"input\",\n        \"link\",\n        \"navigation\",\n        \"object\",\n        \"ping\",\n        \"script\",\n        \"track\",\n        \"video\",\n        \"xmlhttprequest\"\n    ],\n    maskRequestFn: (t)=>t,\n    recordHeaders: !1,\n    recordBody: !1,\n    recordInitialRequests: !1,\n    recordPerformance: !1,\n    performanceEntryTypeToObserve: [\n        \"first-input\",\n        \"navigation\",\n        \"paint\",\n        \"resource\"\n    ],\n    payloadSizeLimitBytes: 1e6,\n    payloadHostDenyList: [\n        \".lr-ingest.io\",\n        \".ingest.sentry.io\",\n        \".clarity.ms\",\n        \"analytics.google.com\"\n    ]\n}, We = [\n    \"authorization\",\n    \"x-forwarded-for\",\n    \"authorization\",\n    \"cookie\",\n    \"set-cookie\",\n    \"x-api-key\",\n    \"x-real-ip\",\n    \"remote-addr\",\n    \"forwarded\",\n    \"proxy-authorization\",\n    \"x-csrf-token\",\n    \"x-csrftoken\",\n    \"x-xsrf-token\"\n], Ge = [\n    \"password\",\n    \"secret\",\n    \"passwd\",\n    \"api_key\",\n    \"apikey\",\n    \"auth\",\n    \"credentials\",\n    \"mysql_pwd\",\n    \"privatekey\",\n    \"private_key\",\n    \"token\"\n], Je = [\n    \"/s/\",\n    \"/e/\",\n    \"/i/\"\n];\nfunction Ve(t, i, e, r) {\n    if (C(t)) return t;\n    var s = (null == i ? void 0 : i[\"content-length\"]) || function(t) {\n        return new Blob([\n            t\n        ]).size;\n    }(t);\n    return T(s) && (s = parseInt(s)), s > e ? qe + \" \" + r + \" body too large to record (\" + s + \" bytes)\" : t;\n}\nfunction Ke(t, i) {\n    if (C(t)) return t;\n    var e = t;\n    return vi(e, !1) || (e = qe + \" \" + i + \" body \" + Be), J(Ge, (t)=>{\n        var r, s;\n        null != (r = e) && r.length && -1 !== (null == (s = e) ? void 0 : s.indexOf(t)) && (e = qe + \" \" + i + \" body \" + Be + \" as might contain: \" + t);\n    }), e;\n}\nvar Ye = (t, i)=>{\n    var e, r, s, n = {\n        payloadSizeLimitBytes: He.payloadSizeLimitBytes,\n        performanceEntryTypeToObserve: [\n            ...He.performanceEntryTypeToObserve\n        ],\n        payloadHostDenyList: [\n            ...i.payloadHostDenyList || [],\n            ...He.payloadHostDenyList\n        ]\n    }, o = !1 !== t.session_recording.recordHeaders && i.recordHeaders, a = !1 !== t.session_recording.recordBody && i.recordBody, l = !1 !== t.capture_performance && i.recordPerformance, u = (e = n, s = Math.min(1e6, null !== (r = e.payloadSizeLimitBytes) && void 0 !== r ? r : 1e6), (t)=>(null != t && t.requestBody && (t.requestBody = Ve(t.requestBody, t.requestHeaders, s, \"Request\")), null != t && t.responseBody && (t.responseBody = Ve(t.responseBody, t.responseHeaders, s, \"Response\")), t)), h = (i)=>{\n        return u(((t, i)=>{\n            var e, r = wi(t.name), s = 0 === i.indexOf(\"http\") ? null == (e = wi(i)) ? void 0 : e.pathname : i;\n            \"/\" === s && (s = \"\");\n            var n = null == r ? void 0 : r.pathname.replace(s || \"\", \"\");\n            if (!(r && n && Je.some((t)=>0 === n.indexOf(t)))) return t;\n        })((r = (e = i).requestHeaders, C(r) || J(Object.keys(null != r ? r : {}), (t)=>{\n            We.includes(t.toLowerCase()) && (r[t] = Be);\n        }), e), t.api_host));\n        var e, r;\n    }, d = E(t.session_recording.maskNetworkRequestFn);\n    return d && E(t.session_recording.maskCapturedNetworkRequestFn) && N.warn(\"Both `maskNetworkRequestFn` and `maskCapturedNetworkRequestFn` are defined. `maskNetworkRequestFn` will be ignored.\"), d && (t.session_recording.maskCapturedNetworkRequestFn = (i)=>{\n        var e = t.session_recording.maskNetworkRequestFn({\n            url: i.name\n        });\n        return B({}, i, {\n            name: null == e ? void 0 : e.url\n        });\n    }), n.maskRequestFn = E(t.session_recording.maskCapturedNetworkRequestFn) ? (i)=>{\n        var e, r = h(i);\n        return r && null !== (e = null == t.session_recording.maskCapturedNetworkRequestFn ? void 0 : t.session_recording.maskCapturedNetworkRequestFn(r)) && void 0 !== e ? e : void 0;\n    } : (t)=>(function(t) {\n            if (!R(t)) return t.requestBody = Ke(t.requestBody, \"Request\"), t.responseBody = Ke(t.responseBody, \"Response\"), t;\n        })(h(t)), B({}, He, n, {\n        recordHeaders: o,\n        recordBody: a,\n        recordPerformance: l,\n        recordInitialRequests: l\n    });\n};\nfunction Xe(t, i, e, r, s) {\n    return i > e && (N.warn(\"min cannot be greater than max.\"), i = e), F(t) ? t > e ? (r && N.warn(r + \" cannot be  greater than max: \" + e + \". Using max value instead.\"), e) : t < i ? (r && N.warn(r + \" cannot be less than min: \" + i + \". Using min value instead.\"), i) : t : (r && N.warn(r + \" must be a number. using max or fallback. max: \" + e + \", fallback: \" + s), Xe(s || e, i, e, r));\n}\nclass Qe {\n    constructor(t, i){\n        var e, r;\n        void 0 === i && (i = {}), this.ot = 100, this.lt = 10, this.ut = {}, this.ht = {}, this.dt = ()=>{\n            Object.keys(this.ut).forEach((t)=>{\n                this.ut[t] = this.ut[t] + this.lt, this.ut[t] >= this.ot && delete this.ut[t];\n            });\n        }, this.vt = (t)=>{\n            var i = this._rrweb.mirror.getNode(t);\n            if (\"svg\" !== (null == i ? void 0 : i.nodeName) && i instanceof Element) {\n                var e = i.closest(\"svg\");\n                if (e) return [\n                    this._rrweb.mirror.getId(e),\n                    e\n                ];\n            }\n            return [\n                t,\n                i\n            ];\n        }, this.ct = (t)=>{\n            var i, e, r, s, n, o, a, l;\n            return (null !== (i = null == (e = t.removes) ? void 0 : e.length) && void 0 !== i ? i : 0) + (null !== (r = null == (s = t.attributes) ? void 0 : s.length) && void 0 !== r ? r : 0) + (null !== (n = null == (o = t.texts) ? void 0 : o.length) && void 0 !== n ? n : 0) + (null !== (a = null == (l = t.adds) ? void 0 : l.length) && void 0 !== a ? a : 0);\n        }, this.throttleMutations = (t)=>{\n            if (3 !== t.type || 0 !== t.data.source) return t;\n            var i = t.data, e = this.ct(i);\n            i.attributes && (i.attributes = i.attributes.filter((t)=>{\n                var i, e, r, [s, n] = this.vt(t.id);\n                if (0 === this.ut[s]) return !1;\n                (this.ut[s] = null !== (i = this.ut[s]) && void 0 !== i ? i : this.ot, this.ut[s] = Math.max(this.ut[s] - 1, 0), 0 === this.ut[s]) && (this.ht[s] || (this.ht[s] = !0, null == (e = (r = this.ft).onBlockedNode) || e.call(r, s, n)));\n                return t;\n            }));\n            var r = this.ct(i);\n            return 0 !== r || e === r ? t : void 0;\n        }, this._rrweb = t, this.ft = i, this.lt = Xe(null !== (e = this.ft.refillRate) && void 0 !== e ? e : this.lt, 0, 100, \"mutation throttling refill rate\"), this.ot = Xe(null !== (r = this.ft.bucketSize) && void 0 !== r ? r : this.ot, 0, 100, \"mutation throttling bucket size\"), setInterval(()=>{\n            this.dt();\n        }, 1e3);\n    }\n}\nvar Ze = Uint8Array, tr = Uint16Array, ir = Uint32Array, er = new Ze([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    0,\n    0,\n    0\n]), rr = new Ze([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    0,\n    0\n]), sr = new Ze([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]), nr = function(t, i) {\n    for(var e = new tr(31), r = 0; r < 31; ++r)e[r] = i += 1 << t[r - 1];\n    var s = new ir(e[30]);\n    for(r = 1; r < 30; ++r)for(var n = e[r]; n < e[r + 1]; ++n)s[n] = n - e[r] << 5 | r;\n    return [\n        e,\n        s\n    ];\n}, or = nr(er, 2), ar = or[0], lr = or[1];\nar[28] = 258, lr[258] = 28;\nfor(var ur = nr(rr, 0)[1], hr = new tr(32768), dr = 0; dr < 32768; ++dr){\n    var vr = (43690 & dr) >>> 1 | (21845 & dr) << 1;\n    vr = (61680 & (vr = (52428 & vr) >>> 2 | (13107 & vr) << 2)) >>> 4 | (3855 & vr) << 4, hr[dr] = ((65280 & vr) >>> 8 | (255 & vr) << 8) >>> 1;\n}\nvar cr = function(t, i, e) {\n    for(var r = t.length, s = 0, n = new tr(i); s < r; ++s)++n[t[s] - 1];\n    var o, a = new tr(i);\n    for(s = 0; s < i; ++s)a[s] = a[s - 1] + n[s - 1] << 1;\n    if (e) {\n        o = new tr(1 << i);\n        var l = 15 - i;\n        for(s = 0; s < r; ++s)if (t[s]) for(var u = s << 4 | t[s], h = i - t[s], d = a[t[s] - 1]++ << h, v = d | (1 << h) - 1; d <= v; ++d)o[hr[d] >>> l] = u;\n    } else for(o = new tr(r), s = 0; s < r; ++s)o[s] = hr[a[t[s] - 1]++] >>> 15 - t[s];\n    return o;\n}, fr = new Ze(288);\nfor(dr = 0; dr < 144; ++dr)fr[dr] = 8;\nfor(dr = 144; dr < 256; ++dr)fr[dr] = 9;\nfor(dr = 256; dr < 280; ++dr)fr[dr] = 7;\nfor(dr = 280; dr < 288; ++dr)fr[dr] = 8;\nvar pr = new Ze(32);\nfor(dr = 0; dr < 32; ++dr)pr[dr] = 5;\nvar gr = cr(fr, 9, 0), _r = cr(pr, 5, 0), mr = function(t) {\n    return (t / 8 >> 0) + (7 & t && 1);\n}, br = function(t, i, e) {\n    (null == e || e > t.length) && (e = t.length);\n    var r = new (t instanceof tr ? tr : t instanceof ir ? ir : Ze)(e - i);\n    return r.set(t.subarray(i, e)), r;\n}, wr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8;\n}, yr = function(t, i, e) {\n    e <<= 7 & i;\n    var r = i / 8 >> 0;\n    t[r] |= e, t[r + 1] |= e >>> 8, t[r + 2] |= e >>> 16;\n}, Sr = function(t, i) {\n    for(var e = [], r = 0; r < t.length; ++r)t[r] && e.push({\n        s: r,\n        f: t[r]\n    });\n    var s = e.length, n = e.slice();\n    if (!s) return [\n        new Ze(0),\n        0\n    ];\n    if (1 == s) {\n        var o = new Ze(e[0].s + 1);\n        return o[e[0].s] = 1, [\n            o,\n            1\n        ];\n    }\n    e.sort(function(t, i) {\n        return t.f - i.f;\n    }), e.push({\n        s: -1,\n        f: 25001\n    });\n    var a = e[0], l = e[1], u = 0, h = 1, d = 2;\n    for(e[0] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    }; h != s - 1;)a = e[e[u].f < e[d].f ? u++ : d++], l = e[u != h && e[u].f < e[d].f ? u++ : d++], e[h++] = {\n        s: -1,\n        f: a.f + l.f,\n        l: a,\n        r: l\n    };\n    var v = n[0].s;\n    for(r = 1; r < s; ++r)n[r].s > v && (v = n[r].s);\n    var c = new tr(v + 1), f = $r(e[h - 1], c, 0);\n    if (f > i) {\n        r = 0;\n        var p = 0, g = f - i, _ = 1 << g;\n        for(n.sort(function(t, i) {\n            return c[i.s] - c[t.s] || t.f - i.f;\n        }); r < s; ++r){\n            var m = n[r].s;\n            if (!(c[m] > i)) break;\n            p += _ - (1 << f - c[m]), c[m] = i;\n        }\n        for(p >>>= g; p > 0;){\n            var b = n[r].s;\n            c[b] < i ? p -= 1 << i - c[b]++ - 1 : ++r;\n        }\n        for(; r >= 0 && p; --r){\n            var w = n[r].s;\n            c[w] == i && (--c[w], ++p);\n        }\n        f = i;\n    }\n    return [\n        new Ze(c),\n        f\n    ];\n}, $r = function(t, i, e) {\n    return -1 == t.s ? Math.max($r(t.l, i, e + 1), $r(t.r, i, e + 1)) : i[t.s] = e;\n}, kr = function(t) {\n    for(var i = t.length; i && !t[--i];);\n    for(var e = new tr(++i), r = 0, s = t[0], n = 1, o = function(t) {\n        e[r++] = t;\n    }, a = 1; a <= i; ++a)if (t[a] == s && a != i) ++n;\n    else {\n        if (!s && n > 2) {\n            for(; n > 138; n -= 138)o(32754);\n            n > 2 && (o(n > 10 ? n - 11 << 5 | 28690 : n - 3 << 5 | 12305), n = 0);\n        } else if (n > 3) {\n            for(o(s), --n; n > 6; n -= 6)o(8304);\n            n > 2 && (o(n - 3 << 5 | 8208), n = 0);\n        }\n        for(; n--;)o(s);\n        n = 1, s = t[a];\n    }\n    return [\n        e.subarray(0, r),\n        i\n    ];\n}, xr = function(t, i) {\n    for(var e = 0, r = 0; r < i.length; ++r)e += t[r] * i[r];\n    return e;\n}, Er = function(t, i, e) {\n    var r = e.length, s = mr(i + 2);\n    t[s] = 255 & r, t[s + 1] = r >>> 8, t[s + 2] = 255 ^ t[s], t[s + 3] = 255 ^ t[s + 1];\n    for(var n = 0; n < r; ++n)t[s + n + 4] = e[n];\n    return 8 * (s + 4 + r);\n}, Ir = function(t, i, e, r, s, n, o, a, l, u, h) {\n    wr(i, h++, e), ++s[256];\n    for(var d = Sr(s, 15), v = d[0], c = d[1], f = Sr(n, 15), p = f[0], g = f[1], _ = kr(v), m = _[0], b = _[1], w = kr(p), y = w[0], S = w[1], $ = new tr(19), k = 0; k < m.length; ++k)$[31 & m[k]]++;\n    for(k = 0; k < y.length; ++k)$[31 & y[k]]++;\n    for(var x = Sr($, 7), E = x[0], I = x[1], P = 19; P > 4 && !E[sr[P - 1]]; --P);\n    var R, T, M, O, C = u + 5 << 3, F = xr(s, fr) + xr(n, pr) + o, A = xr(s, v) + xr(n, p) + o + 14 + 3 * P + xr($, E) + (2 * $[16] + 3 * $[17] + 7 * $[18]);\n    if (C <= F && C <= A) return Er(i, h, t.subarray(l, l + u));\n    if (wr(i, h, 1 + (A < F)), h += 2, A < F) {\n        R = cr(v, c, 0), T = v, M = cr(p, g, 0), O = p;\n        var D = cr(E, I, 0);\n        wr(i, h, b - 257), wr(i, h + 5, S - 1), wr(i, h + 10, P - 4), h += 14;\n        for(k = 0; k < P; ++k)wr(i, h + 3 * k, E[sr[k]]);\n        h += 3 * P;\n        for(var j = [\n            m,\n            y\n        ], L = 0; L < 2; ++L){\n            var N = j[L];\n            for(k = 0; k < N.length; ++k){\n                var z = 31 & N[k];\n                wr(i, h, D[z]), h += E[z], z > 15 && (wr(i, h, N[k] >>> 5 & 127), h += N[k] >>> 12);\n            }\n        }\n    } else R = gr, T = fr, M = _r, O = pr;\n    for(k = 0; k < a; ++k)if (r[k] > 255) {\n        z = r[k] >>> 18 & 31;\n        yr(i, h, R[z + 257]), h += T[z + 257], z > 7 && (wr(i, h, r[k] >>> 23 & 31), h += er[z]);\n        var U = 31 & r[k];\n        yr(i, h, M[U]), h += O[U], U > 3 && (yr(i, h, r[k] >>> 5 & 8191), h += rr[U]);\n    } else yr(i, h, R[r[k]]), h += T[r[k]];\n    return yr(i, h, R[256]), h + T[256];\n}, Pr = new ir([\n    65540,\n    131080,\n    131088,\n    131104,\n    262176,\n    1048704,\n    1048832,\n    2114560,\n    2117632\n]), Rr = function() {\n    for(var t = new ir(256), i = 0; i < 256; ++i){\n        for(var e = i, r = 9; --r;)e = (1 & e && 3988292384) ^ e >>> 1;\n        t[i] = e;\n    }\n    return t;\n}(), Tr = function() {\n    var t = 4294967295;\n    return {\n        p: function(i) {\n            for(var e = t, r = 0; r < i.length; ++r)e = Rr[255 & e ^ i[r]] ^ e >>> 8;\n            t = e;\n        },\n        d: function() {\n            return 4294967295 ^ t;\n        }\n    };\n}, Mr = function(t, i, e, r, s) {\n    return function(t, i, e, r, s, n) {\n        var o = t.length, a = new Ze(r + o + 5 * (1 + Math.floor(o / 7e3)) + s), l = a.subarray(r, a.length - s), u = 0;\n        if (!i || o < 8) for(var h = 0; h <= o; h += 65535){\n            var d = h + 65535;\n            d < o ? u = Er(l, u, t.subarray(h, d)) : (l[h] = n, u = Er(l, u, t.subarray(h, o)));\n        }\n        else {\n            for(var v = Pr[i - 1], c = v >>> 13, f = 8191 & v, p = (1 << e) - 1, g = new tr(32768), _ = new tr(p + 1), m = Math.ceil(e / 3), b = 2 * m, w = function(i) {\n                return (t[i] ^ t[i + 1] << m ^ t[i + 2] << b) & p;\n            }, y = new ir(25e3), S = new tr(288), $ = new tr(32), k = 0, x = 0, E = (h = 0, 0), I = 0, P = 0; h < o; ++h){\n                var R = w(h), T = 32767 & h, M = _[R];\n                if (g[T] = M, _[R] = T, I <= h) {\n                    var O = o - h;\n                    if ((k > 7e3 || E > 24576) && O > 423) {\n                        u = Ir(t, l, 0, y, S, $, x, E, P, h - P, u), E = k = x = 0, P = h;\n                        for(var C = 0; C < 286; ++C)S[C] = 0;\n                        for(C = 0; C < 30; ++C)$[C] = 0;\n                    }\n                    var F = 2, A = 0, D = f, j = T - M & 32767;\n                    if (O > 2 && R == w(h - j)) for(var L = Math.min(c, O) - 1, N = Math.min(32767, h), z = Math.min(258, O); j <= N && --D && T != M;){\n                        if (t[h + F] == t[h + F - j]) {\n                            for(var U = 0; U < z && t[h + U] == t[h + U - j]; ++U);\n                            if (U > F) {\n                                if (F = U, A = j, U > L) break;\n                                var q = Math.min(j, U - 2), B = 0;\n                                for(C = 0; C < q; ++C){\n                                    var H = h - j + C + 32768 & 32767, W = H - g[H] + 32768 & 32767;\n                                    W > B && (B = W, M = H);\n                                }\n                            }\n                        }\n                        j += (T = M) - (M = g[T]) + 32768 & 32767;\n                    }\n                    if (A) {\n                        y[E++] = 268435456 | lr[F] << 18 | ur[A];\n                        var G = 31 & lr[F], J = 31 & ur[A];\n                        x += er[G] + rr[J], ++S[257 + G], ++$[J], I = h + F, ++k;\n                    } else y[E++] = t[h], ++S[t[h]];\n                }\n            }\n            u = Ir(t, l, n, y, S, $, x, E, P, h - P, u);\n        }\n        return br(a, 0, r + mr(u) + s);\n    }(t, null == i.level ? 6 : i.level, null == i.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t.length)))) : 12 + i.mem, e, r, !s);\n}, Or = function(t, i, e) {\n    for(; e; ++i)t[i] = e, e >>>= 8;\n}, Cr = function(t, i) {\n    var e = i.filename;\n    if (t[0] = 31, t[1] = 139, t[2] = 8, t[8] = i.level < 2 ? 4 : 9 == i.level ? 2 : 0, t[9] = 3, 0 != i.mtime && Or(t, 4, Math.floor(new Date(i.mtime || Date.now()) / 1e3)), e) {\n        t[3] = 8;\n        for(var r = 0; r <= e.length; ++r)t[r + 10] = e.charCodeAt(r);\n    }\n}, Fr = function(t) {\n    return 10 + (t.filename && t.filename.length + 1 || 0);\n};\nfunction Ar(t, i) {\n    void 0 === i && (i = {});\n    var e = Tr(), r = t.length;\n    e.p(t);\n    var s = Mr(t, i, Fr(i), 8), n = s.length;\n    return Cr(s, i), Or(s, n - 8, e.d()), Or(s, n - 4, r), s;\n}\nfunction Dr(t, i) {\n    var e = t.length;\n    if (\"undefined\" != typeof TextEncoder) return (new TextEncoder).encode(t);\n    for(var r = new Ze(t.length + (t.length >>> 1)), s = 0, n = function(t) {\n        r[s++] = t;\n    }, o = 0; o < e; ++o){\n        if (s + 5 > r.length) {\n            var a = new Ze(s + 8 + (e - o << 1));\n            a.set(r), r = a;\n        }\n        var l = t.charCodeAt(o);\n        l < 128 || i ? n(l) : l < 2048 ? (n(192 | l >>> 6), n(128 | 63 & l)) : l > 55295 && l < 57344 ? (n(240 | (l = 65536 + (1047552 & l) | 1023 & t.charCodeAt(++o)) >>> 18), n(128 | l >>> 12 & 63), n(128 | l >>> 6 & 63), n(128 | 63 & l)) : (n(224 | l >>> 12), n(128 | l >>> 6 & 63), n(128 | 63 & l));\n    }\n    return br(r, 0, s);\n}\nfunction jr(t, i) {\n    return function(t) {\n        for(var i = 0, e = 0; e < t.length; e++)i = (i << 5) - i + t.charCodeAt(e), i |= 0;\n        return Math.abs(i);\n    }(t) % 100 < Xe(100 * i, 0, 100);\n}\nvar Lr = \"[SessionRecording]\", Nr = z(Lr);\nfunction zr() {\n    var t, i;\n    return null == c || null == (t = c.__PosthogExtensions__) || null == (i = t.rrweb) ? void 0 : i.record;\n}\nvar Ur = 3e5, qr = [\n    Ue.MouseMove,\n    Ue.MouseInteraction,\n    Ue.Scroll,\n    Ue.ViewportResize,\n    Ue.Input,\n    Ue.TouchMove,\n    Ue.MediaInteraction,\n    Ue.Drag\n], Br = (t)=>({\n        rrwebMethod: t,\n        enqueuedAt: Date.now(),\n        attempt: 1\n    });\nfunction Hr(t) {\n    return function(t, i) {\n        for(var e = \"\", r = 0; r < t.length;){\n            var s = t[r++];\n            s < 128 || i ? e += String.fromCharCode(s) : s < 224 ? e += String.fromCharCode((31 & s) << 6 | 63 & t[r++]) : s < 240 ? e += String.fromCharCode((15 & s) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) : (s = ((15 & s) << 18 | (63 & t[r++]) << 12 | (63 & t[r++]) << 6 | 63 & t[r++]) - 65536, e += String.fromCharCode(55296 | s >> 10, 56320 | 1023 & s));\n        }\n        return e;\n    }(Ar(Dr(JSON.stringify(t))), !0);\n}\nfunction Wr(t) {\n    return t.type === ze.Custom && \"sessionIdle\" === t.data.tag;\n}\nfunction Gr(t, i) {\n    return i.some((i)=>\"regex\" === i.matching && new RegExp(i.url).test(t));\n}\nclass Jr {\n    get gt() {\n        return this.N.config.session_recording.session_idle_threshold_ms || 3e5;\n    }\n    get started() {\n        return this._t;\n    }\n    get bt() {\n        if (!this.N.sessionManager) throw new Error(Lr + \" must be started with a valid sessionManager.\");\n        return this.N.sessionManager;\n    }\n    get wt() {\n        var t, i;\n        return \"trigger_pending\" === this.yt ? 6e4 : null !== (t = null == (i = this.N.config.session_recording) ? void 0 : i.full_snapshot_interval_millis) && void 0 !== t ? t : Ur;\n    }\n    get St() {\n        var t = this.N.get_property($t);\n        return A(t) ? t : null;\n    }\n    get $t() {\n        var t, i, e = null == (t = this.M) ? void 0 : t.data[(null == (i = this.M) ? void 0 : i.data.length) - 1], { sessionStartTimestamp: r } = this.bt.checkAndGetSessionAndWindowId(!0);\n        return e ? e.timestamp - r : null;\n    }\n    get kt() {\n        var t = !!this.N.get_property(ft), e = !this.N.config.disable_session_recording;\n        return i && t && e;\n    }\n    get xt() {\n        var t = !!this.N.get_property(pt), i = this.N.config.enable_recording_console_log;\n        return null != i ? i : t;\n    }\n    get Et() {\n        var t, i, e, r, s, n, o = this.N.config.session_recording.captureCanvas, a = this.N.get_property(mt), l = null !== (t = null !== (i = null == o ? void 0 : o.recordCanvas) && void 0 !== i ? i : null == a ? void 0 : a.enabled) && void 0 !== t && t, u = null !== (e = null !== (r = null == o ? void 0 : o.canvasFps) && void 0 !== r ? r : null == a ? void 0 : a.fps) && void 0 !== e ? e : 4, h = null !== (s = null !== (n = null == o ? void 0 : o.canvasQuality) && void 0 !== n ? n : null == a ? void 0 : a.quality) && void 0 !== s ? s : .4;\n        if (\"string\" == typeof h) {\n            var d = parseFloat(h);\n            h = isNaN(d) ? .4 : d;\n        }\n        return {\n            enabled: l,\n            fps: Xe(u, 0, 12, \"canvas recording fps\", 4),\n            quality: Xe(h, 0, 1, \"canvas recording quality\", .4)\n        };\n    }\n    get It() {\n        var t, i, e = this.N.get_property(gt), r = {\n            recordHeaders: null == (t = this.N.config.session_recording) ? void 0 : t.recordHeaders,\n            recordBody: null == (i = this.N.config.session_recording) ? void 0 : i.recordBody\n        }, s = (null == r ? void 0 : r.recordHeaders) || (null == e ? void 0 : e.recordHeaders), n = (null == r ? void 0 : r.recordBody) || (null == e ? void 0 : e.recordBody), o = I(this.N.config.capture_performance) ? this.N.config.capture_performance.network_timing : this.N.config.capture_performance, a = !!(A(o) ? o : null == e ? void 0 : e.capturePerformance);\n        return s || n || a ? {\n            recordHeaders: s,\n            recordBody: n,\n            recordPerformance: a\n        } : void 0;\n    }\n    get Pt() {\n        var t, i, e, r, s, n, o = this.N.get_property(_t), a = {\n            maskAllInputs: null == (t = this.N.config.session_recording) ? void 0 : t.maskAllInputs,\n            maskTextSelector: null == (i = this.N.config.session_recording) ? void 0 : i.maskTextSelector,\n            blockSelector: null == (e = this.N.config.session_recording) ? void 0 : e.blockSelector\n        }, l = null !== (r = null == a ? void 0 : a.maskAllInputs) && void 0 !== r ? r : null == o ? void 0 : o.maskAllInputs, u = null !== (s = null == a ? void 0 : a.maskTextSelector) && void 0 !== s ? s : null == o ? void 0 : o.maskTextSelector, h = null !== (n = null == a ? void 0 : a.blockSelector) && void 0 !== n ? n : null == o ? void 0 : o.blockSelector;\n        return R(l) && R(u) && R(h) ? void 0 : {\n            maskAllInputs: null == l || l,\n            maskTextSelector: u,\n            blockSelector: h\n        };\n    }\n    get Rt() {\n        var t = this.N.get_property(bt);\n        return F(t) ? t : null;\n    }\n    get Tt() {\n        var t = this.N.get_property(wt);\n        return F(t) ? t : null;\n    }\n    get status() {\n        return this.Mt ? this.kt ? !1 === this.St ? \"disabled\" : this.Ot ? \"paused\" : C(this.Ct) || this.Ft ? \"trigger_pending\" === this.yt ? \"buffering\" : A(this.St) ? this.St ? \"sampled\" : \"disabled\" : \"active\" : \"buffering\" : \"disabled\" : \"buffering\";\n    }\n    get At() {\n        var t;\n        return 0 === this.Dt.length ? \"trigger_disabled\" : (null == (t = this.N) ? void 0 : t.get_property(kt)) === this.jt ? \"trigger_activated\" : \"trigger_pending\";\n    }\n    get Lt() {\n        var t;\n        return 0 === this.Nt.length ? \"trigger_disabled\" : (null == (t = this.N) ? void 0 : t.get_property(xt)) === this.jt ? \"trigger_activated\" : \"trigger_pending\";\n    }\n    get yt() {\n        var t = \"trigger_activated\" === this.Lt || \"trigger_activated\" === this.At, i = \"trigger_pending\" === this.Lt || \"trigger_pending\" === this.At;\n        return t ? \"trigger_activated\" : i ? \"trigger_pending\" : \"trigger_disabled\";\n    }\n    constructor(t){\n        if (this.zt = [], this.Ut = \"unknown\", this.Ft = !1, this.qt = Date.now(), this.Ct = null, this.Bt = void 0, this.Ht = void 0, this.Wt = void 0, this.Gt = void 0, this.Dt = [], this.Jt = [], this.Ot = !1, this.Nt = [], this.Vt = void 0, this._forceAllowLocalhostNetworkCapture = !1, this.Kt = ()=>{\n            this.Yt();\n        }, this.Xt = ()=>{\n            this.Qt(\"browser offline\", {});\n        }, this.Zt = ()=>{\n            this.Qt(\"browser online\", {});\n        }, this.ti = ()=>{\n            if (null != a && a.visibilityState) {\n                var t = \"window \" + a.visibilityState;\n                this.Qt(t, {});\n            }\n        }, this.N = t, this._t = !1, this.ii = \"/s/\", this.ei = void 0, this.Mt = !1, !this.N.sessionManager) throw Nr.error(\"started without valid sessionManager\"), new Error(Lr + \" started without valid sessionManager. This is a bug.\");\n        if (this.N.config.__preview_experimental_cookieless_mode) throw new Error(Lr + \" cannot be used with __preview_experimental_cookieless_mode.\");\n        var { sessionId: i, windowId: e } = this.bt.checkAndGetSessionAndWindowId();\n        this.jt = i, this.ri = e, this.M = this.si(), this.gt >= this.bt.sessionTimeoutMs && Nr.warn(\"session_idle_threshold_ms (\" + this.gt + \") is greater than the session timeout (\" + this.bt.sessionTimeoutMs + \"). Session will never be detected as idle\");\n    }\n    startIfEnabledOrStop(t) {\n        this.kt ? (this.ni(t), st(i, \"beforeunload\", this.Kt), st(i, \"offline\", this.Xt), st(i, \"online\", this.Zt), st(i, \"visibilitychange\", this.ti), this.oi(), this.ai(), C(this.Bt) && (this.Bt = this.N.on(\"eventCaptured\", (t)=>{\n            try {\n                if (\"$pageview\" === t.event) {\n                    var i = null != t && t.properties.$current_url ? this.li(null == t ? void 0 : t.properties.$current_url) : \"\";\n                    if (!i) return;\n                    this.Qt(\"$pageview\", {\n                        href: i\n                    });\n                }\n            } catch (t) {\n                Nr.error(\"Could not add $pageview to rrweb session\", t);\n            }\n        })), this.Ht || (this.Ht = this.bt.onSessionId((t, i, e)=>{\n            var r, s, n, o;\n            e && (this.Qt(\"$session_id_change\", {\n                sessionId: t,\n                windowId: i,\n                changeReason: e\n            }), null == (r = this.N) || null == (s = r.persistence) || s.unregister(xt), null == (n = this.N) || null == (o = n.persistence) || o.unregister(kt));\n        }))) : this.stopRecording();\n    }\n    stopRecording() {\n        var t, e, r, s;\n        this._t && this.ei && (this.ei(), this.ei = void 0, this._t = !1, null == i || i.removeEventListener(\"beforeunload\", this.Kt), null == i || i.removeEventListener(\"offline\", this.Xt), null == i || i.removeEventListener(\"online\", this.Zt), null == i || i.removeEventListener(\"visibilitychange\", this.ti), this.si(), clearInterval(this.ui), null == (t = this.Bt) || t.call(this), this.Bt = void 0, null == (e = this.Vt) || e.call(this), this.Vt = void 0, null == (r = this.Ht) || r.call(this), this.Ht = void 0, null == (s = this.Gt) || s.call(this), this.Gt = void 0, Nr.info(\"stopped\"));\n    }\n    hi() {\n        var t;\n        null == (t = this.N.persistence) || t.unregister($t);\n    }\n    di(t) {\n        var i, e = this.jt !== t, r = this.Rt;\n        if (F(r)) {\n            var s = this.St, n = e || !A(s), o = n ? jr(t, r) : s;\n            n && (o ? this.vi(\"sampled\") : Nr.warn(\"Sample rate (\" + r + \") has determined that this sessionId (\" + t + \") will not be sent to the server.\"), this.Qt(\"samplingDecisionMade\", {\n                sampleRate: r,\n                isSampled: o\n            })), null == (i = this.N.persistence) || i.register({\n                [$t]: o\n            });\n        } else this.hi();\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s, n, o;\n        (this.Qt(\"$remote_config_received\", t), this.ci(t), this.Ct = (null == (i = t.sessionRecording) ? void 0 : i.linkedFlag) || null, null != (e = t.sessionRecording) && e.endpoint) && (this.ii = null == (o = t.sessionRecording) ? void 0 : o.endpoint);\n        if (this.oi(), !C(this.Ct) && !this.Ft) {\n            var a = T(this.Ct) ? this.Ct : this.Ct.flag, l = T(this.Ct) ? null : this.Ct.variant;\n            this.N.onFeatureFlags((t, i)=>{\n                var e = I(i) && a in i, r = l ? i[a] === l : e;\n                r && this.vi(\"linked_flag_matched\", {\n                    linkedFlag: a,\n                    linkedVariant: l\n                }), this.Ft = r;\n            });\n        }\n        null != (r = t.sessionRecording) && r.urlTriggers && (this.Dt = t.sessionRecording.urlTriggers), null != (s = t.sessionRecording) && s.urlBlocklist && (this.Jt = t.sessionRecording.urlBlocklist), null != (n = t.sessionRecording) && n.eventTriggers && (this.Nt = t.sessionRecording.eventTriggers), this.Mt = !0, this.startIfEnabledOrStop();\n    }\n    oi() {\n        F(this.Rt) && C(this.Gt) && (this.Gt = this.bt.onSessionId((t)=>{\n            this.di(t);\n        }));\n    }\n    ci(t) {\n        if (this.N.persistence) {\n            var i, e = this.N.persistence, r = ()=>{\n                var i, r, s, n, o, a, l, u, h, d = null == (i = t.sessionRecording) ? void 0 : i.sampleRate, v = C(d) ? null : parseFloat(d);\n                C(v) && this.hi();\n                var c = null == (r = t.sessionRecording) ? void 0 : r.minimumDurationMilliseconds;\n                e.register({\n                    [ft]: !!t.sessionRecording,\n                    [pt]: null == (s = t.sessionRecording) ? void 0 : s.consoleLogRecordingEnabled,\n                    [gt]: B({\n                        capturePerformance: t.capturePerformance\n                    }, null == (n = t.sessionRecording) ? void 0 : n.networkPayloadCapture),\n                    [_t]: null == (o = t.sessionRecording) ? void 0 : o.masking,\n                    [mt]: {\n                        enabled: null == (a = t.sessionRecording) ? void 0 : a.recordCanvas,\n                        fps: null == (l = t.sessionRecording) ? void 0 : l.canvasFps,\n                        quality: null == (u = t.sessionRecording) ? void 0 : u.canvasQuality\n                    },\n                    [bt]: v,\n                    [wt]: R(c) ? null : c,\n                    [yt]: null == (h = t.sessionRecording) ? void 0 : h.scriptConfig\n                });\n            };\n            r(), null == (i = this.Wt) || i.call(this), this.Wt = this.bt.onSessionId(r);\n        }\n    }\n    log(t, i) {\n        var e;\n        void 0 === i && (i = \"log\"), null == (e = this.N.sessionRecording) || e.onRRwebEmit({\n            type: 6,\n            data: {\n                plugin: \"rrweb/console@1\",\n                payload: {\n                    level: i,\n                    trace: [],\n                    payload: [\n                        JSON.stringify(t)\n                    ]\n                }\n            },\n            timestamp: Date.now()\n        });\n    }\n    ni(t) {\n        if (!R(Object.assign) && !R(Array.from) && !(this._t || this.N.config.disable_session_recording || this.N.consent.isOptedOut())) {\n            var i;\n            if (this._t = !0, this.bt.checkAndGetSessionAndWindowId(), zr()) this.fi();\n            else null == (i = c.__PosthogExtensions__) || null == i.loadExternalDependency || i.loadExternalDependency(this.N, this.pi, (t)=>{\n                if (t) return Nr.error(\"could not load recorder\", t);\n                this.fi();\n            });\n            Nr.info(\"starting\"), \"active\" === this.status && this.vi(t || \"recording_initialized\");\n        }\n    }\n    get pi() {\n        var t, i, e;\n        return (null == (t = this.N) || null == (i = t.persistence) || null == (e = i.get_property(yt)) ? void 0 : e.script) || \"recorder\";\n    }\n    gi(t) {\n        var i;\n        return 3 === t.type && -1 !== qr.indexOf(null == (i = t.data) ? void 0 : i.source);\n    }\n    mi(t) {\n        var i = this.gi(t);\n        i || this.Ut || t.timestamp - this.qt > this.gt && (this.Ut = !0, clearInterval(this.ui), this.Qt(\"sessionIdle\", {\n            eventTimestamp: t.timestamp,\n            lastActivityTimestamp: this.qt,\n            threshold: this.gt,\n            bufferLength: this.M.data.length,\n            bufferSize: this.M.size\n        }), this.Yt());\n        var e = !1;\n        if (i && (this.qt = t.timestamp, this.Ut)) {\n            var r = \"unknown\" === this.Ut;\n            this.Ut = !1, r || (this.Qt(\"sessionNoLongerIdle\", {\n                reason: \"user activity\",\n                type: t.type\n            }), e = !0);\n        }\n        if (!this.Ut) {\n            var { windowId: s, sessionId: n } = this.bt.checkAndGetSessionAndWindowId(!i, t.timestamp), o = this.jt !== n, a = this.ri !== s;\n            this.ri = s, this.jt = n, o || a ? (this.stopRecording(), this.startIfEnabledOrStop(\"session_id_changed\")) : e && this.bi();\n        }\n    }\n    wi(t) {\n        try {\n            return t.rrwebMethod(), !0;\n        } catch (i) {\n            return this.zt.length < 10 ? this.zt.push({\n                enqueuedAt: t.enqueuedAt || Date.now(),\n                attempt: t.attempt++,\n                rrwebMethod: t.rrwebMethod\n            }) : Nr.warn(\"could not emit queued rrweb event.\", i, t), !1;\n        }\n    }\n    Qt(t, i) {\n        return this.wi(Br(()=>zr().addCustomEvent(t, i)));\n    }\n    yi() {\n        return this.wi(Br(()=>zr().takeFullSnapshot()));\n    }\n    fi() {\n        var t, i, e, r, s = {\n            blockClass: \"ph-no-capture\",\n            blockSelector: void 0,\n            ignoreClass: \"ph-ignore-input\",\n            maskTextClass: \"ph-mask\",\n            maskTextSelector: void 0,\n            maskTextFn: void 0,\n            maskAllInputs: !0,\n            maskInputOptions: {\n                password: !0\n            },\n            maskInputFn: void 0,\n            slimDOMOptions: {},\n            collectFonts: !1,\n            inlineStylesheet: !0,\n            recordCrossOriginIframes: !1\n        }, n = this.N.config.session_recording;\n        for (var [o, a] of Object.entries(n || {}))o in s && (\"maskInputOptions\" === o ? s.maskInputOptions = B({\n            password: !0\n        }, a) : s[o] = a);\n        (this.Et && this.Et.enabled && (s.recordCanvas = !0, s.sampling = {\n            canvas: this.Et.fps\n        }, s.dataURLOptions = {\n            type: \"image/webp\",\n            quality: this.Et.quality\n        }), this.Pt) && (s.maskAllInputs = null === (i = this.Pt.maskAllInputs) || void 0 === i || i, s.maskTextSelector = null !== (e = this.Pt.maskTextSelector) && void 0 !== e ? e : void 0, s.blockSelector = null !== (r = this.Pt.blockSelector) && void 0 !== r ? r : void 0);\n        var l = zr();\n        if (l) {\n            this.Si = null !== (t = this.Si) && void 0 !== t ? t : new Qe(l, {\n                refillRate: this.N.config.session_recording.__mutationRateLimiterRefillRate,\n                bucketSize: this.N.config.session_recording.__mutationRateLimiterBucketSize,\n                onBlockedNode: (t, i)=>{\n                    var e = \"Too many mutations on node '\" + t + \"'. Rate limiting. This could be due to SVG animations or something similar\";\n                    Nr.info(e, {\n                        node: i\n                    }), this.log(Lr + \" \" + e, \"warn\");\n                }\n            });\n            var u = this.$i();\n            this.ei = l(B({\n                emit: (t)=>{\n                    this.onRRwebEmit(t);\n                },\n                plugins: u\n            }, s)), this.qt = Date.now(), this.Ut = A(this.Ut) ? this.Ut : \"unknown\", this.Qt(\"$session_options\", {\n                sessionRecordingOptions: s,\n                activePlugins: u.map((t)=>null == t ? void 0 : t.name)\n            }), this.Qt(\"$posthog_config\", {\n                config: this.N.config\n            });\n        } else Nr.error(\"onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.\");\n    }\n    bi() {\n        if (this.ui && clearInterval(this.ui), !0 !== this.Ut) {\n            var t = this.wt;\n            t && (this.ui = setInterval(()=>{\n                this.yi();\n            }, t));\n        }\n    }\n    $i() {\n        var t, i, e, r, s = [], n = null == (t = c.__PosthogExtensions__) || null == (i = t.rrwebPlugins) ? void 0 : i.getRecordConsolePlugin;\n        n && this.xt && s.push(n());\n        var o = null == (e = c.__PosthogExtensions__) || null == (r = e.rrwebPlugins) ? void 0 : r.getRecordNetworkPlugin;\n        this.It && E(o) && (!bi.includes(location.hostname) || this._forceAllowLocalhostNetworkCapture ? s.push(o(Ye(this.N.config, this.It))) : Nr.info(\"NetworkCapture not started because we are on localhost.\"));\n        return s;\n    }\n    onRRwebEmit(t) {\n        var i;\n        if (this.ki(), t && I(t)) {\n            if (t.type === ze.Meta) {\n                var e = this.li(t.data.href);\n                if (this.xi = e, !e) return;\n                t.data.href = e;\n            } else this.Ei();\n            if (this.Ii(), !this.Ot || (r = t).type === ze.Custom && \"recording paused\" === r.data.tag) {\n                var r;\n                t.type === ze.FullSnapshot && this.bi(), t.type === ze.FullSnapshot && \"trigger_pending\" === this.yt && this.si();\n                var s = this.Si ? this.Si.throttleMutations(t) : t;\n                if (s) {\n                    var n = function(t) {\n                        var i = t;\n                        if (i && I(i) && 6 === i.type && I(i.data) && \"rrweb/console@1\" === i.data.plugin) {\n                            i.data.payload.payload.length > 10 && (i.data.payload.payload = i.data.payload.payload.slice(0, 10), i.data.payload.payload.push(\"...[truncated]\"));\n                            for(var e = [], r = 0; r < i.data.payload.payload.length; r++)i.data.payload.payload[r] && i.data.payload.payload[r].length > 2e3 ? e.push(i.data.payload.payload[r].slice(0, 2e3) + \"...[truncated]\") : e.push(i.data.payload.payload[r]);\n                            return i.data.payload.payload = e, t;\n                        }\n                        return t;\n                    }(s);\n                    if (this.mi(n), !0 !== this.Ut || Wr(n)) {\n                        if (Wr(n)) {\n                            var o = n.data.payload;\n                            if (o) {\n                                var a = o.lastActivityTimestamp, l = o.threshold;\n                                n.timestamp = a + l;\n                            }\n                        }\n                        var u = null === (i = this.N.config.session_recording.compress_events) || void 0 === i || i ? function(t) {\n                            if (Le(t) < 1024) return t;\n                            try {\n                                if (t.type === ze.FullSnapshot) return B({}, t, {\n                                    data: Hr(t.data),\n                                    cv: \"2024-10\"\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.Mutation) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        texts: Hr(t.data.texts),\n                                        attributes: Hr(t.data.attributes),\n                                        removes: Hr(t.data.removes),\n                                        adds: Hr(t.data.adds)\n                                    })\n                                });\n                                if (t.type === ze.IncrementalSnapshot && t.data.source === Ue.StyleSheetRule) return B({}, t, {\n                                    cv: \"2024-10\",\n                                    data: B({}, t.data, {\n                                        adds: t.data.adds ? Hr(t.data.adds) : void 0,\n                                        removes: t.data.removes ? Hr(t.data.removes) : void 0\n                                    })\n                                });\n                            } catch (t) {\n                                Nr.error(\"could not compress event - will use uncompressed event\", t);\n                            }\n                            return t;\n                        }(n) : n, h = {\n                            $snapshot_bytes: Le(u),\n                            $snapshot_data: u,\n                            $session_id: this.jt,\n                            $window_id: this.ri\n                        };\n                        \"disabled\" !== this.status ? this.Pi(h) : this.si();\n                    }\n                }\n            }\n        }\n    }\n    Ei() {\n        if (!this.N.config.capture_pageview && i) {\n            var t = this.li(i.location.href);\n            this.xi !== t && (this.Qt(\"$url_changed\", {\n                href: t\n            }), this.xi = t);\n        }\n    }\n    ki() {\n        if (this.zt.length) {\n            var t = [\n                ...this.zt\n            ];\n            this.zt = [], t.forEach((t)=>{\n                Date.now() - t.enqueuedAt <= 2e3 && this.wi(t);\n            });\n        }\n    }\n    li(t) {\n        var i = this.N.config.session_recording;\n        if (i.maskNetworkRequestFn) {\n            var e, r = {\n                url: t\n            };\n            return null == (e = r = i.maskNetworkRequestFn(r)) ? void 0 : e.url;\n        }\n        return t;\n    }\n    si() {\n        return this.M = {\n            size: 0,\n            data: [],\n            sessionId: this.jt,\n            windowId: this.ri\n        }, this.M;\n    }\n    Yt() {\n        this.Ri && (clearTimeout(this.Ri), this.Ri = void 0);\n        var t = this.Tt, i = this.$t, e = F(i) && i >= 0, r = F(t) && e && i < t;\n        if (\"buffering\" === this.status || \"paused\" === this.status || \"disabled\" === this.status || r) return this.Ri = setTimeout(()=>{\n            this.Yt();\n        }, 2e3), this.M;\n        this.M.data.length > 0 && Ne(this.M).forEach((t)=>{\n            this.Ti({\n                $snapshot_bytes: t.size,\n                $snapshot_data: t.data,\n                $session_id: t.sessionId,\n                $window_id: t.windowId,\n                $lib: \"web\",\n                $lib_version: f.LIB_VERSION\n            });\n        });\n        return this.si();\n    }\n    Pi(t) {\n        var i, e = 2 + ((null == (i = this.M) ? void 0 : i.data.length) || 0);\n        !this.Ut && (this.M.size + t.$snapshot_bytes + e > 943718.4 || this.M.sessionId !== this.jt) && (this.M = this.Yt()), this.M.size += t.$snapshot_bytes, this.M.data.push(t.$snapshot_data), this.Ri || this.Ut || (this.Ri = setTimeout(()=>{\n            this.Yt();\n        }, 2e3));\n    }\n    Ti(t) {\n        this.N.capture(\"$snapshot\", t, {\n            _url: this.N.requestRouter.endpointFor(\"api\", this.ii),\n            _noTruncate: !0,\n            _batchKey: \"recordings\",\n            skip_client_rate_limiting: !0\n        });\n    }\n    Ii() {\n        if (void 0 !== i && i.location.href) {\n            var t = i.location.href, e = this.Ot, r = Gr(t, this.Jt);\n            r && !e ? this.Mi() : !r && e && this.Oi(), Gr(t, this.Dt) && this.Ci(\"url\");\n        }\n    }\n    Ci(t) {\n        var i, e;\n        \"trigger_pending\" === this.yt && (null == (i = this.N) || null == (e = i.persistence) || e.register({\n            [\"url\" === t ? kt : xt]: this.jt\n        }), this.Yt(), this.vi(t + \"_trigger_matched\"));\n    }\n    Mi() {\n        this.Ot || (this.Ot = !0, clearInterval(this.ui), Nr.info(\"recording paused due to URL blocker\"), this.Qt(\"recording paused\", {\n            reason: \"url blocker\"\n        }));\n    }\n    Oi() {\n        this.Ot && (this.Ot = !1, this.yi(), this.bi(), this.Qt(\"recording resumed\", {\n            reason: \"left blocked url\"\n        }), Nr.info(\"recording resumed\"));\n    }\n    ai() {\n        0 !== this.Nt.length && C(this.Vt) && (this.Vt = this.N.on(\"eventCaptured\", (t)=>{\n            try {\n                this.Nt.includes(t.event) && this.Ci(\"event\");\n            } catch (t) {\n                Nr.error(\"Could not activate event trigger\", t);\n            }\n        }));\n    }\n    overrideLinkedFlag() {\n        this.Ft = !0, this.yi(), this.vi(\"linked_flag_overridden\");\n    }\n    overrideSampling() {\n        var t;\n        null == (t = this.N.persistence) || t.register({\n            [$t]: !0\n        }), this.yi(), this.vi(\"sampling_overridden\");\n    }\n    overrideTrigger(t) {\n        this.Ci(t);\n    }\n    vi(t, i) {\n        this.N.register_for_session({\n            $session_recording_start_reason: t\n        }), Nr.info(t.replace(\"_\", \" \"), i), m([\n            \"recording_initialized\",\n            \"session_id_changed\"\n        ], t) || this.Qt(t, i);\n    }\n    get sdkDebugProperties() {\n        var { sessionStartTimestamp: t } = this.bt.checkAndGetSessionAndWindowId(!0);\n        return {\n            $recording_status: this.status,\n            $sdk_debug_replay_internal_buffer_length: this.M.data.length,\n            $sdk_debug_replay_internal_buffer_size: this.M.size,\n            $sdk_debug_current_session_duration: this.$t,\n            $sdk_debug_session_start: t\n        };\n    }\n}\nvar Vr = z(\"[SegmentIntegration]\");\nfunction Kr(t, i) {\n    var e = t.config.segment;\n    if (!e) return i();\n    !function(t, i) {\n        var e = t.config.segment;\n        if (!e) return i();\n        var r = (e)=>{\n            var r = ()=>e.anonymousId() || ji();\n            t.config.get_device_id = r, e.id() && (t.register({\n                distinct_id: e.id(),\n                $device_id: r()\n            }), t.persistence.set_property(Ft, \"identified\")), i();\n        }, s = e.user();\n        \"then\" in s && E(s.then) ? s.then((t)=>r(t)) : r(s);\n    }(t, ()=>{\n        e.register(((t)=>{\n            Promise && Promise.resolve || Vr.warn(\"This browser does not have Promise support, and can not use the segment integration\");\n            var i = (i, e)=>{\n                var r;\n                if (!e) return i;\n                i.event.userId || i.event.anonymousId === t.get_distinct_id() || (Vr.info(\"No userId set, resetting PostHog\"), t.reset()), i.event.userId && i.event.userId !== t.get_distinct_id() && (Vr.info(\"UserId set, identifying with PostHog\"), t.identify(i.event.userId));\n                var s = t.Fi(e, null !== (r = i.event.properties) && void 0 !== r ? r : {}, new Date);\n                return i.event.properties = Object.assign({}, s, i.event.properties), i;\n            };\n            return {\n                name: \"PostHog JS\",\n                type: \"enrichment\",\n                version: \"1.0.0\",\n                isLoaded: ()=>!0,\n                load: ()=>Promise.resolve(),\n                track: (t)=>i(t, t.event.event),\n                page: (t)=>i(t, \"$pageview\"),\n                identify: (t)=>i(t, \"$identify\"),\n                screen: (t)=>i(t, \"$screen\")\n            };\n        })(t)).then(()=>{\n            i();\n        });\n    });\n}\nvar Yr = \"posthog-js\";\nfunction Xr(t, i) {\n    var { organization: e, projectId: r, prefix: s, severityAllowList: n = [\n        \"error\"\n    ] } = void 0 === i ? {} : i;\n    return (i)=>{\n        var o, a, l, u, h;\n        if (!(\"*\" === n || n.includes(i.level)) || !t.__loaded) return i;\n        i.tags || (i.tags = {});\n        var d = t.requestRouter.endpointFor(\"ui\", \"/project/\" + t.config.token + \"/person/\" + t.get_distinct_id());\n        i.tags[\"PostHog Person URL\"] = d, t.sessionRecordingStarted() && (i.tags[\"PostHog Recording URL\"] = t.get_session_replay_url({\n            withTimestamp: !0\n        }));\n        var v = (null == (o = i.exception) ? void 0 : o.values) || [], c = v.map((t)=>B({}, t, {\n                stacktrace: t.stacktrace ? B({}, t.stacktrace, {\n                    type: \"raw\",\n                    frames: (t.stacktrace.frames || []).map((t)=>B({}, t, {\n                            platform: \"web:javascript\"\n                        }))\n                }) : void 0\n            })), f = {\n            $exception_message: (null == (a = v[0]) ? void 0 : a.value) || i.message,\n            $exception_type: null == (l = v[0]) ? void 0 : l.type,\n            $exception_personURL: d,\n            $exception_level: i.level,\n            $exception_list: c,\n            $sentry_event_id: i.event_id,\n            $sentry_exception: i.exception,\n            $sentry_exception_message: (null == (u = v[0]) ? void 0 : u.value) || i.message,\n            $sentry_exception_type: null == (h = v[0]) ? void 0 : h.type,\n            $sentry_tags: i.tags\n        };\n        return e && r && (f.$sentry_url = (s || \"https://sentry.io/organizations/\") + e + \"/issues/?project=\" + r + \"&query=\" + i.event_id), t.exceptions.sendExceptionEvent(f), i;\n    };\n}\nclass Qr {\n    constructor(t, i, e, r, s){\n        this.name = Yr, this.setupOnce = function(n) {\n            n(Xr(t, {\n                organization: i,\n                projectId: e,\n                prefix: r,\n                severityAllowList: s\n            }));\n        };\n    }\n}\nvar Zr, ts = null != i && i.location ? ki(i.location.hash, \"__posthog\") || ki(location.hash, \"state\") : null, is = \"_postHogToolbarParams\", es = z(\"[Toolbar]\");\n!function(t) {\n    t[t.UNINITIALIZED = 0] = \"UNINITIALIZED\", t[t.LOADING = 1] = \"LOADING\", t[t.LOADED = 2] = \"LOADED\";\n}(Zr || (Zr = {}));\nclass rs {\n    constructor(t){\n        this.instance = t;\n    }\n    Ai(t) {\n        c.ph_toolbar_state = t;\n    }\n    Di() {\n        var t;\n        return null !== (t = c.ph_toolbar_state) && void 0 !== t ? t : Zr.UNINITIALIZED;\n    }\n    maybeLoadToolbar(t, e, r) {\n        var s, n;\n        if (void 0 === t && (t = void 0), void 0 === e && (e = void 0), void 0 === r && (r = void 0), !i || !a) return !1;\n        t = null !== (s = t) && void 0 !== s ? s : i.location, r = null !== (n = r) && void 0 !== n ? n : i.history;\n        try {\n            if (!e) {\n                try {\n                    i.localStorage.setItem(\"test\", \"test\"), i.localStorage.removeItem(\"test\");\n                } catch (t) {\n                    return !1;\n                }\n                e = null == i ? void 0 : i.localStorage;\n            }\n            var o, l = ts || ki(t.hash, \"__posthog\") || ki(t.hash, \"state\"), u = l ? X(()=>JSON.parse(atob(decodeURIComponent(l)))) || X(()=>JSON.parse(decodeURIComponent(l))) : null;\n            return u && \"ph_authorize\" === u.action ? ((o = u).source = \"url\", o && Object.keys(o).length > 0 && (u.desiredHash ? t.hash = u.desiredHash : r ? r.replaceState(r.state, \"\", t.pathname + t.search) : t.hash = \"\")) : ((o = JSON.parse(e.getItem(is) || \"{}\")).source = \"localstorage\", delete o.userIntent), !(!o.token || this.instance.config.token !== o.token) && (this.loadToolbar(o), !0);\n        } catch (t) {\n            return !1;\n        }\n    }\n    ji(t) {\n        var i = c.ph_load_toolbar || c.ph_load_editor;\n        !C(i) && E(i) ? i(t, this.instance) : es.warn(\"No toolbar load function found\");\n    }\n    loadToolbar(t) {\n        var e = !(null == a || !a.getElementById(Ut));\n        if (!i || e) return !1;\n        var r = \"custom\" === this.instance.requestRouter.region && this.instance.config.advanced_disable_toolbar_metrics, s = B({\n            token: this.instance.config.token\n        }, t, {\n            apiURL: this.instance.requestRouter.endpointFor(\"ui\")\n        }, r ? {\n            instrument: !1\n        } : {});\n        if (i.localStorage.setItem(is, JSON.stringify(B({}, s, {\n            source: void 0\n        }))), this.Di() === Zr.LOADED) this.ji(s);\n        else if (this.Di() === Zr.UNINITIALIZED) {\n            var n;\n            this.Ai(Zr.LOADING), null == (n = c.__PosthogExtensions__) || null == n.loadExternalDependency || n.loadExternalDependency(this.instance, \"toolbar\", (t)=>{\n                if (t) return es.error(\"[Toolbar] Failed to load\", t), void this.Ai(Zr.UNINITIALIZED);\n                this.Ai(Zr.LOADED), this.ji(s);\n            }), st(i, \"turbolinks:load\", ()=>{\n                this.Ai(Zr.UNINITIALIZED), this.loadToolbar(s);\n            });\n        }\n        return !0;\n    }\n    Li(t) {\n        return this.loadToolbar(t);\n    }\n    maybeLoadEditor(t, i, e) {\n        return void 0 === t && (t = void 0), void 0 === i && (i = void 0), void 0 === e && (e = void 0), this.maybeLoadToolbar(t, i, e);\n    }\n}\nvar ss = z(\"[TracingHeaders]\");\nclass ns {\n    constructor(t){\n        this.Ni = void 0, this.zi = void 0, this.K = ()=>{\n            var t, i, e, r;\n            R(this.Ni) && (null == (t = c.__PosthogExtensions__) || null == (i = t.tracingHeadersPatchFns) || i._patchXHR(this.N.sessionManager));\n            R(this.zi) && (null == (e = c.__PosthogExtensions__) || null == (r = e.tracingHeadersPatchFns) || r._patchFetch(this.N.sessionManager));\n        }, this.N = t;\n    }\n    J(t) {\n        var i, e;\n        null != (i = c.__PosthogExtensions__) && i.tracingHeadersPatchFns && t(), null == (e = c.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.N, \"tracing-headers\", (i)=>{\n            if (i) return ss.error(\"failed to load script\", i);\n            t();\n        });\n    }\n    startIfEnabledOrStop() {\n        var t, i;\n        this.N.config.__add_tracing_headers ? this.J(this.K) : (null == (t = this.Ni) || t.call(this), null == (i = this.zi) || i.call(this), this.Ni = void 0, this.zi = void 0);\n    }\n}\nvar os = z(\"[Web Vitals]\"), as = 9e5;\nclass ls {\n    constructor(t){\n        var i;\n        this.Ui = !1, this.i = !1, this.M = {\n            url: void 0,\n            metrics: [],\n            firstMetricTimestamp: void 0\n        }, this.qi = ()=>{\n            clearTimeout(this.Bi), 0 !== this.M.metrics.length && (this.N.capture(\"$web_vitals\", this.M.metrics.reduce((t, i)=>B({}, t, {\n                    [\"$web_vitals_\" + i.name + \"_event\"]: B({}, i),\n                    [\"$web_vitals_\" + i.name + \"_value\"]: i.value\n                }), {})), this.M = {\n                url: void 0,\n                metrics: [],\n                firstMetricTimestamp: void 0\n            });\n        }, this.Hi = (t)=>{\n            var i, e = null == (i = this.N.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0);\n            if (R(e)) os.error(\"Could not read session ID. Dropping metrics!\");\n            else {\n                this.M = this.M || {\n                    url: void 0,\n                    metrics: [],\n                    firstMetricTimestamp: void 0\n                };\n                var r = this.Wi();\n                if (!R(r)) if (C(null == t ? void 0 : t.name) || C(null == t ? void 0 : t.value)) os.error(\"Invalid metric received\", t);\n                else if (this.Gi && t.value >= this.Gi) os.error(\"Ignoring metric with value >= \" + this.Gi, t);\n                else this.M.url !== r && (this.qi(), this.Bi = setTimeout(this.qi, this.flushToCaptureTimeoutMs)), R(this.M.url) && (this.M.url = r), this.M.firstMetricTimestamp = R(this.M.firstMetricTimestamp) ? Date.now() : this.M.firstMetricTimestamp, t.attribution && t.attribution.interactionTargetElement && (t.attribution.interactionTargetElement = void 0), this.M.metrics.push(B({}, t, {\n                    $current_url: r,\n                    $session_id: e.sessionId,\n                    $window_id: e.windowId,\n                    timestamp: Date.now()\n                })), this.M.metrics.length === this.allowedMetrics.length && this.qi();\n            }\n        }, this.K = ()=>{\n            var t, i, e, r, s = c.__PosthogExtensions__;\n            R(s) || R(s.postHogWebVitalsCallbacks) || ({ onLCP: t, onCLS: i, onFCP: e, onINP: r } = s.postHogWebVitalsCallbacks), t && i && e && r ? (this.allowedMetrics.indexOf(\"LCP\") > -1 && t(this.Hi.bind(this)), this.allowedMetrics.indexOf(\"CLS\") > -1 && i(this.Hi.bind(this)), this.allowedMetrics.indexOf(\"FCP\") > -1 && e(this.Hi.bind(this)), this.allowedMetrics.indexOf(\"INP\") > -1 && r(this.Hi.bind(this)), this.i = !0) : os.error(\"web vitals callbacks not loaded - not starting\");\n        }, this.N = t, this.Ui = !(null == (i = this.N.persistence) || !i.props[dt]), this.startIfEnabled();\n    }\n    get allowedMetrics() {\n        var t, i, e = I(this.N.config.capture_performance) ? null == (t = this.N.config.capture_performance) ? void 0 : t.web_vitals_allowed_metrics : void 0;\n        return R(e) ? (null == (i = this.N.persistence) ? void 0 : i.props[ct]) || [\n            \"CLS\",\n            \"FCP\",\n            \"INP\",\n            \"LCP\"\n        ] : e;\n    }\n    get flushToCaptureTimeoutMs() {\n        return (I(this.N.config.capture_performance) ? this.N.config.capture_performance.web_vitals_delayed_flush_ms : void 0) || 5e3;\n    }\n    get Gi() {\n        var t = I(this.N.config.capture_performance) && F(this.N.config.capture_performance.__web_vitals_max_value) ? this.N.config.capture_performance.__web_vitals_max_value : as;\n        return 0 < t && t <= 6e4 ? as : t;\n    }\n    get isEnabled() {\n        var t = null == l ? void 0 : l.protocol;\n        if (\"http:\" !== t && \"https:\" !== t) return os.info(\"Web Vitals are disabled on non-http/https protocols\"), !1;\n        var i = I(this.N.config.capture_performance) ? this.N.config.capture_performance.web_vitals : A(this.N.config.capture_performance) ? this.N.config.capture_performance : void 0;\n        return A(i) ? i : this.Ui;\n    }\n    startIfEnabled() {\n        this.isEnabled && !this.i && (os.info(\"enabled, starting...\"), this.J(this.K));\n    }\n    onRemoteConfig(t) {\n        var i = I(t.capturePerformance) && !!t.capturePerformance.web_vitals, e = I(t.capturePerformance) ? t.capturePerformance.web_vitals_allowed_metrics : void 0;\n        this.N.persistence && (this.N.persistence.register({\n            [dt]: i\n        }), this.N.persistence.register({\n            [ct]: e\n        })), this.Ui = i, this.startIfEnabled();\n    }\n    J(t) {\n        var i, e;\n        null != (i = c.__PosthogExtensions__) && i.postHogWebVitalsCallbacks && t(), null == (e = c.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.N, \"web-vitals\", (i)=>{\n            i ? os.error(\"failed to load script\", i) : t();\n        });\n    }\n    Wi() {\n        var t = i ? i.location.href : void 0;\n        return t || os.error(\"Could not determine current URL\"), t;\n    }\n}\nvar us = z(\"[Heatmaps]\");\nfunction hs(t) {\n    return I(t) && \"clientX\" in t && \"clientY\" in t && F(t.clientX) && F(t.clientY);\n}\nclass ds {\n    constructor(t){\n        var i;\n        this.rageclicks = new mi, this.Ui = !1, this.i = !1, this.Ji = null, this.instance = t, this.Ui = !(null == (i = this.instance.persistence) || !i.props[ut]);\n    }\n    get flushIntervalMilliseconds() {\n        var t = 5e3;\n        return I(this.instance.config.capture_heatmaps) && this.instance.config.capture_heatmaps.flush_interval_milliseconds && (t = this.instance.config.capture_heatmaps.flush_interval_milliseconds), t;\n    }\n    get isEnabled() {\n        return R(this.instance.config.capture_heatmaps) ? R(this.instance.config.enable_heatmaps) ? this.Ui : this.instance.config.enable_heatmaps : !1 !== this.instance.config.capture_heatmaps;\n    }\n    startIfEnabled() {\n        if (this.isEnabled) {\n            if (this.i) return;\n            us.info(\"starting...\"), this.Vi(), this.Ji = setInterval(this.Ki.bind(this), this.flushIntervalMilliseconds);\n        } else {\n            var t, i;\n            clearInterval(null !== (t = this.Ji) && void 0 !== t ? t : void 0), null == (i = this.Yi) || i.stop(), this.getAndClearBuffer();\n        }\n    }\n    onRemoteConfig(t) {\n        var i = !!t.heatmaps;\n        this.instance.persistence && this.instance.persistence.register({\n            [ut]: i\n        }), this.Ui = i, this.startIfEnabled();\n    }\n    getAndClearBuffer() {\n        var t = this.M;\n        return this.M = void 0, t;\n    }\n    Xi(t) {\n        this.Qi(t.originalEvent, \"deadclick\");\n    }\n    Vi() {\n        i && a && (st(i, \"beforeunload\", this.Ki.bind(this)), st(a, \"click\", (t)=>this.Qi(t || (null == i ? void 0 : i.event)), {\n            capture: !0\n        }), st(a, \"mousemove\", (t)=>this.Zi(t || (null == i ? void 0 : i.event)), {\n            capture: !0\n        }), this.Yi = new re(this.instance, ie, this.Xi.bind(this)), this.Yi.startIfEnabled(), this.i = !0);\n    }\n    te(t, e) {\n        var r = this.instance.scrollManager.scrollY(), s = this.instance.scrollManager.scrollX(), n = this.instance.scrollManager.scrollElement(), o = function(t, e, r) {\n            for(var s = t; s && Wt(s) && !Gt(s, \"body\");){\n                if (s === r) return !1;\n                if (m(e, null == i ? void 0 : i.getComputedStyle(s).position)) return !0;\n                s = ei(s);\n            }\n            return !1;\n        }(ti(t), [\n            \"fixed\",\n            \"sticky\"\n        ], n);\n        return {\n            x: t.clientX + (o ? 0 : s),\n            y: t.clientY + (o ? 0 : r),\n            target_fixed: o,\n            type: e\n        };\n    }\n    Qi(t, i) {\n        var e;\n        if (void 0 === i && (i = \"click\"), !Ht(t.target) && hs(t)) {\n            var r = this.te(t, i);\n            null != (e = this.rageclicks) && e.isRageClick(t.clientX, t.clientY, (new Date).getTime()) && this.ie(B({}, r, {\n                type: \"rageclick\"\n            })), this.ie(r);\n        }\n    }\n    Zi(t) {\n        !Ht(t.target) && hs(t) && (clearTimeout(this.ee), this.ee = setTimeout(()=>{\n            this.ie(this.te(t, \"mousemove\"));\n        }, 500));\n    }\n    ie(t) {\n        if (i) {\n            var e = i.location.href;\n            this.M = this.M || {}, this.M[e] || (this.M[e] = []), this.M[e].push(t);\n        }\n    }\n    Ki() {\n        this.M && !P(this.M) && this.instance.capture(\"$$heatmap\", {\n            $heatmap_data: this.getAndClearBuffer()\n        });\n    }\n}\nclass vs {\n    constructor(t){\n        this.N = t;\n    }\n    doPageView(t, e) {\n        var r, s = this.re(t, e);\n        return this.se = {\n            pathname: null !== (r = null == i ? void 0 : i.location.pathname) && void 0 !== r ? r : \"\",\n            pageViewId: e,\n            timestamp: t\n        }, this.N.scrollManager.resetContext(), s;\n    }\n    doPageLeave(t) {\n        var i;\n        return this.re(t, null == (i = this.se) ? void 0 : i.pageViewId);\n    }\n    doEvent() {\n        var t;\n        return {\n            $pageview_id: null == (t = this.se) ? void 0 : t.pageViewId\n        };\n    }\n    re(t, i) {\n        var e = this.se;\n        if (!e) return {\n            $pageview_id: i\n        };\n        var r = {\n            $pageview_id: i,\n            $prev_pageview_id: e.pageViewId\n        }, s = this.N.scrollManager.getContext();\n        if (s && !this.N.config.disable_scroll_properties) {\n            var { maxScrollHeight: n, lastScrollY: o, maxScrollY: a, maxContentHeight: l, lastContentY: u, maxContentY: h } = s;\n            if (!(R(n) || R(o) || R(a) || R(l) || R(u) || R(h))) {\n                n = Math.ceil(n), o = Math.ceil(o), a = Math.ceil(a), l = Math.ceil(l), u = Math.ceil(u), h = Math.ceil(h);\n                var d = n <= 1 ? 1 : Xe(o / n, 0, 1), v = n <= 1 ? 1 : Xe(a / n, 0, 1), c = l <= 1 ? 1 : Xe(u / l, 0, 1), f = l <= 1 ? 1 : Xe(h / l, 0, 1);\n                r = V(r, {\n                    $prev_pageview_last_scroll: o,\n                    $prev_pageview_last_scroll_percentage: d,\n                    $prev_pageview_max_scroll: a,\n                    $prev_pageview_max_scroll_percentage: v,\n                    $prev_pageview_last_content: u,\n                    $prev_pageview_last_content_percentage: c,\n                    $prev_pageview_max_content: h,\n                    $prev_pageview_max_content_percentage: f\n                });\n            }\n        }\n        return e.pathname && (r.$prev_pageview_pathname = e.pathname), e.timestamp && (r.$prev_pageview_duration = (t.getTime() - e.timestamp.getTime()) / 1e3), r;\n    }\n}\nclass cs {\n    constructor(t){\n        this.N = t;\n    }\n    sendExceptionEvent(t) {\n        this.N.capture(\"$exception\", t, {\n            _noTruncate: !0,\n            _batchKey: \"exceptionEvent\"\n        });\n    }\n}\nvar fs = \"Mobile\", ps = \"iOS\", gs = \"Android\", _s = \"Tablet\", ms = gs + \" \" + _s, bs = \"iPad\", ws = \"Apple\", ys = ws + \" Watch\", Ss = \"Safari\", $s = \"BlackBerry\", ks = \"Samsung\", xs = ks + \"Browser\", Es = ks + \" Internet\", Is = \"Chrome\", Ps = Is + \" OS\", Rs = Is + \" \" + ps, Ts = \"Internet Explorer\", Ms = Ts + \" \" + fs, Os = \"Opera\", Cs = Os + \" Mini\", Fs = \"Edge\", As = \"Microsoft \" + Fs, Ds = \"Firefox\", js = Ds + \" \" + ps, Ls = \"Nintendo\", Ns = \"PlayStation\", zs = \"Xbox\", Us = gs + \" \" + fs, qs = fs + \" \" + Ss, Bs = \"Windows\", Hs = Bs + \" Phone\", Ws = \"Nokia\", Gs = \"Ouya\", Js = \"Generic\", Vs = Js + \" \" + fs.toLowerCase(), Ks = Js + \" \" + _s.toLowerCase(), Ys = \"Konqueror\", Xs = \"(\\\\d+(\\\\.\\\\d+)?)\", Qs = new RegExp(\"Version/\" + Xs), Zs = new RegExp(zs, \"i\"), tn = new RegExp(Ns + \" \\\\w+\", \"i\"), en = new RegExp(Ls + \" \\\\w+\", \"i\"), rn = new RegExp($s + \"|PlayBook|BB10\", \"i\"), sn = {\n    \"NT3.51\": \"NT 3.11\",\n    \"NT4.0\": \"NT 4.0\",\n    \"5.0\": \"2000\",\n    5.1: \"XP\",\n    5.2: \"XP\",\n    \"6.0\": \"Vista\",\n    6.1: \"7\",\n    6.2: \"8\",\n    6.3: \"8.1\",\n    6.4: \"10\",\n    \"10.0\": \"10\"\n};\nvar nn = (t, i)=>i && m(i, ws) || function(t) {\n        return m(t, Ss) && !m(t, Is) && !m(t, gs);\n    }(t), on = function(t, i) {\n    return i = i || \"\", m(t, \" OPR/\") && m(t, \"Mini\") ? Cs : m(t, \" OPR/\") ? Os : rn.test(t) ? $s : m(t, \"IE\" + fs) || m(t, \"WPDesktop\") ? Ms : m(t, xs) ? Es : m(t, Fs) || m(t, \"Edg/\") ? As : m(t, \"FBIOS\") ? \"Facebook \" + fs : m(t, \"UCWEB\") || m(t, \"UCBrowser\") ? \"UC Browser\" : m(t, \"CriOS\") ? Rs : m(t, \"CrMo\") || m(t, Is) ? Is : m(t, gs) && m(t, Ss) ? Us : m(t, \"FxiOS\") ? js : m(t.toLowerCase(), Ys.toLowerCase()) ? Ys : nn(t, i) ? m(t, fs) ? qs : Ss : m(t, Ds) ? Ds : m(t, \"MSIE\") || m(t, \"Trident/\") ? Ts : m(t, \"Gecko\") ? Ds : \"\";\n}, an = {\n    [Ms]: [\n        new RegExp(\"rv:\" + Xs)\n    ],\n    [As]: [\n        new RegExp(Fs + \"?\\\\/\" + Xs)\n    ],\n    [Is]: [\n        new RegExp(\"(\" + Is + \"|CrMo)\\\\/\" + Xs)\n    ],\n    [Rs]: [\n        new RegExp(\"CriOS\\\\/\" + Xs)\n    ],\n    \"UC Browser\": [\n        new RegExp(\"(UCBrowser|UCWEB)\\\\/\" + Xs)\n    ],\n    [Ss]: [\n        Qs\n    ],\n    [qs]: [\n        Qs\n    ],\n    [Os]: [\n        new RegExp(\"(Opera|OPR)\\\\/\" + Xs)\n    ],\n    [Ds]: [\n        new RegExp(Ds + \"\\\\/\" + Xs)\n    ],\n    [js]: [\n        new RegExp(\"FxiOS\\\\/\" + Xs)\n    ],\n    [Ys]: [\n        new RegExp(\"Konqueror[:/]?\" + Xs, \"i\")\n    ],\n    [$s]: [\n        new RegExp($s + \" \" + Xs),\n        Qs\n    ],\n    [Us]: [\n        new RegExp(\"android\\\\s\" + Xs, \"i\")\n    ],\n    [Es]: [\n        new RegExp(xs + \"\\\\/\" + Xs)\n    ],\n    [Ts]: [\n        new RegExp(\"(rv:|MSIE )\" + Xs)\n    ],\n    Mozilla: [\n        new RegExp(\"rv:\" + Xs)\n    ]\n}, ln = function(t, i) {\n    var e = on(t, i), r = an[e];\n    if (R(r)) return null;\n    for(var s = 0; s < r.length; s++){\n        var n = r[s], o = t.match(n);\n        if (o) return parseFloat(o[o.length - 2]);\n    }\n    return null;\n}, un = [\n    [\n        new RegExp(zs + \"; \" + zs + \" (.*?)[);]\", \"i\"),\n        (t)=>[\n                zs,\n                t && t[1] || \"\"\n            ]\n    ],\n    [\n        new RegExp(Ls, \"i\"),\n        [\n            Ls,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(Ns, \"i\"),\n        [\n            Ns,\n            \"\"\n        ]\n    ],\n    [\n        rn,\n        [\n            $s,\n            \"\"\n        ]\n    ],\n    [\n        new RegExp(Bs, \"i\"),\n        (t, i)=>{\n            if (/Phone/.test(i) || /WPDesktop/.test(i)) return [\n                Hs,\n                \"\"\n            ];\n            if (new RegExp(fs).test(i) && !/IEMobile\\b/.test(i)) return [\n                Bs + \" \" + fs,\n                \"\"\n            ];\n            var e = /Windows NT ([0-9.]+)/i.exec(i);\n            if (e && e[1]) {\n                var r = e[1], s = sn[r] || \"\";\n                return /arm/i.test(i) && (s = \"RT\"), [\n                    Bs,\n                    s\n                ];\n            }\n            return [\n                Bs,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /((iPhone|iPad|iPod).*?OS (\\d+)_(\\d+)_?(\\d+)?|iPhone)/,\n        (t)=>{\n            if (t && t[3]) {\n                var i = [\n                    t[3],\n                    t[4],\n                    t[5] || \"0\"\n                ];\n                return [\n                    ps,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                ps,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /(watch.*\\/(\\d+\\.\\d+\\.\\d+)|watch os,(\\d+\\.\\d+),)/i,\n        (t)=>{\n            var i = \"\";\n            return t && t.length >= 3 && (i = R(t[2]) ? t[3] : t[2]), [\n                \"watchOS\",\n                i\n            ];\n        }\n    ],\n    [\n        new RegExp(\"(\" + gs + \" (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?|\" + gs + \")\", \"i\"),\n        (t)=>{\n            if (t && t[2]) {\n                var i = [\n                    t[2],\n                    t[3],\n                    t[4] || \"0\"\n                ];\n                return [\n                    gs,\n                    i.join(\".\")\n                ];\n            }\n            return [\n                gs,\n                \"\"\n            ];\n        }\n    ],\n    [\n        /Mac OS X (\\d+)[_.](\\d+)[_.]?(\\d+)?/i,\n        (t)=>{\n            var i = [\n                \"Mac OS X\",\n                \"\"\n            ];\n            if (t && t[1]) {\n                var e = [\n                    t[1],\n                    t[2],\n                    t[3] || \"0\"\n                ];\n                i[1] = e.join(\".\");\n            }\n            return i;\n        }\n    ],\n    [\n        /Mac/i,\n        [\n            \"Mac OS X\",\n            \"\"\n        ]\n    ],\n    [\n        /CrOS/,\n        [\n            Ps,\n            \"\"\n        ]\n    ],\n    [\n        /Linux|debian/i,\n        [\n            \"Linux\",\n            \"\"\n        ]\n    ]\n], hn = function(t) {\n    return en.test(t) ? Ls : tn.test(t) ? Ns : Zs.test(t) ? zs : new RegExp(Gs, \"i\").test(t) ? Gs : new RegExp(\"(\" + Hs + \"|WPDesktop)\", \"i\").test(t) ? Hs : /iPad/.test(t) ? bs : /iPod/.test(t) ? \"iPod Touch\" : /iPhone/.test(t) ? \"iPhone\" : /(watch)(?: ?os[,/]|\\d,\\d\\/)[\\d.]+/i.test(t) ? ys : rn.test(t) ? $s : /(kobo)\\s(ereader|touch)/i.test(t) ? \"Kobo\" : new RegExp(Ws, \"i\").test(t) ? Ws : /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\\))/i.test(t) || /(kf[a-z]+)( bui|\\)).+silk\\//i.test(t) ? \"Kindle Fire\" : /(Android|ZTE)/i.test(t) ? !new RegExp(fs).test(t) || /(9138B|TB782B|Nexus [97]|pixel c|HUAWEISHT|BTV|noble nook|smart ultra 6)/i.test(t) ? /pixel[\\daxl ]{1,6}/i.test(t) && !/pixel c/i.test(t) || /(huaweimed-al00|tah-|APA|SM-G92|i980|zte|U304AA)/i.test(t) || /lmy47v/i.test(t) && !/QTAQZ3/i.test(t) ? gs : ms : gs : new RegExp(\"(pda|\" + fs + \")\", \"i\").test(t) ? Vs : new RegExp(_s, \"i\").test(t) && !new RegExp(_s + \" pc\", \"i\").test(t) ? Ks : \"\";\n}, dn = \"https?://(.*)\", vn = [\n    \"gclid\",\n    \"gclsrc\",\n    \"dclid\",\n    \"gbraid\",\n    \"wbraid\",\n    \"fbclid\",\n    \"msclkid\",\n    \"twclid\",\n    \"li_fat_id\",\n    \"igshid\",\n    \"ttclid\",\n    \"rdt_cid\",\n    \"epik\",\n    \"qclid\",\n    \"sccid\",\n    \"irclid\",\n    \"_kx\"\n], cn = K([\n    \"utm_source\",\n    \"utm_medium\",\n    \"utm_campaign\",\n    \"utm_content\",\n    \"utm_term\",\n    \"gad_source\",\n    \"mc_cid\"\n], vn), fn = \"<masked>\";\nfunction pn(t, i, e) {\n    if (!a) return {};\n    var r = i ? K([], vn, e || []) : [];\n    return gn($i(a.URL, r, fn), t);\n}\nfunction gn(t, i) {\n    var e = cn.concat(i || []), r = {};\n    return J(e, function(i) {\n        var e = Si(t, i);\n        r[i] = e || null;\n    }), r;\n}\nfunction _n(t) {\n    var i = function(t) {\n        return t ? 0 === t.search(dn + \"google.([^/?]*)\") ? \"google\" : 0 === t.search(dn + \"bing.com\") ? \"bing\" : 0 === t.search(dn + \"yahoo.com\") ? \"yahoo\" : 0 === t.search(dn + \"duckduckgo.com\") ? \"duckduckgo\" : null : null;\n    }(t), e = \"yahoo\" != i ? \"q\" : \"p\", r = {};\n    if (!O(i)) {\n        r.$search_engine = i;\n        var s = a ? Si(a.referrer, e) : \"\";\n        s.length && (r.ph_keyword = s);\n    }\n    return r;\n}\nfunction mn() {\n    return navigator.language || navigator.userLanguage;\n}\nfunction bn() {\n    return (null == a ? void 0 : a.referrer) || \"$direct\";\n}\nfunction wn(t, i) {\n    var e = t ? K([], vn, i || []) : [], r = null == l ? void 0 : l.href.substring(0, 1e3);\n    return {\n        r: bn().substring(0, 1e3),\n        u: r ? $i(r, e, fn) : void 0\n    };\n}\nfunction yn(t) {\n    var i, { r: e, u: r } = t, s = {\n        $referrer: e,\n        $referring_domain: null == e ? void 0 : \"$direct\" == e ? \"$direct\" : null == (i = wi(e)) ? void 0 : i.host\n    };\n    if (r) {\n        s.$current_url = r;\n        var n = wi(r);\n        s.$host = null == n ? void 0 : n.host, s.$pathname = null == n ? void 0 : n.pathname;\n        var o = gn(r);\n        V(s, o);\n    }\n    if (e) {\n        var a = _n(e);\n        V(s, a);\n    }\n    return s;\n}\nfunction Sn() {\n    try {\n        return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } catch (t) {\n        return;\n    }\n}\nfunction $n() {\n    try {\n        return (new Date).getTimezoneOffset();\n    } catch (t) {\n        return;\n    }\n}\nfunction kn(t, e) {\n    if (!v) return {};\n    var r, s, n, o = t ? K([], vn, e || []) : [], [a, u] = function(t) {\n        for(var i = 0; i < un.length; i++){\n            var [e, r] = un[i], s = e.exec(t), n = s && (E(r) ? r(s, t) : r);\n            if (n) return n;\n        }\n        return [\n            \"\",\n            \"\"\n        ];\n    }(v);\n    return V(Z({\n        $os: a,\n        $os_version: u,\n        $browser: on(v, navigator.vendor),\n        $device: hn(v),\n        $device_type: (s = v, n = hn(s), n === bs || n === ms || \"Kobo\" === n || \"Kindle Fire\" === n || n === Ks ? _s : n === Ls || n === zs || n === Ns || n === Gs ? \"Console\" : n === ys ? \"Wearable\" : n ? fs : \"Desktop\"),\n        $timezone: Sn(),\n        $timezone_offset: $n()\n    }), {\n        $current_url: $i(null == l ? void 0 : l.href, o, fn),\n        $host: null == l ? void 0 : l.host,\n        $pathname: null == l ? void 0 : l.pathname,\n        $raw_user_agent: v.length > 1e3 ? v.substring(0, 997) + \"...\" : v,\n        $browser_version: ln(v, navigator.vendor),\n        $browser_language: mn(),\n        $browser_language_prefix: (r = mn(), \"string\" == typeof r ? r.split(\"-\")[0] : void 0),\n        $screen_height: null == i ? void 0 : i.screen.height,\n        $screen_width: null == i ? void 0 : i.screen.width,\n        $viewport_height: null == i ? void 0 : i.innerHeight,\n        $viewport_width: null == i ? void 0 : i.innerWidth,\n        $lib: \"web\",\n        $lib_version: f.LIB_VERSION,\n        $insert_id: Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10),\n        $time: Date.now() / 1e3\n    });\n}\nvar xn, En = z(\"[FeatureFlags]\"), In = \"$active_feature_flags\", Pn = \"$override_feature_flags\", Rn = \"$feature_flag_payloads\", Tn = \"$override_feature_flag_payloads\", Mn = \"$feature_flag_request_id\", On = (t)=>{\n    var i = {};\n    for (var [e, r] of Y(t || {}))r && (i[e] = r);\n    return i;\n}, Cn = (t)=>{\n    var i = t.flags;\n    return i ? (t.featureFlags = Object.fromEntries(Object.keys(i).map((t)=>{\n        var e;\n        return [\n            t,\n            null !== (e = i[t].variant) && void 0 !== e ? e : i[t].enabled\n        ];\n    })), t.featureFlagPayloads = Object.fromEntries(Object.keys(i).filter((t)=>i[t].enabled).filter((t)=>{\n        var e;\n        return null == (e = i[t].metadata) ? void 0 : e.payload;\n    }).map((t)=>{\n        var e;\n        return [\n            t,\n            null == (e = i[t].metadata) ? void 0 : e.payload\n        ];\n    }))) : En.warn(\"Using an older version of the feature flags endpoint. Please upgrade your PostHog server to the latest version\"), t;\n};\n!function(t) {\n    t.FeatureFlags = \"feature_flags\", t.Recordings = \"recordings\";\n}(xn || (xn = {}));\nclass Fn {\n    constructor(t){\n        this.ne = !1, this.oe = !1, this.ae = !1, this.le = !1, this.ue = !1, this.he = !1, this.de = !1, this.N = t, this.featureFlagEventHandlers = [];\n    }\n    decide() {\n        if (this.N.config.__preview_remote_config) this.he = !0;\n        else {\n            var t = !this.ve && (this.N.config.advanced_disable_feature_flags || this.N.config.advanced_disable_feature_flags_on_first_load);\n            this.ce({\n                disableFlags: t\n            });\n        }\n    }\n    get hasLoadedFlags() {\n        return this.oe;\n    }\n    getFlags() {\n        return Object.keys(this.getFlagVariants());\n    }\n    getFlagsWithDetails() {\n        var t = this.N.get_property(Pt), i = this.N.get_property(Pn), e = this.N.get_property(Tn);\n        if (!e && !i) return t || {};\n        var r = V({}, t || {}), s = [\n            ...new Set([\n                ...Object.keys(e || {}),\n                ...Object.keys(i || {})\n            ])\n        ];\n        for (var n of s){\n            var o, a, l = r[n], u = null == i ? void 0 : i[n], h = R(u) ? null !== (o = null == l ? void 0 : l.enabled) && void 0 !== o && o : !!u, d = R(u) ? l.variant : \"string\" == typeof u ? u : void 0, v = null == e ? void 0 : e[n], c = B({}, l, {\n                enabled: h,\n                variant: h ? null != d ? d : null == l ? void 0 : l.variant : void 0\n            });\n            if (h !== (null == l ? void 0 : l.enabled) && (c.original_enabled = null == l ? void 0 : l.enabled), d !== (null == l ? void 0 : l.variant) && (c.original_variant = null == l ? void 0 : l.variant), v) c.metadata = B({}, null == l ? void 0 : l.metadata, {\n                payload: v,\n                original_payload: null == l || null == (a = l.metadata) ? void 0 : a.payload\n            });\n            r[n] = c;\n        }\n        return this.ne || (En.warn(\" Overriding feature flag details!\", {\n            flagDetails: t,\n            overriddenPayloads: e,\n            finalDetails: r\n        }), this.ne = !0), r;\n    }\n    getFlagVariants() {\n        var t = this.N.get_property(Et), i = this.N.get_property(Pn);\n        if (!i) return t || {};\n        for(var e = V({}, t), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.ne || (En.warn(\" Overriding feature flags!\", {\n            enabledFlags: t,\n            overriddenFlags: i,\n            finalFlags: e\n        }), this.ne = !0), e;\n    }\n    getFlagPayloads() {\n        var t = this.N.get_property(Rn), i = this.N.get_property(Tn);\n        if (!i) return t || {};\n        for(var e = V({}, t || {}), r = Object.keys(i), s = 0; s < r.length; s++)e[r[s]] = i[r[s]];\n        return this.ne || (En.warn(\" Overriding feature flag payloads!\", {\n            flagPayloads: t,\n            overriddenPayloads: i,\n            finalPayloads: e\n        }), this.ne = !0), e;\n    }\n    reloadFeatureFlags() {\n        this.le || this.N.config.advanced_disable_feature_flags || this.ve || (this.ve = setTimeout(()=>{\n            this.ce();\n        }, 5));\n    }\n    fe() {\n        clearTimeout(this.ve), this.ve = void 0;\n    }\n    ensureFlagsLoaded() {\n        this.oe || this.ae || this.ve || this.reloadFeatureFlags();\n    }\n    setAnonymousDistinctId(t) {\n        this.$anon_distinct_id = t;\n    }\n    setReloadingPaused(t) {\n        this.le = t;\n    }\n    ce(i) {\n        var e;\n        if (this.fe(), !this.N.config.advanced_disable_decide) if (this.ae) this.ue = !0;\n        else {\n            var r = {\n                token: this.N.config.token,\n                distinct_id: this.N.get_distinct_id(),\n                groups: this.N.getGroups(),\n                $anon_distinct_id: this.$anon_distinct_id,\n                person_properties: B({}, (null == (e = this.N.persistence) ? void 0 : e.get_initial_props()) || {}, this.N.get_property(Rt) || {}),\n                group_properties: this.N.get_property(Tt)\n            };\n            (null != i && i.disableFlags || this.N.config.advanced_disable_feature_flags) && (r.disable_flags = !0);\n            var s = this.N.config.__preview_flags_v2 && this.N.config.__preview_remote_config;\n            s && (r.timezone = Sn()), this.ae = !0, this.N.pe({\n                method: \"POST\",\n                url: this.N.requestRouter.endpointFor(\"api\", s ? \"/flags/?v=2\" : \"/decide/?v=4\"),\n                data: r,\n                compression: this.N.config.disable_compression ? void 0 : t.Base64,\n                timeout: this.N.config.feature_flag_request_timeout_ms,\n                callback: (t)=>{\n                    var i, e, s, n = !0;\n                    (200 === t.statusCode && (this.ue || (this.$anon_distinct_id = void 0), n = !1), this.ae = !1, this.he) || (this.he = !0, this.N.ge(null !== (s = t.json) && void 0 !== s ? s : {}));\n                    r.disable_flags && !this.ue || (this.de = !n, t.json && null != (i = t.json.quotaLimited) && i.includes(xn.FeatureFlags) ? En.warn(\"You have hit your feature flags quota limit, and will not be able to load feature flags until the quota is reset.  Please visit https://posthog.com/docs/billing/limits-alerts to learn more.\") : (this.receivedFeatureFlags(null !== (e = t.json) && void 0 !== e ? e : {}, n), this.ue && (this.ue = !1, this.ce())));\n                }\n            });\n        }\n    }\n    getFeatureFlag(t, i) {\n        if (void 0 === i && (i = {}), this.oe || this.getFlags() && this.getFlags().length > 0) {\n            var e = this.getFlagVariants()[t], r = \"\" + e, s = this.N.get_property(Mn) || void 0, n = this.N.get_property(Ct) || {};\n            if ((i.send_event || !(\"send_event\" in i)) && (!(t in n) || !n[t].includes(r))) {\n                var o, a, l, u, h, d, v, c, f, p, g;\n                x(n[t]) ? n[t].push(r) : n[t] = [\n                    r\n                ], null == (o = this.N.persistence) || o.register({\n                    [Ct]: n\n                });\n                var _ = this.getFeatureFlagDetails(t), m = {\n                    $feature_flag: t,\n                    $feature_flag_response: e,\n                    $feature_flag_payload: this.getFeatureFlagPayload(t) || null,\n                    $feature_flag_request_id: s,\n                    $feature_flag_bootstrapped_response: (null == (a = this.N.config.bootstrap) || null == (l = a.featureFlags) ? void 0 : l[t]) || null,\n                    $feature_flag_bootstrapped_payload: (null == (u = this.N.config.bootstrap) || null == (h = u.featureFlagPayloads) ? void 0 : h[t]) || null,\n                    $used_bootstrap_value: !this.de\n                };\n                R(null == _ || null == (d = _.metadata) ? void 0 : d.version) || (m.$feature_flag_version = _.metadata.version);\n                var b, w = null !== (v = null == _ || null == (c = _.reason) ? void 0 : c.description) && void 0 !== v ? v : null == _ || null == (f = _.reason) ? void 0 : f.code;\n                if (w && (m.$feature_flag_reason = w), null != _ && null != (p = _.metadata) && p.id && (m.$feature_flag_id = _.metadata.id), R(null == _ ? void 0 : _.original_variant) && R(null == _ ? void 0 : _.original_enabled) || (m.$feature_flag_original_response = R(_.original_variant) ? _.original_enabled : _.original_variant), null != _ && null != (g = _.metadata) && g.original_payload) m.$feature_flag_original_payload = null == _ || null == (b = _.metadata) ? void 0 : b.original_payload;\n                this.N.capture(\"$feature_flag_called\", m);\n            }\n            return e;\n        }\n        En.warn('getFeatureFlag for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    getFeatureFlagDetails(t) {\n        return this.getFlagsWithDetails()[t];\n    }\n    getFeatureFlagPayload(t) {\n        return this.getFlagPayloads()[t];\n    }\n    getRemoteConfigPayload(i, e) {\n        var r = this.N.config.token;\n        this.N.pe({\n            method: \"POST\",\n            url: this.N.requestRouter.endpointFor(\"api\", \"/decide/?v=4\"),\n            data: {\n                distinct_id: this.N.get_distinct_id(),\n                token: r\n            },\n            compression: this.N.config.disable_compression ? void 0 : t.Base64,\n            timeout: this.N.config.feature_flag_request_timeout_ms,\n            callback: (t)=>{\n                var r, s = null == (r = t.json) ? void 0 : r.featureFlagPayloads;\n                e((null == s ? void 0 : s[i]) || void 0);\n            }\n        });\n    }\n    isFeatureEnabled(t, i) {\n        if (void 0 === i && (i = {}), this.oe || this.getFlags() && this.getFlags().length > 0) return !!this.getFeatureFlag(t, i);\n        En.warn('isFeatureEnabled for key \"' + t + \"\\\" failed. Feature flags didn't load in time.\");\n    }\n    addFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers.push(t);\n    }\n    removeFeatureFlagsHandler(t) {\n        this.featureFlagEventHandlers = this.featureFlagEventHandlers.filter((i)=>i !== t);\n    }\n    receivedFeatureFlags(t, i) {\n        if (this.N.persistence) {\n            this.oe = !0;\n            var e = this.getFlagVariants(), r = this.getFlagPayloads(), s = this.getFlagsWithDetails();\n            !function(t, i, e, r, s) {\n                void 0 === e && (e = {}), void 0 === r && (r = {}), void 0 === s && (s = {});\n                var n = Cn(t), o = n.flags, a = n.featureFlags, l = n.featureFlagPayloads;\n                if (a) {\n                    var u = t.requestId;\n                    if (x(a)) {\n                        En.warn(\"v1 of the feature flags endpoint is deprecated. Please use the latest version.\");\n                        var h = {};\n                        if (a) for(var d = 0; d < a.length; d++)h[a[d]] = !0;\n                        i && i.register({\n                            [In]: a,\n                            [Et]: h\n                        });\n                    } else {\n                        var v = a, c = l, f = o;\n                        t.errorsWhileComputingFlags && (v = B({}, e, v), c = B({}, r, c), f = B({}, s, f)), i && i.register(B({\n                            [In]: Object.keys(On(v)),\n                            [Et]: v || {},\n                            [Rn]: c || {},\n                            [Pt]: f || {}\n                        }, u ? {\n                            [Mn]: u\n                        } : {}));\n                    }\n                }\n            }(t, this.N.persistence, e, r, s), this._e(i);\n        }\n    }\n    override(t, i) {\n        void 0 === i && (i = !1), En.warn(\"override is deprecated. Please use overrideFeatureFlags instead.\"), this.overrideFeatureFlags({\n            flags: t,\n            suppressWarning: i\n        });\n    }\n    overrideFeatureFlags(t) {\n        if (!this.N.__loaded || !this.N.persistence) return En.uninitializedWarning(\"posthog.featureFlags.overrideFeatureFlags\");\n        if (!1 === t) return this.N.persistence.unregister(Pn), this.N.persistence.unregister(Tn), void this._e();\n        if (t && \"object\" == typeof t && (\"flags\" in t || \"payloads\" in t)) {\n            var i, e = t;\n            if (this.ne = Boolean(null !== (i = e.suppressWarning) && void 0 !== i && i), \"flags\" in e) {\n                if (!1 === e.flags) this.N.persistence.unregister(Pn);\n                else if (e.flags) if (x(e.flags)) {\n                    for(var r = {}, s = 0; s < e.flags.length; s++)r[e.flags[s]] = !0;\n                    this.N.persistence.register({\n                        [Pn]: r\n                    });\n                } else this.N.persistence.register({\n                    [Pn]: e.flags\n                });\n            }\n            return \"payloads\" in e && (!1 === e.payloads ? this.N.persistence.unregister(Tn) : e.payloads && this.N.persistence.register({\n                [Tn]: e.payloads\n            })), void this._e();\n        }\n        this._e();\n    }\n    onFeatureFlags(t) {\n        if (this.addFeatureFlagsHandler(t), this.oe) {\n            var { flags: i, flagVariants: e } = this.me();\n            t(i, e);\n        }\n        return ()=>this.removeFeatureFlagsHandler(t);\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        var e, r = (this.N.get_property(It) || []).find((i)=>i.flagKey === t), s = {\n            [\"$feature_enrollment/\" + t]: i\n        }, n = {\n            $feature_flag: t,\n            $feature_enrollment: i,\n            $set: s\n        };\n        r && (n.$early_access_feature_name = r.name), this.N.capture(\"$feature_enrollment_update\", n), this.setPersonPropertiesForFlags(s, !1);\n        var o = B({}, this.getFlagVariants(), {\n            [t]: i\n        });\n        null == (e = this.N.persistence) || e.register({\n            [In]: Object.keys(On(o)),\n            [Et]: o\n        }), this._e();\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        void 0 === i && (i = !1);\n        var r = this.N.get_property(It), s = e ? \"&\" + e.map((t)=>\"stage=\" + t).join(\"&\") : \"\";\n        if (r && !i) return t(r);\n        this.N.pe({\n            url: this.N.requestRouter.endpointFor(\"api\", \"/api/early_access_features/?token=\" + this.N.config.token + s),\n            method: \"GET\",\n            callback: (i)=>{\n                var e;\n                if (i.json) {\n                    var r = i.json.earlyAccessFeatures;\n                    return null == (e = this.N.persistence) || e.register({\n                        [It]: r\n                    }), t(r);\n                }\n            }\n        });\n    }\n    me() {\n        var t = this.getFlags(), i = this.getFlagVariants();\n        return {\n            flags: t.filter((t)=>i[t]),\n            flagVariants: Object.keys(i).filter((t)=>i[t]).reduce((t, e)=>(t[e] = i[e], t), {})\n        };\n    }\n    _e(t) {\n        var { flags: i, flagVariants: e } = this.me();\n        this.featureFlagEventHandlers.forEach((r)=>r(i, e, {\n                errorsLoading: t\n            }));\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this.N.get_property(Rt) || {};\n        this.N.register({\n            [Rt]: B({}, e, t)\n        }), i && this.N.reloadFeatureFlags();\n    }\n    resetPersonPropertiesForFlags() {\n        this.N.unregister(Rt);\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0);\n        var e = this.N.get_property(Tt) || {};\n        0 !== Object.keys(e).length && Object.keys(e).forEach((i)=>{\n            e[i] = B({}, e[i], t[i]), delete t[i];\n        }), this.N.register({\n            [Tt]: B({}, e, t)\n        }), i && this.N.reloadFeatureFlags();\n    }\n    resetGroupPropertiesForFlags(t) {\n        if (t) {\n            var i = this.N.get_property(Tt) || {};\n            this.N.register({\n                [Tt]: B({}, i, {\n                    [t]: {}\n                })\n            });\n        } else this.N.unregister(Tt);\n    }\n}\nvar An = [\n    \"cookie\",\n    \"localstorage\",\n    \"localstorage+cookie\",\n    \"sessionstorage\",\n    \"memory\"\n];\nclass Dn {\n    constructor(t){\n        this.S = t, this.props = {}, this.be = !1, this.we = ((t)=>{\n            var i = \"\";\n            return t.token && (i = t.token.replace(/\\+/g, \"PL\").replace(/\\//g, \"SL\").replace(/=/g, \"EQ\")), t.persistence_name ? \"ph_\" + t.persistence_name : \"ph_\" + i + \"_posthog\";\n        })(t), this.B = this.ye(t), this.load(), t.debug && N.info(\"Persistence loaded\", t.persistence, B({}, this.props)), this.update_config(t, t), this.save();\n    }\n    ye(t) {\n        -1 === An.indexOf(t.persistence.toLowerCase()) && (N.critical(\"Unknown persistence type \" + t.persistence + \"; falling back to localStorage+cookie\"), t.persistence = \"localStorage+cookie\");\n        var i = t.persistence.toLowerCase();\n        return \"localstorage\" === i && Gi.C() ? Gi : \"localstorage+cookie\" === i && Vi.C() ? Vi : \"sessionstorage\" === i && Qi.C() ? Qi : \"memory\" === i ? Yi : \"cookie\" === i ? Hi : Vi.C() ? Vi : Hi;\n    }\n    properties() {\n        var t = {};\n        return J(this.props, function(i, e) {\n            if (e === Et && I(i)) for(var r = Object.keys(i), s = 0; s < r.length; s++)t[\"$feature/\" + r[s]] = i[r[s]];\n            else a = e, l = !1, (O(o = Bt) ? l : n && o.indexOf === n ? -1 != o.indexOf(a) : (J(o, function(t) {\n                if (l || (l = t === a)) return W;\n            }), l)) || (t[e] = i);\n            var o, a, l;\n        }), t;\n    }\n    load() {\n        if (!this.Se) {\n            var t = this.B.D(this.we);\n            t && (this.props = V({}, t));\n        }\n    }\n    save() {\n        this.Se || this.B.j(this.we, this.props, this.$e, this.ke, this.xe, this.S.debug);\n    }\n    remove() {\n        this.B.L(this.we, !1), this.B.L(this.we, !0);\n    }\n    clear() {\n        this.remove(), this.props = {};\n    }\n    register_once(t, i, e) {\n        if (I(t)) {\n            R(i) && (i = \"None\"), this.$e = R(e) ? this.Ee : e;\n            var r = !1;\n            if (J(t, (t, e)=>{\n                this.props.hasOwnProperty(e) && this.props[e] !== i || (this.props[e] = t, r = !0);\n            }), r) return this.save(), !0;\n        }\n        return !1;\n    }\n    register(t, i) {\n        if (I(t)) {\n            this.$e = R(i) ? this.Ee : i;\n            var e = !1;\n            if (J(t, (i, r)=>{\n                t.hasOwnProperty(r) && this.props[r] !== i && (this.props[r] = i, e = !0);\n            }), e) return this.save(), !0;\n        }\n        return !1;\n    }\n    unregister(t) {\n        t in this.props && (delete this.props[t], this.save());\n    }\n    update_campaign_params() {\n        if (!this.be) {\n            var t = pn(this.S.custom_campaign_params, this.S.mask_personal_data_properties, this.S.custom_personal_data_properties);\n            P(Z(t)) || this.register(t), this.be = !0;\n        }\n    }\n    update_search_keyword() {\n        var t;\n        this.register((t = null == a ? void 0 : a.referrer) ? _n(t) : {});\n    }\n    update_referrer_info() {\n        var t;\n        this.register_once({\n            $referrer: bn(),\n            $referring_domain: null != a && a.referrer && (null == (t = wi(a.referrer)) ? void 0 : t.host) || \"$direct\"\n        }, void 0);\n    }\n    set_initial_person_info() {\n        this.props[jt] || this.props[Lt] || this.register_once({\n            [Nt]: wn(this.S.mask_personal_data_properties, this.S.custom_personal_data_properties)\n        }, void 0);\n    }\n    get_initial_props() {\n        var t = {};\n        J([\n            Lt,\n            jt\n        ], (i)=>{\n            var e = this.props[i];\n            e && J(e, function(i, e) {\n                t[\"$initial_\" + w(e)] = i;\n            });\n        });\n        var i, e, r = this.props[Nt];\n        if (r) {\n            var s = (i = yn(r), e = {}, J(i, function(t, i) {\n                e[\"$initial_\" + w(i)] = t;\n            }), e);\n            V(t, s);\n        }\n        return t;\n    }\n    safe_merge(t) {\n        return J(this.props, function(i, e) {\n            e in t || (t[e] = i);\n        }), t;\n    }\n    update_config(t, i) {\n        if (this.Ee = this.$e = t.cookie_expiration, this.set_disabled(t.disable_persistence), this.set_cross_subdomain(t.cross_subdomain_cookie), this.set_secure(t.secure_cookie), t.persistence !== i.persistence) {\n            var e = this.ye(t), r = this.props;\n            this.clear(), this.B = e, this.props = r, this.save();\n        }\n    }\n    set_disabled(t) {\n        this.Se = t, this.Se ? this.remove() : this.save();\n    }\n    set_cross_subdomain(t) {\n        t !== this.ke && (this.ke = t, this.remove(), this.save());\n    }\n    set_secure(t) {\n        t !== this.xe && (this.xe = t, this.remove(), this.save());\n    }\n    set_event_timer(t, i) {\n        var e = this.props[at] || {};\n        e[t] = i, this.props[at] = e, this.save();\n    }\n    remove_event_timer(t) {\n        var i = (this.props[at] || {})[t];\n        return R(i) || (delete this.props[at][t], this.save()), i;\n    }\n    get_property(t) {\n        return this.props[t];\n    }\n    set_property(t, i) {\n        this.props[t] = i, this.save();\n    }\n}\nclass jn {\n    constructor(){\n        this.Ie = {}, this.Ie = {};\n    }\n    on(t, i) {\n        return this.Ie[t] || (this.Ie[t] = []), this.Ie[t].push(i), ()=>{\n            this.Ie[t] = this.Ie[t].filter((t)=>t !== i);\n        };\n    }\n    emit(t, i) {\n        for (var e of this.Ie[t] || [])e(i);\n        for (var r of this.Ie[\"*\"] || [])r(t, i);\n    }\n}\nvar Ln = function(t, i) {\n    if (!function(t) {\n        try {\n            new RegExp(t);\n        } catch (t) {\n            return !1;\n        }\n        return !0;\n    }(i)) return !1;\n    try {\n        return new RegExp(i).test(t);\n    } catch (t) {\n        return !1;\n    }\n};\nclass Nn {\n    constructor(t){\n        this.Pe = new jn, this.Re = (t, i)=>this.Te(t, i) && this.Me(t, i) && this.Oe(t, i), this.Te = (t, i)=>null == i || !i.event || (null == t ? void 0 : t.event) === (null == i ? void 0 : i.event), this.N = t, this.Ce = new Set, this.Fe = new Set;\n    }\n    init() {\n        var t;\n        if (!R(null == (t = this.N) ? void 0 : t.Ae)) {\n            var i;\n            null == (i = this.N) || i.Ae((t, i)=>{\n                this.on(t, i);\n            });\n        }\n    }\n    register(t) {\n        var i, e;\n        if (!R(null == (i = this.N) ? void 0 : i.Ae) && (t.forEach((t)=>{\n            var i, e;\n            null == (i = this.Fe) || i.add(t), null == (e = t.steps) || e.forEach((t)=>{\n                var i;\n                null == (i = this.Ce) || i.add((null == t ? void 0 : t.event) || \"\");\n            });\n        }), null != (e = this.N) && e.autocapture)) {\n            var r, s = new Set;\n            t.forEach((t)=>{\n                var i;\n                null == (i = t.steps) || i.forEach((t)=>{\n                    null != t && t.selector && s.add(null == t ? void 0 : t.selector);\n                });\n            }), null == (r = this.N) || r.autocapture.setElementSelectors(s);\n        }\n    }\n    on(t, i) {\n        var e;\n        null != i && 0 != t.length && (this.Ce.has(t) || this.Ce.has(null == i ? void 0 : i.event)) && this.Fe && (null == (e = this.Fe) ? void 0 : e.size) > 0 && this.Fe.forEach((t)=>{\n            this.De(i, t) && this.Pe.emit(\"actionCaptured\", t.name);\n        });\n    }\n    je(t) {\n        this.onAction(\"actionCaptured\", (i)=>t(i));\n    }\n    De(t, i) {\n        if (null == (null == i ? void 0 : i.steps)) return !1;\n        for (var e of i.steps)if (this.Re(t, e)) return !0;\n        return !1;\n    }\n    onAction(t, i) {\n        return this.Pe.on(t, i);\n    }\n    Me(t, i) {\n        if (null != i && i.url) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$current_url;\n            if (!r || \"string\" != typeof r) return !1;\n            if (!Nn.Le(r, null == i ? void 0 : i.url, (null == i ? void 0 : i.url_matching) || \"contains\")) return !1;\n        }\n        return !0;\n    }\n    static Le(t, e, r) {\n        switch(r){\n            case \"regex\":\n                return !!i && Ln(t, e);\n            case \"exact\":\n                return e === t;\n            case \"contains\":\n                var s = Nn.Ne(e).replace(/_/g, \".\").replace(/%/g, \".*\");\n                return Ln(t, s);\n            default:\n                return !1;\n        }\n    }\n    static Ne(t) {\n        return t.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\").replace(/-/g, \"\\\\x2d\");\n    }\n    Oe(t, i) {\n        if ((null != i && i.href || null != i && i.tag_name || null != i && i.text) && !this.ze(t).some((t)=>!(null != i && i.href && !Nn.Le(t.href || \"\", null == i ? void 0 : i.href, (null == i ? void 0 : i.href_matching) || \"exact\")) && (null == i || !i.tag_name || t.tag_name === (null == i ? void 0 : i.tag_name)) && !(null != i && i.text && !Nn.Le(t.text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\") && !Nn.Le(t.$el_text || \"\", null == i ? void 0 : i.text, (null == i ? void 0 : i.text_matching) || \"exact\")))) return !1;\n        if (null != i && i.selector) {\n            var e, r = null == t || null == (e = t.properties) ? void 0 : e.$element_selectors;\n            if (!r) return !1;\n            if (!r.includes(null == i ? void 0 : i.selector)) return !1;\n        }\n        return !0;\n    }\n    ze(t) {\n        return null == (null == t ? void 0 : t.properties.$elements) ? [] : null == t ? void 0 : t.properties.$elements;\n    }\n}\nvar zn = z(\"[Surveys]\");\nclass Un {\n    constructor(t){\n        this.N = t, this.Ue = new Map, this.qe = new Map;\n    }\n    register(t) {\n        var i;\n        R(null == (i = this.N) ? void 0 : i.Ae) || (this.Be(t), this.He(t));\n    }\n    He(t) {\n        var i = t.filter((t)=>{\n            var i, e, r, s;\n            return (null == (i = t.conditions) ? void 0 : i.actions) && (null == (e = t.conditions) || null == (r = e.actions) || null == (s = r.values) ? void 0 : s.length) > 0;\n        });\n        if (0 !== i.length) {\n            if (null == this.We) {\n                this.We = new Nn(this.N), this.We.init();\n                this.We.je((t)=>{\n                    this.onAction(t);\n                });\n            }\n            i.forEach((t)=>{\n                var i, e, r, s, n, o, a, l, u, h;\n                t.conditions && null != (i = t.conditions) && i.actions && null != (e = t.conditions) && null != (r = e.actions) && r.values && (null == (s = t.conditions) || null == (n = s.actions) || null == (o = n.values) ? void 0 : o.length) > 0 && (null == (a = this.We) || a.register(t.conditions.actions.values), null == (l = t.conditions) || null == (u = l.actions) || null == (h = u.values) || h.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.qe.get(i.name);\n                        e && e.push(t.id), this.qe.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                }));\n            });\n        }\n    }\n    Be(t) {\n        var i;\n        if (0 !== t.filter((t)=>{\n            var i, e, r, s;\n            return (null == (i = t.conditions) ? void 0 : i.events) && (null == (e = t.conditions) || null == (r = e.events) || null == (s = r.values) ? void 0 : s.length) > 0;\n        }).length) {\n            null == (i = this.N) || i.Ae((t, i)=>{\n                this.onEvent(t, i);\n            }), t.forEach((t)=>{\n                var i, e, r;\n                null == (i = t.conditions) || null == (e = i.events) || null == (r = e.values) || r.forEach((i)=>{\n                    if (i && i.name) {\n                        var e = this.Ue.get(i.name);\n                        e && e.push(t.id), this.Ue.set(i.name, e || [\n                            t.id\n                        ]);\n                    }\n                });\n            });\n        }\n    }\n    onEvent(t, i) {\n        var e, r, s = (null == (e = this.N) || null == (r = e.persistence) ? void 0 : r.props[Ot]) || [];\n        if (\"survey shown\" === t && i && s.length > 0) {\n            var n;\n            zn.info(\"survey event matched, removing survey from activated surveys\", {\n                event: t,\n                eventPayload: i,\n                existingActivatedSurveys: s\n            });\n            var o = null == i || null == (n = i.properties) ? void 0 : n.$survey_id;\n            if (o) {\n                var a = s.indexOf(o);\n                a >= 0 && (s.splice(a, 1), this.Ge(s));\n            }\n        } else this.Ue.has(t) && (zn.info(\"survey event matched, updating activated surveys\", {\n            event: t,\n            surveys: this.Ue.get(t)\n        }), this.Ge(s.concat(this.Ue.get(t) || [])));\n    }\n    onAction(t) {\n        var i, e, r = (null == (i = this.N) || null == (e = i.persistence) ? void 0 : e.props[Ot]) || [];\n        this.qe.has(t) && this.Ge(r.concat(this.qe.get(t) || []));\n    }\n    Ge(t) {\n        var i, e;\n        null == (i = this.N) || null == (e = i.persistence) || e.register({\n            [Ot]: [\n                ...new Set(t)\n            ]\n        });\n    }\n    getSurveys() {\n        var t, i, e = null == (t = this.N) || null == (i = t.persistence) ? void 0 : i.props[Ot];\n        return e || [];\n    }\n    getEventToSurveys() {\n        return this.Ue;\n    }\n    Je() {\n        return this.We;\n    }\n}\nclass qn {\n    constructor(t){\n        this.Ve = null, this.Ke = !1, this.Ye = !1, this.Xe = [], this.N = t, this.Qe = null;\n    }\n    onRemoteConfig(t) {\n        var i = t.surveys;\n        if (C(i)) return zn.warn(\"Decide not loaded yet. Not loading surveys.\");\n        var e = x(i);\n        this.Ze = e ? i.length > 0 : i, zn.info(\"decide response received, hasSurveys: \" + this.Ze), this.Ze && this.loadIfEnabled();\n    }\n    reset() {\n        localStorage.removeItem(\"lastSeenSurveyDate\");\n        for(var t = [], i = 0; i < localStorage.length; i++){\n            var e = localStorage.key(i);\n            null != e && e.startsWith(\"seenSurvey_\") && t.push(e);\n        }\n        t.forEach((t)=>localStorage.removeItem(t));\n    }\n    loadIfEnabled() {\n        if (!this.Ve) if (this.Ye) zn.info(\"Already initializing surveys, skipping...\");\n        else if (this.N.config.disable_surveys) zn.info(\"Disabled. Not loading surveys.\");\n        else if (this.Ze) {\n            var t = null == c ? void 0 : c.__PosthogExtensions__;\n            if (t) {\n                this.Ye = !0;\n                try {\n                    var i = t.generateSurveys;\n                    if (i) return void this.tr(i);\n                    var e = t.loadExternalDependency;\n                    if (!e) return void this.ir(\"PostHog loadExternalDependency extension not found.\");\n                    e(this.N, \"surveys\", (i)=>{\n                        i || !t.generateSurveys ? this.ir(\"Could not load surveys script\", i) : this.tr(t.generateSurveys);\n                    });\n                } catch (t) {\n                    throw this.ir(\"Error initializing surveys\", t), t;\n                } finally{\n                    this.Ye = !1;\n                }\n            } else zn.error(\"PostHog Extensions not found.\");\n        } else zn.info(\"No surveys to load.\");\n    }\n    tr(t) {\n        this.Ve = t(this.N), this.Qe = new Un(this.N), zn.info(\"Surveys loaded successfully\"), this.er({\n            isLoaded: !0\n        });\n    }\n    ir(t, i) {\n        zn.error(t, i), this.er({\n            isLoaded: !1,\n            error: t\n        });\n    }\n    onSurveysLoaded(t) {\n        return this.Xe.push(t), this.Ve && this.er({\n            isLoaded: !0\n        }), ()=>{\n            this.Xe = this.Xe.filter((i)=>i !== t);\n        };\n    }\n    getSurveys(t, i) {\n        if (void 0 === i && (i = !1), this.N.config.disable_surveys) return zn.info(\"Disabled. Not loading surveys.\"), t([]);\n        var e = this.N.get_property(Mt);\n        if (e && !i) return t(e, {\n            isLoaded: !0\n        });\n        if (this.Ke) return t([], {\n            isLoaded: !1,\n            error: \"Surveys are already being loaded\"\n        });\n        try {\n            this.Ke = !0, this.N.pe({\n                url: this.N.requestRouter.endpointFor(\"api\", \"/api/surveys/?token=\" + this.N.config.token),\n                method: \"GET\",\n                timeout: this.N.config.surveys_request_timeout_ms,\n                callback: (i)=>{\n                    var e;\n                    this.Ke = !1;\n                    var r = i.statusCode;\n                    if (200 !== r || !i.json) {\n                        var s = \"Surveys API could not be loaded, status: \" + r;\n                        return zn.error(s), t([], {\n                            isLoaded: !1,\n                            error: s\n                        });\n                    }\n                    var n, o = i.json.surveys || [], a = o.filter((t)=>(function(t) {\n                            return !(!t.start_date || t.end_date);\n                        })(t) && (function(t) {\n                            var i, e, r;\n                            return !(null == (i = t.conditions) || null == (e = i.events) || null == (r = e.values) || !r.length);\n                        }(t) || function(t) {\n                            var i, e, r;\n                            return !(null == (i = t.conditions) || null == (e = i.actions) || null == (r = e.values) || !r.length);\n                        }(t)));\n                    a.length > 0 && (null == (n = this.Qe) || n.register(a));\n                    return null == (e = this.N.persistence) || e.register({\n                        [Mt]: o\n                    }), t(o, {\n                        isLoaded: !0\n                    });\n                }\n            });\n        } catch (t) {\n            throw this.Ke = !1, t;\n        }\n    }\n    er(t) {\n        for (var i of this.Xe)try {\n            t.isLoaded ? this.getSurveys(i) : i([], t);\n        } catch (t) {\n            zn.error(\"Error in survey callback\", t);\n        }\n    }\n    getActiveMatchingSurveys(t, i) {\n        if (void 0 === i && (i = !1), !C(this.Ve)) return this.Ve.getActiveMatchingSurveys(t, i);\n        zn.warn(\"init was not called\");\n    }\n    rr(t) {\n        var i = null;\n        return this.getSurveys((e)=>{\n            var r;\n            i = null !== (r = e.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n        }), i;\n    }\n    sr(t) {\n        if (C(this.Ve)) return {\n            eligible: !1,\n            reason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = \"string\" == typeof t ? this.rr(t) : t;\n        return i ? this.Ve.checkSurveyEligibility(i) : {\n            eligible: !1,\n            reason: \"Survey not found\"\n        };\n    }\n    canRenderSurvey(t) {\n        if (!C(this.Ve)) return zn.warn(\"init was not called\"), {\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        };\n        var i = this.sr(t);\n        return {\n            visible: i.eligible,\n            disabledReason: i.reason\n        };\n    }\n    canRenderSurveyAsync(t, i) {\n        return C(this.Ve) ? (zn.warn(\"init was not called\"), Promise.resolve({\n            visible: !1,\n            disabledReason: \"SDK is not enabled or survey functionality is not yet loaded\"\n        })) : new Promise((e)=>{\n            this.getSurveys((i)=>{\n                var r, s = null !== (r = i.find((i)=>i.id === t)) && void 0 !== r ? r : null;\n                if (s) {\n                    var n = this.sr(s);\n                    e({\n                        visible: n.eligible,\n                        disabledReason: n.reason\n                    });\n                } else e({\n                    visible: !1,\n                    disabledReason: \"Survey not found\"\n                });\n            }, i);\n        });\n    }\n    renderSurvey(t, i) {\n        if (C(this.Ve)) zn.warn(\"init was not called\");\n        else {\n            var e = this.rr(t), r = null == a ? void 0 : a.querySelector(i);\n            e ? r ? this.Ve.renderSurvey(e, r) : zn.warn(\"Survey element not found\") : zn.warn(\"Survey not found\");\n        }\n    }\n}\nvar Bn = z(\"[RateLimiter]\");\nclass Hn {\n    constructor(t){\n        var i, e;\n        this.serverLimits = {}, this.lastEventRateLimited = !1, this.checkForLimiting = (t)=>{\n            var i = t.text;\n            if (i && i.length) try {\n                (JSON.parse(i).quota_limited || []).forEach((t)=>{\n                    Bn.info((t || \"events\") + \" is quota limited.\"), this.serverLimits[t] = (new Date).getTime() + 6e4;\n                });\n            } catch (t) {\n                return void Bn.warn('could not rate limit - continuing. Error: \"' + (null == t ? void 0 : t.message) + '\"', {\n                    text: i\n                });\n            }\n        }, this.instance = t, this.captureEventsPerSecond = (null == (i = t.config.rate_limiting) ? void 0 : i.events_per_second) || 10, this.captureEventsBurstLimit = Math.max((null == (e = t.config.rate_limiting) ? void 0 : e.events_burst_limit) || 10 * this.captureEventsPerSecond, this.captureEventsPerSecond), this.lastEventRateLimited = this.clientRateLimitContext(!0).isRateLimited;\n    }\n    clientRateLimitContext(t) {\n        var i, e, r;\n        void 0 === t && (t = !1);\n        var s = (new Date).getTime(), n = null !== (i = null == (e = this.instance.persistence) ? void 0 : e.get_property(Dt)) && void 0 !== i ? i : {\n            tokens: this.captureEventsBurstLimit,\n            last: s\n        };\n        n.tokens += (s - n.last) / 1e3 * this.captureEventsPerSecond, n.last = s, n.tokens > this.captureEventsBurstLimit && (n.tokens = this.captureEventsBurstLimit);\n        var o = n.tokens < 1;\n        return o || t || (n.tokens = Math.max(0, n.tokens - 1)), !o || this.lastEventRateLimited || t || this.instance.capture(\"$$client_ingestion_warning\", {\n            $$client_ingestion_warning_message: \"posthog-js client rate limited. Config is set to \" + this.captureEventsPerSecond + \" events per second and \" + this.captureEventsBurstLimit + \" events burst limit.\"\n        }, {\n            skip_client_rate_limiting: !0\n        }), this.lastEventRateLimited = o, null == (r = this.instance.persistence) || r.set_property(Dt, n), {\n            isRateLimited: o,\n            remainingTokens: n.tokens\n        };\n    }\n    isServerRateLimited(t) {\n        var i = this.serverLimits[t || \"events\"] || !1;\n        return !1 !== i && (new Date).getTime() < i;\n    }\n}\nvar Wn = z(\"[RemoteConfig]\");\nclass Gn {\n    constructor(t){\n        this.N = t;\n    }\n    get remoteConfig() {\n        var t, i;\n        return null == (t = c._POSTHOG_REMOTE_CONFIG) || null == (i = t[this.N.config.token]) ? void 0 : i.config;\n    }\n    nr(t) {\n        var i, e;\n        null != (i = c.__PosthogExtensions__) && i.loadExternalDependency ? null == (e = c.__PosthogExtensions__) || null == e.loadExternalDependency || e.loadExternalDependency(this.N, \"remote-config\", ()=>t(this.remoteConfig)) : (Wn.error(\"PostHog Extensions not found. Cannot load remote config.\"), t());\n    }\n    ar(t) {\n        this.N.pe({\n            method: \"GET\",\n            url: this.N.requestRouter.endpointFor(\"assets\", \"/array/\" + this.N.config.token + \"/config\"),\n            callback: (i)=>{\n                t(i.json);\n            }\n        });\n    }\n    load() {\n        try {\n            if (this.remoteConfig) return Wn.info(\"Using preloaded remote config\", this.remoteConfig), void this.ge(this.remoteConfig);\n            if (this.N.config.advanced_disable_decide) return void Wn.warn(\"Remote config is disabled. Falling back to local config.\");\n            this.nr((t)=>{\n                if (!t) return Wn.info(\"No config found after loading remote JS config. Falling back to JSON.\"), void this.ar((t)=>{\n                    this.ge(t);\n                });\n                this.ge(t);\n            });\n        } catch (t) {\n            Wn.error(\"Error loading remote config\", t);\n        }\n    }\n    ge(t) {\n        t ? this.N.config.__preview_remote_config ? (this.N.ge(t), !1 !== t.hasFeatureFlags && this.N.featureFlags.ensureFlagsLoaded()) : Wn.info(\"__preview_remote_config is disabled. Logging config instead\", t) : Wn.error(\"Failed to fetch remote config from PostHog.\");\n    }\n}\nvar Jn = function(t) {\n    var i, e, r, s, n = \"\";\n    for(i = e = 0, r = (t = (t + \"\").replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\")).length, s = 0; s < r; s++){\n        var o = t.charCodeAt(s), a = null;\n        o < 128 ? e++ : a = o > 127 && o < 2048 ? String.fromCharCode(o >> 6 | 192, 63 & o | 128) : String.fromCharCode(o >> 12 | 224, o >> 6 & 63 | 128, 63 & o | 128), O(a) || (e > i && (n += t.substring(i, e)), n += a, i = e = s + 1);\n    }\n    return e > i && (n += t.substring(i, t.length)), n;\n}, Vn = !!h || !!u, Kn = \"text/plain\", Yn = (t, i)=>{\n    var [e, r] = t.split(\"?\"), s = B({}, i);\n    null == r || r.split(\"&\").forEach((t)=>{\n        var [i] = t.split(\"=\");\n        delete s[i];\n    });\n    var n = yi(s);\n    return e + \"?\" + (n = n ? (r ? r + \"&\" : \"\") + n : r);\n}, Xn = (t, i)=>JSON.stringify(t, (t, i)=>\"bigint\" == typeof i ? i.toString() : i, i), Qn = (i)=>{\n    var { data: e, compression: r } = i;\n    if (e) {\n        if (r === t.GZipJS) {\n            var s = Ar(Dr(Xn(e)), {\n                mtime: 0\n            }), n = new Blob([\n                s\n            ], {\n                type: Kn\n            });\n            return {\n                contentType: Kn,\n                body: n,\n                estimatedSize: n.size\n            };\n        }\n        if (r === t.Base64) {\n            var o = function(t) {\n                var i, e, r, s, n, o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\", a = 0, l = 0, u = \"\", h = [];\n                if (!t) return t;\n                t = Jn(t);\n                do {\n                    i = (n = t.charCodeAt(a++) << 16 | t.charCodeAt(a++) << 8 | t.charCodeAt(a++)) >> 18 & 63, e = n >> 12 & 63, r = n >> 6 & 63, s = 63 & n, h[l++] = o.charAt(i) + o.charAt(e) + o.charAt(r) + o.charAt(s);\n                }while (a < t.length);\n                switch(u = h.join(\"\"), t.length % 3){\n                    case 1:\n                        u = u.slice(0, -2) + \"==\";\n                        break;\n                    case 2:\n                        u = u.slice(0, -1) + \"=\";\n                }\n                return u;\n            }(Xn(e)), a = ((t)=>\"data=\" + encodeURIComponent(\"string\" == typeof t ? t : Xn(t)))(o);\n            return {\n                contentType: \"application/x-www-form-urlencoded\",\n                body: a,\n                estimatedSize: new Blob([\n                    a\n                ]).size\n            };\n        }\n        var l = Xn(e);\n        return {\n            contentType: \"application/json\",\n            body: l,\n            estimatedSize: new Blob([\n                l\n            ]).size\n        };\n    }\n}, Zn = [];\nu && Zn.push({\n    transport: \"fetch\",\n    method: (t)=>{\n        var i, e, { contentType: r, body: s, estimatedSize: n } = null !== (i = Qn(t)) && void 0 !== i ? i : {}, o = new Headers;\n        J(t.headers, function(t, i) {\n            o.append(i, t);\n        }), r && o.append(\"Content-Type\", r);\n        var a = t.url, l = null;\n        if (d) {\n            var h = new d;\n            l = {\n                signal: h.signal,\n                timeout: setTimeout(()=>h.abort(), t.timeout)\n            };\n        }\n        u(a, B({\n            method: (null == t ? void 0 : t.method) || \"GET\",\n            headers: o,\n            keepalive: \"POST\" === t.method && (n || 0) < 52428.8,\n            body: s,\n            signal: null == (e = l) ? void 0 : e.signal\n        }, t.fetchOptions)).then((i)=>i.text().then((e)=>{\n                var r = {\n                    statusCode: i.status,\n                    text: e\n                };\n                if (200 === i.status) try {\n                    r.json = JSON.parse(e);\n                } catch (t) {\n                    N.error(t);\n                }\n                null == t.callback || t.callback(r);\n            })).catch((i)=>{\n            N.error(i), null == t.callback || t.callback({\n                statusCode: 0,\n                text: i\n            });\n        }).finally(()=>l ? clearTimeout(l.timeout) : null);\n    }\n}), h && Zn.push({\n    transport: \"XHR\",\n    method: (t)=>{\n        var i, e = new h;\n        e.open(t.method || \"GET\", t.url, !0);\n        var { contentType: r, body: s } = null !== (i = Qn(t)) && void 0 !== i ? i : {};\n        J(t.headers, function(t, i) {\n            e.setRequestHeader(i, t);\n        }), r && e.setRequestHeader(\"Content-Type\", r), t.timeout && (e.timeout = t.timeout), e.withCredentials = !0, e.onreadystatechange = ()=>{\n            if (4 === e.readyState) {\n                var i = {\n                    statusCode: e.status,\n                    text: e.responseText\n                };\n                if (200 === e.status) try {\n                    i.json = JSON.parse(e.responseText);\n                } catch (t) {}\n                null == t.callback || t.callback(i);\n            }\n        }, e.send(s);\n    }\n}), null != o && o.sendBeacon && Zn.push({\n    transport: \"sendBeacon\",\n    method: (t)=>{\n        var i = Yn(t.url, {\n            beacon: \"1\"\n        });\n        try {\n            var e, { contentType: r, body: s } = null !== (e = Qn(t)) && void 0 !== e ? e : {}, n = \"string\" == typeof s ? new Blob([\n                s\n            ], {\n                type: r\n            }) : s;\n            o.sendBeacon(i, n);\n        } catch (t) {}\n    }\n});\nvar to = 3e3;\nclass io {\n    constructor(t, i){\n        this.lr = !0, this.ur = [], this.hr = Xe((null == i ? void 0 : i.flush_interval_ms) || to, 250, 5e3, \"flush interval\", to), this.dr = t;\n    }\n    enqueue(t) {\n        this.ur.push(t), this.vr || this.cr();\n    }\n    unload() {\n        this.pr();\n        var t = this.ur.length > 0 ? this.gr() : {}, i = Object.values(t);\n        [\n            ...i.filter((t)=>0 === t.url.indexOf(\"/e\")),\n            ...i.filter((t)=>0 !== t.url.indexOf(\"/e\"))\n        ].map((t)=>{\n            this.dr(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        });\n    }\n    enable() {\n        this.lr = !1, this.cr();\n    }\n    cr() {\n        var t = this;\n        this.lr || (this.vr = setTimeout(()=>{\n            if (this.pr(), this.ur.length > 0) {\n                var i = this.gr(), e = function(e) {\n                    var r = i[e], s = (new Date).getTime();\n                    r.data && x(r.data) && J(r.data, (t)=>{\n                        t.offset = Math.abs(t.timestamp - s), delete t.timestamp;\n                    }), t.dr(r);\n                };\n                for(var r in i)e(r);\n            }\n        }, this.hr));\n    }\n    pr() {\n        clearTimeout(this.vr), this.vr = void 0;\n    }\n    gr() {\n        var t = {};\n        return J(this.ur, (i)=>{\n            var e, r = i, s = (r ? r.batchKey : null) || r.url;\n            R(t[s]) && (t[s] = B({}, r, {\n                data: []\n            })), null == (e = t[s].data) || e.push(r.data);\n        }), this.ur = [], t;\n    }\n}\nvar eo = [\n    \"retriesPerformedSoFar\"\n];\nclass ro {\n    constructor(t){\n        this._r = !1, this.mr = 3e3, this.ur = [], this.N = t, this.ur = [], this.br = !0, !R(i) && \"onLine\" in i.navigator && (this.br = i.navigator.onLine, st(i, \"online\", ()=>{\n            this.br = !0, this.Ki();\n        }), st(i, \"offline\", ()=>{\n            this.br = !1;\n        }));\n    }\n    get length() {\n        return this.ur.length;\n    }\n    retriableRequest(t) {\n        var { retriesPerformedSoFar: i } = t, e = H(t, eo);\n        F(i) && i > 0 && (e.url = Yn(e.url, {\n            retry_count: i\n        })), this.N.pe(B({}, e, {\n            callback: (t)=>{\n                200 !== t.statusCode && (t.statusCode < 400 || t.statusCode >= 500) && (null != i ? i : 0) < 10 ? this.wr(B({\n                    retriesPerformedSoFar: i\n                }, e)) : null == e.callback || e.callback(t);\n            }\n        }));\n    }\n    wr(t) {\n        var i = t.retriesPerformedSoFar || 0;\n        t.retriesPerformedSoFar = i + 1;\n        var e = function(t) {\n            var i = 3e3 * Math.pow(2, t), e = i / 2, r = Math.min(18e5, i), s = (Math.random() - .5) * (r - e);\n            return Math.ceil(r + s);\n        }(i), r = Date.now() + e;\n        this.ur.push({\n            retryAt: r,\n            requestOptions: t\n        });\n        var s = \"Enqueued failed request for retry in \" + e;\n        navigator.onLine || (s += \" (Browser is offline)\"), N.warn(s), this._r || (this._r = !0, this.yr());\n    }\n    yr() {\n        this.Sr && clearTimeout(this.Sr), this.Sr = setTimeout(()=>{\n            this.br && this.ur.length > 0 && this.Ki(), this.yr();\n        }, this.mr);\n    }\n    Ki() {\n        var t = Date.now(), i = [], e = this.ur.filter((e)=>e.retryAt < t || (i.push(e), !1));\n        if (this.ur = i, e.length > 0) for (var { requestOptions: r } of e)this.retriableRequest(r);\n    }\n    unload() {\n        for (var { requestOptions: t } of (this.Sr && (clearTimeout(this.Sr), this.Sr = void 0), this.ur))try {\n            this.N.pe(B({}, t, {\n                transport: \"sendBeacon\"\n            }));\n        } catch (t) {\n            N.error(t);\n        }\n        this.ur = [];\n    }\n}\nclass so {\n    constructor(t){\n        this.$r = ()=>{\n            var t, i, e, r;\n            this.kr || (this.kr = {});\n            var s = this.scrollElement(), n = this.scrollY(), o = s ? Math.max(0, s.scrollHeight - s.clientHeight) : 0, a = n + ((null == s ? void 0 : s.clientHeight) || 0), l = (null == s ? void 0 : s.scrollHeight) || 0;\n            this.kr.lastScrollY = Math.ceil(n), this.kr.maxScrollY = Math.max(n, null !== (t = this.kr.maxScrollY) && void 0 !== t ? t : 0), this.kr.maxScrollHeight = Math.max(o, null !== (i = this.kr.maxScrollHeight) && void 0 !== i ? i : 0), this.kr.lastContentY = a, this.kr.maxContentY = Math.max(a, null !== (e = this.kr.maxContentY) && void 0 !== e ? e : 0), this.kr.maxContentHeight = Math.max(l, null !== (r = this.kr.maxContentHeight) && void 0 !== r ? r : 0);\n        }, this.N = t;\n    }\n    getContext() {\n        return this.kr;\n    }\n    resetContext() {\n        var t = this.kr;\n        return setTimeout(this.$r, 0), t;\n    }\n    startMeasuringScrollPosition() {\n        st(i, \"scroll\", this.$r, {\n            capture: !0\n        }), st(i, \"scrollend\", this.$r, {\n            capture: !0\n        }), st(i, \"resize\", this.$r);\n    }\n    scrollElement() {\n        if (!this.N.config.scroll_root_selector) return null == i ? void 0 : i.document.documentElement;\n        var t = x(this.N.config.scroll_root_selector) ? this.N.config.scroll_root_selector : [\n            this.N.config.scroll_root_selector\n        ];\n        for (var e of t){\n            var r = null == i ? void 0 : i.document.querySelector(e);\n            if (r) return r;\n        }\n    }\n    scrollY() {\n        if (this.N.config.scroll_root_selector) {\n            var t = this.scrollElement();\n            return t && t.scrollTop || 0;\n        }\n        return i && (i.scrollY || i.pageYOffset || i.document.documentElement.scrollTop) || 0;\n    }\n    scrollX() {\n        if (this.N.config.scroll_root_selector) {\n            var t = this.scrollElement();\n            return t && t.scrollLeft || 0;\n        }\n        return i && (i.scrollX || i.pageXOffset || i.document.documentElement.scrollLeft) || 0;\n    }\n}\nvar no = (t)=>wn(null == t ? void 0 : t.config.mask_personal_data_properties, null == t ? void 0 : t.config.custom_personal_data_properties);\nclass oo {\n    constructor(t, i, e, r){\n        this.Er = (t)=>{\n            var i = this.Ir();\n            if (!i || i.sessionId !== t) {\n                var e = {\n                    sessionId: t,\n                    props: this.Pr(this.N)\n                };\n                this.Rr.register({\n                    [At]: e\n                });\n            }\n        }, this.N = t, this.Tr = i, this.Rr = e, this.Pr = r || no, this.Tr.onSessionId(this.Er);\n    }\n    Ir() {\n        return this.Rr.props[At];\n    }\n    getSetOnceProps() {\n        var t, i = null == (t = this.Ir()) ? void 0 : t.props;\n        return i ? \"r\" in i ? yn(i) : {\n            $referring_domain: i.referringDomain,\n            $pathname: i.initialPathName,\n            utm_source: i.utm_source,\n            utm_campaign: i.utm_campaign,\n            utm_medium: i.utm_medium,\n            utm_content: i.utm_content,\n            utm_term: i.utm_term\n        } : {};\n    }\n    getSessionProps() {\n        var t = {};\n        return J(Z(this.getSetOnceProps()), (i, e)=>{\n            \"$current_url\" === e && (e = \"url\"), t[\"$session_entry_\" + w(e)] = i;\n        }), t;\n    }\n}\nvar ao = z(\"[SessionId]\");\nclass lo {\n    constructor(t, i, e){\n        var r;\n        if (this.Mr = [], !t.persistence) throw new Error(\"SessionIdManager requires a PostHogPersistence instance\");\n        if (t.config.__preview_experimental_cookieless_mode) throw new Error(\"SessionIdManager cannot be used with __preview_experimental_cookieless_mode\");\n        this.S = t.config, this.Rr = t.persistence, this.ri = void 0, this.jt = void 0, this._sessionStartTimestamp = null, this._sessionActivityTimestamp = null, this.Or = i || ji, this.Cr = e || ji;\n        var s = this.S.persistence_name || this.S.token, n = this.S.session_idle_timeout_seconds || 1800;\n        if (this._sessionTimeoutMs = 1e3 * Xe(n, 60, 36e3, \"session_idle_timeout_seconds\", 1800), t.register({\n            $configured_session_timeout_ms: this._sessionTimeoutMs\n        }), this.Fr(), this.Ar = \"ph_\" + s + \"_window_id\", this.Dr = \"ph_\" + s + \"_primary_window_exists\", this.jr()) {\n            var o = Qi.D(this.Ar), a = Qi.D(this.Dr);\n            o && !a ? this.ri = o : Qi.L(this.Ar), Qi.j(this.Dr, !0);\n        }\n        if (null != (r = this.S.bootstrap) && r.sessionID) try {\n            var l = ((t)=>{\n                var i = t.replace(/-/g, \"\");\n                if (32 !== i.length) throw new Error(\"Not a valid UUID\");\n                if (\"7\" !== i[12]) throw new Error(\"Not a UUIDv7\");\n                return parseInt(i.substring(0, 12), 16);\n            })(this.S.bootstrap.sessionID);\n            this.Lr(this.S.bootstrap.sessionID, (new Date).getTime(), l);\n        } catch (t) {\n            ao.error(\"Invalid sessionID in bootstrap\", t);\n        }\n        this.Nr();\n    }\n    get sessionTimeoutMs() {\n        return this._sessionTimeoutMs;\n    }\n    onSessionId(t) {\n        return R(this.Mr) && (this.Mr = []), this.Mr.push(t), this.jt && t(this.jt, this.ri), ()=>{\n            this.Mr = this.Mr.filter((i)=>i !== t);\n        };\n    }\n    jr() {\n        return \"memory\" !== this.S.persistence && !this.Rr.Se && Qi.C();\n    }\n    zr(t) {\n        t !== this.ri && (this.ri = t, this.jr() && Qi.j(this.Ar, t));\n    }\n    Ur() {\n        return this.ri ? this.ri : this.jr() ? Qi.D(this.Ar) : null;\n    }\n    Lr(t, i, e) {\n        t === this.jt && i === this._sessionActivityTimestamp && e === this._sessionStartTimestamp || (this._sessionStartTimestamp = e, this._sessionActivityTimestamp = i, this.jt = t, this.Rr.register({\n            [St]: [\n                i,\n                t,\n                e\n            ]\n        }));\n    }\n    qr() {\n        if (this.jt && this._sessionActivityTimestamp && this._sessionStartTimestamp) return [\n            this._sessionActivityTimestamp,\n            this.jt,\n            this._sessionStartTimestamp\n        ];\n        var t = this.Rr.props[St];\n        return x(t) && 2 === t.length && t.push(t[0]), t || [\n            0,\n            null,\n            0\n        ];\n    }\n    resetSessionId() {\n        this.Lr(null, null, null);\n    }\n    Nr() {\n        st(i, \"beforeunload\", ()=>{\n            this.jr() && Qi.L(this.Dr);\n        }, {\n            capture: !1\n        });\n    }\n    checkAndGetSessionAndWindowId(t, i) {\n        if (void 0 === t && (t = !1), void 0 === i && (i = null), this.S.__preview_experimental_cookieless_mode) throw new Error(\"checkAndGetSessionAndWindowId should not be called in __preview_experimental_cookieless_mode\");\n        var e = i || (new Date).getTime(), [r, s, n] = this.qr(), o = this.Ur(), a = F(n) && n > 0 && Math.abs(e - n) > 864e5, l = !1, u = !s, h = !t && Math.abs(e - r) > this.sessionTimeoutMs;\n        u || h || a ? (s = this.Or(), o = this.Cr(), ao.info(\"new session ID generated\", {\n            sessionId: s,\n            windowId: o,\n            changeReason: {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            }\n        }), n = e, l = !0) : o || (o = this.Cr(), l = !0);\n        var d = 0 === r || !t || a ? e : r, v = 0 === n ? (new Date).getTime() : n;\n        return this.zr(o), this.Lr(s, d, v), t || this.Fr(), l && this.Mr.forEach((t)=>t(s, o, l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0)), {\n            sessionId: s,\n            windowId: o,\n            sessionStartTimestamp: v,\n            changeReason: l ? {\n                noSessionId: u,\n                activityTimeout: h,\n                sessionPastMaximumLength: a\n            } : void 0,\n            lastActivityTimestamp: r\n        };\n    }\n    Fr() {\n        clearTimeout(this.Br), this.Br = setTimeout(()=>{\n            this.resetSessionId();\n        }, 1.1 * this.sessionTimeoutMs);\n    }\n}\nvar uo = [\n    \"$set_once\",\n    \"$set\"\n], ho = z(\"[SiteApps]\");\nclass vo {\n    constructor(t){\n        this.N = t, this.Hr = [], this.apps = {};\n    }\n    get isEnabled() {\n        return !!this.N.config.opt_in_site_apps;\n    }\n    Wr(t, i) {\n        if (i) {\n            var e = this.globalsForEvent(i);\n            this.Hr.push(e), this.Hr.length > 1e3 && (this.Hr = this.Hr.slice(10));\n        }\n    }\n    get siteAppLoaders() {\n        var t, i;\n        return null == (t = c._POSTHOG_REMOTE_CONFIG) || null == (i = t[this.N.config.token]) ? void 0 : i.siteApps;\n    }\n    init() {\n        if (this.isEnabled) {\n            var t = this.N.Ae(this.Wr.bind(this));\n            this.Gr = ()=>{\n                t(), this.Hr = [], this.Gr = void 0;\n            };\n        }\n    }\n    globalsForEvent(t) {\n        var i, e, r, s, n, o, a;\n        if (!t) throw new Error(\"Event payload is required\");\n        var l = {}, u = this.N.get_property(\"$groups\") || [], h = this.N.get_property(\"$stored_group_properties\") || {};\n        for (var [d, v] of Object.entries(h))l[d] = {\n            id: u[d],\n            type: d,\n            properties: v\n        };\n        var { $set_once: c, $set: f } = t;\n        return {\n            event: B({}, H(t, uo), {\n                properties: B({}, t.properties, f ? {\n                    $set: B({}, null !== (i = null == (e = t.properties) ? void 0 : e.$set) && void 0 !== i ? i : {}, f)\n                } : {}, c ? {\n                    $set_once: B({}, null !== (r = null == (s = t.properties) ? void 0 : s.$set_once) && void 0 !== r ? r : {}, c)\n                } : {}),\n                elements_chain: null !== (n = null == (o = t.properties) ? void 0 : o.$elements_chain) && void 0 !== n ? n : \"\",\n                distinct_id: null == (a = t.properties) ? void 0 : a.distinct_id\n            }),\n            person: {\n                properties: this.N.get_property(\"$stored_person_properties\")\n            },\n            groups: l\n        };\n    }\n    setupSiteApp(t) {\n        var i = this.apps[t.id], e = ()=>{\n            var e;\n            (!i.errored && this.Hr.length && (ho.info(\"Processing \" + this.Hr.length + \" events for site app with id \" + t.id), this.Hr.forEach((t)=>null == i.processEvent ? void 0 : i.processEvent(t)), i.processedBuffer = !0), Object.values(this.apps).every((t)=>t.processedBuffer || t.errored)) && (null == (e = this.Gr) || e.call(this));\n        }, r = !1, s = (s)=>{\n            i.errored = !s, i.loaded = !0, ho.info(\"Site app with id \" + t.id + \" \" + (s ? \"loaded\" : \"errored\")), r && e();\n        };\n        try {\n            var { processEvent: n } = t.init({\n                posthog: this.N,\n                callback: (t)=>{\n                    s(t);\n                }\n            });\n            n && (i.processEvent = n), r = !0;\n        } catch (i) {\n            ho.error(\"Error while initializing PostHog app with config id \" + t.id, i), s(!1);\n        }\n        if (r && i.loaded) try {\n            e();\n        } catch (e) {\n            ho.error(\"Error while processing buffered events PostHog app with config id \" + t.id, e), i.errored = !0;\n        }\n    }\n    Jr() {\n        var t = this.siteAppLoaders || [];\n        for (var i of t)this.apps[i.id] = {\n            id: i.id,\n            loaded: !1,\n            errored: !1,\n            processedBuffer: !1\n        };\n        for (var e of t)this.setupSiteApp(e);\n    }\n    Vr(t) {\n        if (0 !== Object.keys(this.apps).length) {\n            var i = this.globalsForEvent(t);\n            for (var e of Object.values(this.apps))try {\n                null == e.processEvent || e.processEvent(i);\n            } catch (i) {\n                ho.error(\"Error while processing event \" + t.event + \" for site app \" + e.id, i);\n            }\n        }\n    }\n    onRemoteConfig(t) {\n        var i, e, r, s = this;\n        if (null != (i = this.siteAppLoaders) && i.length) return this.isEnabled ? (this.Jr(), void this.N.on(\"eventCaptured\", (t)=>this.Vr(t))) : void ho.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n        if (null == (e = this.Gr) || e.call(this), null != (r = t.siteApps) && r.length) if (this.isEnabled) {\n            var n = function(t, i) {\n                var e;\n                c[\"__$$ph_site_app_\" + t] = s.N, null == (e = c.__PosthogExtensions__) || null == e.loadSiteApp || e.loadSiteApp(s.N, i, (i)=>{\n                    if (i) return ho.error(\"Error while initializing PostHog app with config id \" + t, i);\n                });\n            };\n            for (var { id: o, url: a } of t.siteApps)n(o, a);\n        } else ho.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.');\n    }\n}\nvar co, fo = [\n    \"amazonbot\",\n    \"amazonproductbot\",\n    \"app.hypefactors.com\",\n    \"applebot\",\n    \"archive.org_bot\",\n    \"awariobot\",\n    \"backlinksextendedbot\",\n    \"baiduspider\",\n    \"bingbot\",\n    \"bingpreview\",\n    \"chrome-lighthouse\",\n    \"dataforseobot\",\n    \"deepscan\",\n    \"duckduckbot\",\n    \"facebookexternal\",\n    \"facebookcatalog\",\n    \"http://yandex.com/bots\",\n    \"hubspot\",\n    \"ia_archiver\",\n    \"linkedinbot\",\n    \"meta-externalagent\",\n    \"mj12bot\",\n    \"msnbot\",\n    \"nessus\",\n    \"petalbot\",\n    \"pinterest\",\n    \"prerender\",\n    \"rogerbot\",\n    \"screaming frog\",\n    \"sebot-wa\",\n    \"sitebulb\",\n    \"slackbot\",\n    \"slurp\",\n    \"trendictionbot\",\n    \"turnitin\",\n    \"twitterbot\",\n    \"vercelbot\",\n    \"yahoo! slurp\",\n    \"yandexbot\",\n    \"zoombot\",\n    \"bot.htm\",\n    \"bot.php\",\n    \"(bot;\",\n    \"bot/\",\n    \"crawler\",\n    \"ahrefsbot\",\n    \"ahrefssiteaudit\",\n    \"semrushbot\",\n    \"siteauditbot\",\n    \"splitsignalbot\",\n    \"gptbot\",\n    \"oai-searchbot\",\n    \"chatgpt-user\",\n    \"perplexitybot\",\n    \"better uptime bot\",\n    \"sentryuptimebot\",\n    \"uptimerobot\",\n    \"headlesschrome\",\n    \"cypress\",\n    \"google-hoteladsverifier\",\n    \"adsbot-google\",\n    \"apis-google\",\n    \"duplexweb-google\",\n    \"feedfetcher-google\",\n    \"google favicon\",\n    \"google web preview\",\n    \"google-read-aloud\",\n    \"googlebot\",\n    \"googleweblight\",\n    \"mediapartners-google\",\n    \"storebot-google\",\n    \"bytespider\"\n], po = function(t, i) {\n    if (!t) return !1;\n    var e = t.toLowerCase();\n    return fo.concat(i || []).some((t)=>{\n        var i = t.toLowerCase();\n        return -1 !== e.indexOf(i);\n    });\n}, go = function(t, i) {\n    if (!t) return !1;\n    var e = t.userAgent;\n    if (e && po(e, i)) return !0;\n    try {\n        var r = null == t ? void 0 : t.userAgentData;\n        if (null != r && r.brands && r.brands.some((t)=>po(null == t ? void 0 : t.brand, i))) return !0;\n    } catch (t) {}\n    return !!t.webdriver;\n};\nfunction _o(t, i, e) {\n    return Xn({\n        distinct_id: t,\n        userPropertiesToSet: i,\n        userPropertiesToSetOnce: e\n    });\n}\n!function(t) {\n    t.US = \"us\", t.EU = \"eu\", t.CUSTOM = \"custom\";\n}(co || (co = {}));\nvar mo = \"i.posthog.com\";\nclass bo {\n    constructor(t){\n        this.Kr = {}, this.instance = t;\n    }\n    get apiHost() {\n        var t = this.instance.config.api_host.trim().replace(/\\/$/, \"\");\n        return \"https://app.posthog.com\" === t ? \"https://us.i.posthog.com\" : t;\n    }\n    get uiHost() {\n        var t, i = null == (t = this.instance.config.ui_host) ? void 0 : t.replace(/\\/$/, \"\");\n        return i || (i = this.apiHost.replace(\".\" + mo, \".posthog.com\")), \"https://app.posthog.com\" === i ? \"https://us.posthog.com\" : i;\n    }\n    get region() {\n        return this.Kr[this.apiHost] || (/https:\\/\\/(app|us|us-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Kr[this.apiHost] = co.US : /https:\\/\\/(eu|eu-assets)(\\.i)?\\.posthog\\.com/i.test(this.apiHost) ? this.Kr[this.apiHost] = co.EU : this.Kr[this.apiHost] = co.CUSTOM), this.Kr[this.apiHost];\n    }\n    endpointFor(t, i) {\n        if (void 0 === i && (i = \"\"), i && (i = \"/\" === i[0] ? i : \"/\" + i), \"ui\" === t) return this.uiHost + i;\n        if (this.region === co.CUSTOM) return this.apiHost + i;\n        var e = mo + i;\n        switch(t){\n            case \"assets\":\n                return \"https://\" + this.region + \"-assets.\" + e;\n            case \"api\":\n                return \"https://\" + this.region + \".\" + e;\n        }\n    }\n}\nvar wo = {\n    icontains: (t, e)=>!!i && e.href.toLowerCase().indexOf(t.toLowerCase()) > -1,\n    not_icontains: (t, e)=>!!i && -1 === e.href.toLowerCase().indexOf(t.toLowerCase()),\n    regex: (t, e)=>!!i && Ln(e.href, t),\n    not_regex: (t, e)=>!!i && !Ln(e.href, t),\n    exact: (t, i)=>i.href === t,\n    is_not: (t, i)=>i.href !== t\n};\nclass yo {\n    constructor(t){\n        var i = this;\n        this.getWebExperimentsAndEvaluateDisplayLogic = function(t) {\n            void 0 === t && (t = !1), i.getWebExperiments((t)=>{\n                yo.Yr(\"retrieved web experiments from the server\"), i.Xr = new Map, t.forEach((t)=>{\n                    if (t.feature_flag_key) {\n                        var e;\n                        if (i.Xr) yo.Yr(\"setting flag key \", t.feature_flag_key, \" to web experiment \", t), null == (e = i.Xr) || e.set(t.feature_flag_key, t);\n                        var r = i.N.getFeatureFlag(t.feature_flag_key);\n                        T(r) && t.variants[r] && i.Qr(t.name, r, t.variants[r].transforms);\n                    } else if (t.variants) for(var s in t.variants){\n                        var n = t.variants[s];\n                        yo.Zr(n) && i.Qr(t.name, s, n.transforms);\n                    }\n                });\n            }, t);\n        }, this.N = t, this.N.onFeatureFlags((t)=>{\n            this.onFeatureFlags(t);\n        });\n    }\n    onFeatureFlags(t) {\n        if (this._is_bot()) yo.Yr(\"Refusing to render web experiment since the viewer is a likely bot\");\n        else if (!this.N.config.disable_web_experiments) {\n            if (C(this.Xr)) return this.Xr = new Map, this.loadIfEnabled(), void this.previewWebExperiment();\n            yo.Yr(\"applying feature flags\", t), t.forEach((t)=>{\n                var i;\n                if (this.Xr && null != (i = this.Xr) && i.has(t)) {\n                    var e, r = this.N.getFeatureFlag(t), s = null == (e = this.Xr) ? void 0 : e.get(t);\n                    r && null != s && s.variants[r] && this.Qr(s.name, r, s.variants[r].transforms);\n                }\n            });\n        }\n    }\n    previewWebExperiment() {\n        var t = yo.getWindowLocation();\n        if (null != t && t.search) {\n            var i = Si(null == t ? void 0 : t.search, \"__experiment_id\"), e = Si(null == t ? void 0 : t.search, \"__experiment_variant\");\n            i && e && (yo.Yr(\"previewing web experiments \" + i + \" && \" + e), this.getWebExperiments((t)=>{\n                this.ts(parseInt(i), e, t);\n            }, !1, !0));\n        }\n    }\n    loadIfEnabled() {\n        this.N.config.disable_web_experiments || this.getWebExperimentsAndEvaluateDisplayLogic();\n    }\n    getWebExperiments(t, i, e) {\n        if (this.N.config.disable_web_experiments && !e) return t([]);\n        var r = this.N.get_property(\"$web_experiments\");\n        if (r && !i) return t(r);\n        this.N.pe({\n            url: this.N.requestRouter.endpointFor(\"api\", \"/api/web_experiments/?token=\" + this.N.config.token),\n            method: \"GET\",\n            callback: (i)=>{\n                if (200 !== i.statusCode || !i.json) return t([]);\n                var e = i.json.experiments || [];\n                return t(e);\n            }\n        });\n    }\n    ts(t, i, e) {\n        var r = e.filter((i)=>i.id === t);\n        r && r.length > 0 && (yo.Yr(\"Previewing web experiment [\" + r[0].name + \"] with variant [\" + i + \"]\"), this.Qr(r[0].name, i, r[0].variants[i].transforms));\n    }\n    static Zr(t) {\n        return !C(t.conditions) && yo.es(t) && yo.rs(t);\n    }\n    static es(t) {\n        var i;\n        if (C(t.conditions) || C(null == (i = t.conditions) ? void 0 : i.url)) return !0;\n        var e, r, s, n = yo.getWindowLocation();\n        return !!n && (null == (e = t.conditions) || !e.url || wo[null !== (r = null == (s = t.conditions) ? void 0 : s.urlMatchType) && void 0 !== r ? r : \"icontains\"](t.conditions.url, n));\n    }\n    static getWindowLocation() {\n        return null == i ? void 0 : i.location;\n    }\n    static rs(t) {\n        var i;\n        if (C(t.conditions) || C(null == (i = t.conditions) ? void 0 : i.utm)) return !0;\n        var e = pn();\n        if (e.utm_source) {\n            var r, s, n, o, a, l, u, h, d, v, c, f, p, g, _, m, b = null == (r = t.conditions) || null == (s = r.utm) || !s.utm_campaign || (null == (n = t.conditions) || null == (o = n.utm) ? void 0 : o.utm_campaign) == e.utm_campaign, w = null == (a = t.conditions) || null == (l = a.utm) || !l.utm_source || (null == (u = t.conditions) || null == (h = u.utm) ? void 0 : h.utm_source) == e.utm_source, y = null == (d = t.conditions) || null == (v = d.utm) || !v.utm_medium || (null == (c = t.conditions) || null == (f = c.utm) ? void 0 : f.utm_medium) == e.utm_medium, S = null == (p = t.conditions) || null == (g = p.utm) || !g.utm_term || (null == (_ = t.conditions) || null == (m = _.utm) ? void 0 : m.utm_term) == e.utm_term;\n            return b && y && S && w;\n        }\n        return !1;\n    }\n    static Yr(t) {\n        for(var i = arguments.length, e = new Array(i > 1 ? i - 1 : 0), r = 1; r < i; r++)e[r - 1] = arguments[r];\n        N.info(\"[WebExperiments] \" + t, e);\n    }\n    Qr(t, i, e) {\n        this._is_bot() ? yo.Yr(\"Refusing to render web experiment since the viewer is a likely bot\") : \"control\" !== i ? e.forEach((e)=>{\n            if (e.selector) {\n                var r;\n                yo.Yr(\"applying transform of variant \" + i + \" for experiment \" + t + \" \", e);\n                var s = null == (r = document) ? void 0 : r.querySelectorAll(e.selector);\n                null == s || s.forEach((t)=>{\n                    var i = t;\n                    e.html && (i.innerHTML = e.html), e.css && i.setAttribute(\"style\", e.css);\n                });\n            }\n        }) : yo.Yr(\"Control variants leave the page unmodified.\");\n    }\n    _is_bot() {\n        return o && this.N ? go(o, this.N.config.custom_blocked_useragents) : void 0;\n    }\n}\nvar So = {}, $o = ()=>{}, ko = \"posthog\", xo = !Vn && -1 === (null == v ? void 0 : v.indexOf(\"MSIE\")) && -1 === (null == v ? void 0 : v.indexOf(\"Mozilla\")), Eo = ()=>{\n    var t;\n    return {\n        api_host: \"https://us.i.posthog.com\",\n        ui_host: null,\n        token: \"\",\n        autocapture: !0,\n        rageclick: !0,\n        cross_subdomain_cookie: et(null == a ? void 0 : a.location),\n        persistence: \"localStorage+cookie\",\n        persistence_name: \"\",\n        loaded: $o,\n        save_campaign_params: !0,\n        custom_campaign_params: [],\n        custom_blocked_useragents: [],\n        save_referrer: !0,\n        capture_pageview: !0,\n        capture_pageleave: \"if_capture_pageview\",\n        debug: l && T(null == l ? void 0 : l.search) && -1 !== l.search.indexOf(\"__posthog_debug=true\") || !1,\n        cookie_expiration: 365,\n        upgrade: !1,\n        disable_session_recording: !1,\n        disable_persistence: !1,\n        disable_web_experiments: !0,\n        disable_surveys: !1,\n        disable_external_dependency_loading: !1,\n        enable_recording_console_log: void 0,\n        secure_cookie: \"https:\" === (null == i || null == (t = i.location) ? void 0 : t.protocol),\n        ip: !0,\n        opt_out_capturing_by_default: !1,\n        opt_out_persistence_by_default: !1,\n        opt_out_useragent_filter: !1,\n        opt_out_capturing_persistence_type: \"localStorage\",\n        opt_out_capturing_cookie_prefix: null,\n        opt_in_site_apps: !1,\n        property_denylist: [],\n        respect_dnt: !1,\n        sanitize_properties: null,\n        request_headers: {},\n        request_batching: !0,\n        properties_string_max_length: 65535,\n        session_recording: {},\n        mask_all_element_attributes: !1,\n        mask_all_text: !1,\n        mask_personal_data_properties: !1,\n        custom_personal_data_properties: [],\n        advanced_disable_decide: !1,\n        advanced_disable_feature_flags: !1,\n        advanced_disable_feature_flags_on_first_load: !1,\n        advanced_disable_toolbar_metrics: !1,\n        feature_flag_request_timeout_ms: 3e3,\n        surveys_request_timeout_ms: 1e4,\n        on_request_error: (t)=>{\n            var i = \"Bad HTTP status: \" + t.statusCode + \" \" + t.text;\n            N.error(i);\n        },\n        get_device_id: (t)=>t,\n        capture_performance: void 0,\n        name: \"posthog\",\n        bootstrap: {},\n        disable_compression: !1,\n        session_idle_timeout_seconds: 1800,\n        person_profiles: \"identified_only\",\n        before_send: void 0,\n        request_queue_config: {\n            flush_interval_ms: to\n        },\n        _onCapture: $o\n    };\n}, Io = (t)=>{\n    var i = {};\n    R(t.process_person) || (i.person_profiles = t.process_person), R(t.xhr_headers) || (i.request_headers = t.xhr_headers), R(t.cookie_name) || (i.persistence_name = t.cookie_name), R(t.disable_cookie) || (i.disable_persistence = t.disable_cookie), R(t.store_google) || (i.save_campaign_params = t.store_google), R(t.verbose) || (i.debug = t.verbose);\n    var e = V({}, i, t);\n    return x(t.property_blacklist) && (R(t.property_denylist) ? e.property_denylist = t.property_blacklist : x(t.property_denylist) ? e.property_denylist = [\n        ...t.property_blacklist,\n        ...t.property_denylist\n    ] : N.error(\"Invalid value for property_denylist config: \" + t.property_denylist)), e;\n};\nclass Po {\n    constructor(){\n        this.__forceAllowLocalhost = !1;\n    }\n    get ss() {\n        return this.__forceAllowLocalhost;\n    }\n    set ss(t) {\n        N.error(\"WebPerformanceObserver is deprecated and has no impact on network capture. Use `_forceAllowLocalhostNetworkCapture` on `posthog.sessionRecording`\"), this.__forceAllowLocalhost = t;\n    }\n}\nclass Ro {\n    get decideEndpointWasHit() {\n        var t, i;\n        return null !== (t = null == (i = this.featureFlags) ? void 0 : i.hasLoadedFlags) && void 0 !== t && t;\n    }\n    constructor(){\n        this.webPerformance = new Po, this.ns = !1, this.version = f.LIB_VERSION, this.os = new jn, this.config = Eo(), this.SentryIntegration = Qr, this.sentryIntegration = (t)=>(function(t, i) {\n                var e = Xr(t, i);\n                return {\n                    name: Yr,\n                    processEvent: (t)=>e(t)\n                };\n            })(this, t), this.__request_queue = [], this.__loaded = !1, this.analyticsDefaultEndpoint = \"/e/\", this.ls = !1, this.us = null, this.hs = null, this.featureFlags = new Fn(this), this.toolbar = new rs(this), this.scrollManager = new so(this), this.pageViewManager = new vs(this), this.surveys = new qn(this), this.experiments = new yo(this), this.exceptions = new cs(this), this.rateLimiter = new Hn(this), this.requestRouter = new bo(this), this.consent = new Zi(this), this.people = {\n            set: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(r), null == e || e({});\n            },\n            set_once: (t, i, e)=>{\n                var r = T(t) ? {\n                    [t]: i\n                } : t;\n                this.setPersonProperties(void 0, r), null == e || e({});\n            }\n        }, this.on(\"eventCaptured\", (t)=>N.info('send \"' + (null == t ? void 0 : t.event) + '\"', t));\n    }\n    init(t, i, e) {\n        if (e && e !== ko) {\n            var r, s = null !== (r = So[e]) && void 0 !== r ? r : new Ro;\n            return s._init(t, i, e), So[e] = s, So[ko][e] = s, s;\n        }\n        return this._init(t, i, e);\n    }\n    _init(e, r, s) {\n        var n, o;\n        if (void 0 === r && (r = {}), R(e) || M(e)) return N.critical(\"PostHog was initialized without a token. This likely indicates a misconfiguration. Please check the first argument passed to posthog.init()\"), this;\n        if (this.__loaded) return N.warn(\"You have already initialized PostHog! Re-initializing is a no-op\"), this;\n        this.__loaded = !0, this.config = {}, this.ds = [], r.person_profiles && (this.us = r.person_profiles), this.set_config(V({}, Eo(), Io(r), {\n            name: s,\n            token: e\n        })), this.config.on_xhr_error && N.error(\"on_xhr_error is deprecated. Use on_request_error instead\"), this.compression = r.disable_compression ? void 0 : t.GZipJS, this.persistence = new Dn(this.config), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new Dn(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        }));\n        var a = B({}, this.persistence.props), l = B({}, this.sessionPersistence.props);\n        if (this.vs = new io((t)=>this.cs(t), this.config.request_queue_config), this.fs = new ro(this), this.__request_queue = [], this.config.__preview_experimental_cookieless_mode || (this.sessionManager = new lo(this), this.sessionPropsManager = new oo(this, this.sessionManager, this.persistence)), new ns(this).startIfEnabledOrStop(), this.siteApps = new vo(this), null == (n = this.siteApps) || n.init(), this.config.__preview_experimental_cookieless_mode || (this.sessionRecording = new Jr(this), this.sessionRecording.startIfEnabledOrStop()), this.config.disable_scroll_properties || this.scrollManager.startMeasuringScrollPosition(), this.autocapture = new Ti(this), this.autocapture.startIfEnabled(), this.surveys.loadIfEnabled(), this.heatmaps = new ds(this), this.heatmaps.startIfEnabled(), this.webVitalsAutocapture = new ls(this), this.exceptionObserver = new ne(this), this.exceptionObserver.startIfEnabled(), this.deadClicksAutocapture = new re(this, ee), this.deadClicksAutocapture.startIfEnabled(), this.historyAutocapture = new je(this), this.historyAutocapture.startIfEnabled(), f.DEBUG = f.DEBUG || this.config.debug, f.DEBUG && N.info(\"Starting in debug mode\", {\n            this: this,\n            config: r,\n            thisC: B({}, this.config),\n            p: a,\n            s: l\n        }), this.ps(), void 0 !== (null == (o = r.bootstrap) ? void 0 : o.distinctID)) {\n            var u, h, d = this.config.get_device_id(ji()), v = null != (u = r.bootstrap) && u.isIdentifiedID ? d : r.bootstrap.distinctID;\n            this.persistence.set_property(Ft, null != (h = r.bootstrap) && h.isIdentifiedID ? \"identified\" : \"anonymous\"), this.register({\n                distinct_id: r.bootstrap.distinctID,\n                $device_id: v\n            });\n        }\n        if (this.gs()) {\n            var c, p, g = Object.keys((null == (c = r.bootstrap) ? void 0 : c.featureFlags) || {}).filter((t)=>{\n                var i, e;\n                return !(null == (i = r.bootstrap) || null == (e = i.featureFlags) || !e[t]);\n            }).reduce((t, i)=>{\n                var e, s;\n                return t[i] = (null == (e = r.bootstrap) || null == (s = e.featureFlags) ? void 0 : s[i]) || !1, t;\n            }, {}), _ = Object.keys((null == (p = r.bootstrap) ? void 0 : p.featureFlagPayloads) || {}).filter((t)=>g[t]).reduce((t, i)=>{\n                var e, s, n, o;\n                null != (e = r.bootstrap) && null != (s = e.featureFlagPayloads) && s[i] && (t[i] = null == (n = r.bootstrap) || null == (o = n.featureFlagPayloads) ? void 0 : o[i]);\n                return t;\n            }, {});\n            this.featureFlags.receivedFeatureFlags({\n                featureFlags: g,\n                featureFlagPayloads: _\n            });\n        }\n        if (this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: qt,\n            $device_id: null\n        }, \"\");\n        else if (!this.get_distinct_id()) {\n            var m = this.config.get_device_id(ji());\n            this.register_once({\n                distinct_id: m,\n                $device_id: m\n            }, \"\"), this.persistence.set_property(Ft, \"anonymous\");\n        }\n        return st(i, \"onpagehide\" in self ? \"pagehide\" : \"unload\", this._handle_unload.bind(this), {\n            passive: !1\n        }), this.toolbar.maybeLoadToolbar(), r.segment ? Kr(this, ()=>this._s()) : this._s(), E(this.config._onCapture) && this.config._onCapture !== $o && (N.warn(\"onCapture is deprecated. Please use `before_send` instead\"), this.on(\"eventCaptured\", (t)=>this.config._onCapture(t.event, t))), this;\n    }\n    ge(i) {\n        var e, r, s, n, o, l, u, h;\n        if (!a || !a.body) return N.info(\"document not ready yet, trying again in 500 milliseconds...\"), void setTimeout(()=>{\n            this.ge(i);\n        }, 500);\n        this.compression = void 0, i.supportedCompression && !this.config.disable_compression && (this.compression = m(i.supportedCompression, t.GZipJS) ? t.GZipJS : m(i.supportedCompression, t.Base64) ? t.Base64 : void 0), null != (e = i.analytics) && e.endpoint && (this.analyticsDefaultEndpoint = i.analytics.endpoint), this.set_config({\n            person_profiles: this.us ? this.us : \"identified_only\"\n        }), null == (r = this.siteApps) || r.onRemoteConfig(i), null == (s = this.sessionRecording) || s.onRemoteConfig(i), null == (n = this.autocapture) || n.onRemoteConfig(i), null == (o = this.heatmaps) || o.onRemoteConfig(i), this.surveys.onRemoteConfig(i), null == (l = this.webVitalsAutocapture) || l.onRemoteConfig(i), null == (u = this.exceptionObserver) || u.onRemoteConfig(i), null == (h = this.deadClicksAutocapture) || h.onRemoteConfig(i);\n    }\n    _s() {\n        try {\n            this.config.loaded(this);\n        } catch (t) {\n            N.critical(\"`loaded` function failed\", t);\n        }\n        this.bs(), this.config.capture_pageview && setTimeout(()=>{\n            this.consent.isOptedIn() && this.ws();\n        }, 1), new Gn(this).load(), this.featureFlags.decide();\n    }\n    bs() {\n        var t;\n        this.has_opted_out_capturing() || this.config.request_batching && (null == (t = this.vs) || t.enable());\n    }\n    _dom_loaded() {\n        this.has_opted_out_capturing() || G(this.__request_queue, (t)=>this.cs(t)), this.__request_queue = [], this.bs();\n    }\n    _handle_unload() {\n        var t, i;\n        this.config.request_batching ? (this.ys() && this.capture(\"$pageleave\"), null == (t = this.vs) || t.unload(), null == (i = this.fs) || i.unload()) : this.ys() && this.capture(\"$pageleave\", null, {\n            transport: \"sendBeacon\"\n        });\n    }\n    pe(t) {\n        this.__loaded && (xo ? this.__request_queue.push(t) : this.rateLimiter.isServerRateLimited(t.batchKey) || (t.transport = t.transport || this.config.api_transport, t.url = Yn(t.url, {\n            ip: this.config.ip ? 1 : 0\n        }), t.headers = B({}, this.config.request_headers), t.compression = \"best-available\" === t.compression ? this.compression : t.compression, t.fetchOptions = t.fetchOptions || this.config.fetch_options, ((t)=>{\n            var i, e, r, s = B({}, t);\n            s.timeout = s.timeout || 6e4, s.url = Yn(s.url, {\n                _: (new Date).getTime().toString(),\n                ver: f.LIB_VERSION,\n                compression: s.compression\n            });\n            var n = null !== (i = s.transport) && void 0 !== i ? i : \"fetch\", o = null !== (e = null == (r = rt(Zn, (t)=>t.transport === n)) ? void 0 : r.method) && void 0 !== e ? e : Zn[0].method;\n            if (!o) throw new Error(\"No available transport method\");\n            o(s);\n        })(B({}, t, {\n            callback: (i)=>{\n                var e, r;\n                (this.rateLimiter.checkForLimiting(i), i.statusCode >= 400) && (null == (e = (r = this.config).on_request_error) || e.call(r, i));\n                null == t.callback || t.callback(i);\n            }\n        }))));\n    }\n    cs(t) {\n        this.fs ? this.fs.retriableRequest(t) : this.pe(t);\n    }\n    _execute_array(t) {\n        var i, e = [], r = [], s = [];\n        G(t, (t)=>{\n            t && (i = t[0], x(i) ? s.push(t) : E(t) ? t.call(this) : x(t) && \"alias\" === i ? e.push(t) : x(t) && -1 !== i.indexOf(\"capture\") && E(this[i]) ? s.push(t) : r.push(t));\n        });\n        var n = function(t, i) {\n            G(t, function(t) {\n                if (x(t[0])) {\n                    var e = i;\n                    J(t, function(t) {\n                        e = e[t[0]].apply(e, t.slice(1));\n                    });\n                } else this[t[0]].apply(this, t.slice(1));\n            }, i);\n        };\n        n(e, this), n(r, this), n(s, this);\n    }\n    gs() {\n        var t, i;\n        return (null == (t = this.config.bootstrap) ? void 0 : t.featureFlags) && Object.keys(null == (i = this.config.bootstrap) ? void 0 : i.featureFlags).length > 0 || !1;\n    }\n    push(t) {\n        this._execute_array([\n            t\n        ]);\n    }\n    capture(t, i, e) {\n        var r;\n        if (this.__loaded && this.persistence && this.sessionPersistence && this.vs) {\n            if (!this.consent.isOptedOut()) if (!R(t) && T(t)) {\n                if (this.config.opt_out_useragent_filter || !this._is_bot()) {\n                    var s = null != e && e.skip_client_rate_limiting ? void 0 : this.rateLimiter.clientRateLimitContext();\n                    if (null == s || !s.isRateLimited) {\n                        null != i && i.$current_url && !T(null == i ? void 0 : i.$current_url) && (N.error(\"Invalid `$current_url` property provided to `posthog.capture`. Input must be a string. Ignoring provided value.\"), null == i || delete i.$current_url), this.sessionPersistence.update_search_keyword(), this.config.save_campaign_params && this.sessionPersistence.update_campaign_params(), this.config.save_referrer && this.sessionPersistence.update_referrer_info(), (this.config.save_campaign_params || this.config.save_referrer) && this.persistence.set_initial_person_info();\n                        var n = new Date, o = (null == e ? void 0 : e.timestamp) || n, a = ji(), l = {\n                            uuid: a,\n                            event: t,\n                            properties: this.Fi(t, i || {}, o, a)\n                        };\n                        s && (l.properties.$lib_rate_limit_remaining_tokens = s.remainingTokens), (null == e ? void 0 : e.$set) && (l.$set = null == e ? void 0 : e.$set);\n                        var u = this.Ss(null == e ? void 0 : e.$set_once);\n                        u && (l.$set_once = u), (l = tt(l, null != e && e._noTruncate ? null : this.config.properties_string_max_length)).timestamp = o, R(null == e ? void 0 : e.timestamp) || (l.properties.$event_time_override_provided = !0, l.properties.$event_time_override_system_time = n);\n                        var h = B({}, l.properties.$set, l.$set);\n                        if (P(h) || this.setPersonPropertiesForFlags(h), !C(this.config.before_send)) {\n                            var d = this.$s(l);\n                            if (!d) return;\n                            l = d;\n                        }\n                        this.os.emit(\"eventCaptured\", l);\n                        var v = {\n                            method: \"POST\",\n                            url: null !== (r = null == e ? void 0 : e._url) && void 0 !== r ? r : this.requestRouter.endpointFor(\"api\", this.analyticsDefaultEndpoint),\n                            data: l,\n                            compression: \"best-available\",\n                            batchKey: null == e ? void 0 : e._batchKey\n                        };\n                        return !this.config.request_batching || e && (null == e || !e._batchKey) || null != e && e.send_instantly ? this.cs(v) : this.vs.enqueue(v), l;\n                    }\n                    N.critical(\"This capture call is ignored due to client rate limiting.\");\n                }\n            } else N.error(\"No event name provided to posthog.capture\");\n        } else N.uninitializedWarning(\"posthog.capture\");\n    }\n    Ae(t) {\n        return this.on(\"eventCaptured\", (i)=>t(i.event, i));\n    }\n    Fi(t, i, e, r) {\n        if (e = e || new Date, !this.persistence || !this.sessionPersistence) return i;\n        var s = this.persistence.remove_event_timer(t), n = B({}, i);\n        if (n.token = this.config.token, this.config.__preview_experimental_cookieless_mode && (n.$cookieless_mode = !0), \"$snapshot\" === t) {\n            var o = B({}, this.persistence.properties(), this.sessionPersistence.properties());\n            return n.distinct_id = o.distinct_id, (!T(n.distinct_id) && !F(n.distinct_id) || M(n.distinct_id)) && N.error(\"Invalid distinct_id for replay event. This indicates a bug in your implementation\"), n;\n        }\n        var l, u = kn(this.config.mask_personal_data_properties, this.config.custom_personal_data_properties);\n        if (this.sessionManager) {\n            var { sessionId: h, windowId: d } = this.sessionManager.checkAndGetSessionAndWindowId();\n            n.$session_id = h, n.$window_id = d;\n        }\n        this.sessionPropsManager && V(n, this.sessionPropsManager.getSessionProps());\n        try {\n            var c;\n            this.sessionRecording && V(n, this.sessionRecording.sdkDebugProperties), n.$sdk_debug_retry_queue_size = null == (c = this.fs) ? void 0 : c.length;\n        } catch (t) {\n            n.$sdk_debug_error_capturing_properties = String(t);\n        }\n        if (this.requestRouter.region === co.CUSTOM && (n.$lib_custom_api_host = this.config.api_host), l = \"$pageview\" === t ? this.pageViewManager.doPageView(e, r) : \"$pageleave\" === t ? this.pageViewManager.doPageLeave(e) : this.pageViewManager.doEvent(), n = V(n, l), \"$pageview\" === t && a && (n.title = a.title), !R(s)) {\n            var f = e.getTime() - s;\n            n.$duration = parseFloat((f / 1e3).toFixed(3));\n        }\n        v && this.config.opt_out_useragent_filter && (n.$browser_type = this._is_bot() ? \"bot\" : \"browser\"), (n = V({}, u, this.persistence.properties(), this.sessionPersistence.properties(), n)).$is_identified = this._isIdentified(), x(this.config.property_denylist) ? J(this.config.property_denylist, function(t) {\n            delete n[t];\n        }) : N.error(\"Invalid value for property_denylist config: \" + this.config.property_denylist + \" or property_blacklist config: \" + this.config.property_blacklist);\n        var p = this.config.sanitize_properties;\n        p && (N.error(\"sanitize_properties is deprecated. Use before_send instead\"), n = p(n, t));\n        var g = this.ks();\n        return n.$process_person_profile = g, g && this.xs(\"_calculate_event_properties\"), n;\n    }\n    Ss(t) {\n        var i;\n        if (!this.persistence || !this.ks()) return t;\n        if (this.ns) return t;\n        var e = this.persistence.get_initial_props(), r = null == (i = this.sessionPropsManager) ? void 0 : i.getSetOnceProps(), s = V({}, e, r || {}, t || {}), n = this.config.sanitize_properties;\n        return n && (N.error(\"sanitize_properties is deprecated. Use before_send instead\"), s = n(s, \"$set_once\")), this.ns = !0, P(s) ? void 0 : s;\n    }\n    register(t, i) {\n        var e;\n        null == (e = this.persistence) || e.register(t, i);\n    }\n    register_once(t, i, e) {\n        var r;\n        null == (r = this.persistence) || r.register_once(t, i, e);\n    }\n    register_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.register(t);\n    }\n    unregister(t) {\n        var i;\n        null == (i = this.persistence) || i.unregister(t);\n    }\n    unregister_for_session(t) {\n        var i;\n        null == (i = this.sessionPersistence) || i.unregister(t);\n    }\n    Es(t, i) {\n        this.register({\n            [t]: i\n        });\n    }\n    getFeatureFlag(t, i) {\n        return this.featureFlags.getFeatureFlag(t, i);\n    }\n    getFeatureFlagPayload(t) {\n        var i = this.featureFlags.getFeatureFlagPayload(t);\n        try {\n            return JSON.parse(i);\n        } catch (t) {\n            return i;\n        }\n    }\n    isFeatureEnabled(t, i) {\n        return this.featureFlags.isFeatureEnabled(t, i);\n    }\n    reloadFeatureFlags() {\n        this.featureFlags.reloadFeatureFlags();\n    }\n    updateEarlyAccessFeatureEnrollment(t, i) {\n        this.featureFlags.updateEarlyAccessFeatureEnrollment(t, i);\n    }\n    getEarlyAccessFeatures(t, i, e) {\n        return void 0 === i && (i = !1), this.featureFlags.getEarlyAccessFeatures(t, i, e);\n    }\n    on(t, i) {\n        return this.os.on(t, i);\n    }\n    onFeatureFlags(t) {\n        return this.featureFlags.onFeatureFlags(t);\n    }\n    onSurveysLoaded(t) {\n        return this.surveys.onSurveysLoaded(t);\n    }\n    onSessionId(t) {\n        var i, e;\n        return null !== (i = null == (e = this.sessionManager) ? void 0 : e.onSessionId(t)) && void 0 !== i ? i : ()=>{};\n    }\n    getSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getSurveys(t, i);\n    }\n    getActiveMatchingSurveys(t, i) {\n        void 0 === i && (i = !1), this.surveys.getActiveMatchingSurveys(t, i);\n    }\n    renderSurvey(t, i) {\n        this.surveys.renderSurvey(t, i);\n    }\n    canRenderSurvey(t) {\n        return this.surveys.canRenderSurvey(t);\n    }\n    canRenderSurveyAsync(t, i) {\n        return void 0 === i && (i = !1), this.surveys.canRenderSurveyAsync(t, i);\n    }\n    identify(t, i, e) {\n        if (!this.__loaded || !this.persistence) return N.uninitializedWarning(\"posthog.identify\");\n        if (F(t) && (t = t.toString(), N.warn(\"The first argument to posthog.identify was a number, but it should be a string. It has been converted to a string.\")), t) {\n            if ([\n                \"distinct_id\",\n                \"distinctid\"\n            ].includes(t.toLowerCase())) N.critical('The string \"' + t + '\" was set in posthog.identify which indicates an error. This ID should be unique to the user and not a hardcoded string.');\n            else if (this.xs(\"posthog.identify\")) {\n                var r = this.get_distinct_id();\n                if (this.register({\n                    $user_id: t\n                }), !this.get_property(\"$device_id\")) {\n                    var s = r;\n                    this.register_once({\n                        $had_persisted_distinct_id: !0,\n                        $device_id: s\n                    }, \"\");\n                }\n                t !== r && t !== this.get_property(ot) && (this.unregister(ot), this.register({\n                    distinct_id: t\n                }));\n                var n = \"anonymous\" === (this.persistence.get_property(Ft) || \"anonymous\");\n                t !== r && n ? (this.persistence.set_property(Ft, \"identified\"), this.setPersonPropertiesForFlags(B({}, e || {}, i || {}), !1), this.capture(\"$identify\", {\n                    distinct_id: t,\n                    $anon_distinct_id: r\n                }, {\n                    $set: i || {},\n                    $set_once: e || {}\n                }), this.hs = _o(t, i, e), this.featureFlags.setAnonymousDistinctId(r)) : (i || e) && this.setPersonProperties(i, e), t !== r && (this.reloadFeatureFlags(), this.unregister(Ct));\n            }\n        } else N.error(\"Unique user id has not been set in posthog.identify\");\n    }\n    setPersonProperties(t, i) {\n        if ((t || i) && this.xs(\"posthog.setPersonProperties\")) {\n            var e = _o(this.get_distinct_id(), t, i);\n            this.hs !== e ? (this.setPersonPropertiesForFlags(B({}, i || {}, t || {})), this.capture(\"$set\", {\n                $set: t || {},\n                $set_once: i || {}\n            }), this.hs = e) : N.info(\"A duplicate setPersonProperties call was made with the same properties. It has been ignored.\");\n        }\n    }\n    group(t, i, e) {\n        if (t && i) {\n            if (this.xs(\"posthog.group\")) {\n                var r = this.getGroups();\n                r[t] !== i && this.resetGroupPropertiesForFlags(t), this.register({\n                    $groups: B({}, r, {\n                        [t]: i\n                    })\n                }), e && (this.capture(\"$groupidentify\", {\n                    $group_type: t,\n                    $group_key: i,\n                    $group_set: e\n                }), this.setGroupPropertiesForFlags({\n                    [t]: e\n                })), r[t] === i || e || this.reloadFeatureFlags();\n            }\n        } else N.error(\"posthog.group requires a group type and group key\");\n    }\n    resetGroups() {\n        this.register({\n            $groups: {}\n        }), this.resetGroupPropertiesForFlags(), this.reloadFeatureFlags();\n    }\n    setPersonPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.featureFlags.setPersonPropertiesForFlags(t, i);\n    }\n    resetPersonPropertiesForFlags() {\n        this.featureFlags.resetPersonPropertiesForFlags();\n    }\n    setGroupPropertiesForFlags(t, i) {\n        void 0 === i && (i = !0), this.xs(\"posthog.setGroupPropertiesForFlags\") && this.featureFlags.setGroupPropertiesForFlags(t, i);\n    }\n    resetGroupPropertiesForFlags(t) {\n        this.featureFlags.resetGroupPropertiesForFlags(t);\n    }\n    reset(t) {\n        var i, e, r, s;\n        if (N.info(\"reset\"), !this.__loaded) return N.uninitializedWarning(\"posthog.reset\");\n        var n = this.get_property(\"$device_id\");\n        if (this.consent.reset(), null == (i = this.persistence) || i.clear(), null == (e = this.sessionPersistence) || e.clear(), this.surveys.reset(), null == (r = this.persistence) || r.set_property(Ft, \"anonymous\"), null == (s = this.sessionManager) || s.resetSessionId(), this.hs = null, this.config.__preview_experimental_cookieless_mode) this.register_once({\n            distinct_id: qt,\n            $device_id: null\n        }, \"\");\n        else {\n            var o = this.config.get_device_id(ji());\n            this.register_once({\n                distinct_id: o,\n                $device_id: t ? o : n\n            }, \"\");\n        }\n        this.register({\n            $last_posthog_reset: (new Date).toISOString()\n        }, 1);\n    }\n    get_distinct_id() {\n        return this.get_property(\"distinct_id\");\n    }\n    getGroups() {\n        return this.get_property(\"$groups\") || {};\n    }\n    get_session_id() {\n        var t, i;\n        return null !== (t = null == (i = this.sessionManager) ? void 0 : i.checkAndGetSessionAndWindowId(!0).sessionId) && void 0 !== t ? t : \"\";\n    }\n    get_session_replay_url(t) {\n        if (!this.sessionManager) return \"\";\n        var { sessionId: i, sessionStartTimestamp: e } = this.sessionManager.checkAndGetSessionAndWindowId(!0), r = this.requestRouter.endpointFor(\"ui\", \"/project/\" + this.config.token + \"/replay/\" + i);\n        if (null != t && t.withTimestamp && e) {\n            var s, n = null !== (s = t.timestampLookBack) && void 0 !== s ? s : 10;\n            if (!e) return r;\n            r += \"?t=\" + Math.max(Math.floor(((new Date).getTime() - e) / 1e3) - n, 0);\n        }\n        return r;\n    }\n    alias(t, i) {\n        return t === this.get_property(nt) ? (N.critical(\"Attempting to create alias for existing People user - aborting.\"), -2) : this.xs(\"posthog.alias\") ? (R(i) && (i = this.get_distinct_id()), t !== i ? (this.Es(ot, t), this.capture(\"$create_alias\", {\n            alias: t,\n            distinct_id: i\n        })) : (N.warn(\"alias matches current distinct_id - skipping api call.\"), this.identify(t), -1)) : void 0;\n    }\n    set_config(t) {\n        var i, e, r, s, n = B({}, this.config);\n        I(t) && (V(this.config, Io(t)), null == (i = this.persistence) || i.update_config(this.config, n), this.sessionPersistence = \"sessionStorage\" === this.config.persistence || \"memory\" === this.config.persistence ? this.persistence : new Dn(B({}, this.config, {\n            persistence: \"sessionStorage\"\n        })), Gi.C() && \"true\" === Gi.A(\"ph_debug\") && (this.config.debug = !0), this.config.debug && (f.DEBUG = !0, N.info(\"set_config\", JSON.stringify({\n            config: t,\n            oldConfig: n,\n            newConfig: B({}, this.config)\n        }, null, 2))), null == (e = this.sessionRecording) || e.startIfEnabledOrStop(), null == (r = this.autocapture) || r.startIfEnabled(), null == (s = this.heatmaps) || s.startIfEnabled(), this.surveys.loadIfEnabled(), this.ps());\n    }\n    startSessionRecording(t) {\n        var i = !0 === t, e = {\n            sampling: i || !(null == t || !t.sampling),\n            linked_flag: i || !(null == t || !t.linked_flag),\n            url_trigger: i || !(null == t || !t.url_trigger),\n            event_trigger: i || !(null == t || !t.event_trigger)\n        };\n        if (Object.values(e).some(Boolean)) {\n            var r, s, n, o, a;\n            if (null == (r = this.sessionManager) || r.checkAndGetSessionAndWindowId(), e.sampling) null == (s = this.sessionRecording) || s.overrideSampling();\n            if (e.linked_flag) null == (n = this.sessionRecording) || n.overrideLinkedFlag();\n            if (e.url_trigger) null == (o = this.sessionRecording) || o.overrideTrigger(\"url\");\n            if (e.event_trigger) null == (a = this.sessionRecording) || a.overrideTrigger(\"event\");\n        }\n        this.set_config({\n            disable_session_recording: !1\n        });\n    }\n    stopSessionRecording() {\n        this.set_config({\n            disable_session_recording: !0\n        });\n    }\n    sessionRecordingStarted() {\n        var t;\n        return !(null == (t = this.sessionRecording) || !t.started);\n    }\n    captureException(t, i) {\n        var e = new Error(\"PostHog syntheticException\");\n        this.exceptions.sendExceptionEvent(B({}, Ae(((t)=>t instanceof Error)(t) ? {\n            error: t,\n            event: t.message\n        } : {\n            event: t\n        }, {\n            syntheticException: e\n        }), i));\n    }\n    loadToolbar(t) {\n        return this.toolbar.loadToolbar(t);\n    }\n    get_property(t) {\n        var i;\n        return null == (i = this.persistence) ? void 0 : i.props[t];\n    }\n    getSessionProperty(t) {\n        var i;\n        return null == (i = this.sessionPersistence) ? void 0 : i.props[t];\n    }\n    toString() {\n        var t, i = null !== (t = this.config.name) && void 0 !== t ? t : ko;\n        return i !== ko && (i = ko + \".\" + i), i;\n    }\n    _isIdentified() {\n        var t, i;\n        return \"identified\" === (null == (t = this.persistence) ? void 0 : t.get_property(Ft)) || \"identified\" === (null == (i = this.sessionPersistence) ? void 0 : i.get_property(Ft));\n    }\n    ks() {\n        var t, i, e, r;\n        return !(\"never\" === this.config.person_profiles || \"identified_only\" === this.config.person_profiles && !this._isIdentified() && P(this.getGroups()) && (null == (t = this.persistence) || null == (i = t.props) || !i[ot]) && (null == (e = this.persistence) || null == (r = e.props) || !r[zt]));\n    }\n    ys() {\n        return !0 === this.config.capture_pageleave || \"if_capture_pageview\" === this.config.capture_pageleave && (!0 === this.config.capture_pageview || \"history_change\" === this.config.capture_pageview);\n    }\n    createPersonProfile() {\n        this.ks() || this.xs(\"posthog.createPersonProfile\") && this.setPersonProperties({}, {});\n    }\n    xs(t) {\n        return \"never\" === this.config.person_profiles ? (N.error(t + ' was called, but process_person is set to \"never\". This call will be ignored.'), !1) : (this.Es(zt, !0), !0);\n    }\n    ps() {\n        var t, i, e, r, s = this.consent.isOptedOut(), n = this.config.opt_out_persistence_by_default, o = this.config.disable_persistence || s && !!n;\n        (null == (t = this.persistence) ? void 0 : t.Se) !== o && (null == (e = this.persistence) || e.set_disabled(o));\n        (null == (i = this.sessionPersistence) ? void 0 : i.Se) !== o && (null == (r = this.sessionPersistence) || r.set_disabled(o));\n    }\n    opt_in_capturing(t) {\n        var i;\n        (this.consent.optInOut(!0), this.ps(), R(null == t ? void 0 : t.captureEventName) || null != t && t.captureEventName) && this.capture(null !== (i = null == t ? void 0 : t.captureEventName) && void 0 !== i ? i : \"$opt_in\", null == t ? void 0 : t.captureProperties, {\n            send_instantly: !0\n        });\n        this.config.capture_pageview && this.ws();\n    }\n    opt_out_capturing() {\n        this.consent.optInOut(!1), this.ps();\n    }\n    has_opted_in_capturing() {\n        return this.consent.isOptedIn();\n    }\n    has_opted_out_capturing() {\n        return this.consent.isOptedOut();\n    }\n    clear_opt_in_out_capturing() {\n        this.consent.reset(), this.ps();\n    }\n    _is_bot() {\n        return o ? go(o, this.config.custom_blocked_useragents) : void 0;\n    }\n    ws() {\n        a && !this.ls && (this.ls = !0, this.capture(\"$pageview\", {\n            title: a.title\n        }, {\n            send_instantly: !0\n        }));\n    }\n    debug(t) {\n        !1 === t ? (null == i || i.console.log(\"You've disabled debug mode.\"), localStorage && localStorage.removeItem(\"ph_debug\"), this.set_config({\n            debug: !1\n        })) : (null == i || i.console.log(\"You're now in debug mode. All calls to PostHog will be logged in your console.\\nYou can disable this with `posthog.debug(false)`.\"), localStorage && localStorage.setItem(\"ph_debug\", \"true\"), this.set_config({\n            debug: !0\n        }));\n    }\n    $s(t) {\n        if (C(this.config.before_send)) return t;\n        var i = x(this.config.before_send) ? this.config.before_send : [\n            this.config.before_send\n        ], e = t;\n        for (var r of i){\n            if (e = r(e), C(e)) {\n                var s = \"Event '\" + t.event + \"' was rejected in beforeSend function\";\n                return j(t.event) ? N.warn(s + \". This can cause unexpected behavior.\") : N.info(s), null;\n            }\n            e.properties && !P(e.properties) || N.warn(\"Event '\" + t.event + \"' has no properties after beforeSend function, this is likely an error.\");\n        }\n        return e;\n    }\n    getPageViewId() {\n        var t;\n        return null == (t = this.pageViewManager.se) ? void 0 : t.pageViewId;\n    }\n    captureTraceFeedback(t, i) {\n        this.capture(\"$ai_feedback\", {\n            $ai_trace_id: String(t),\n            $ai_feedback_text: i\n        });\n    }\n    captureTraceMetric(t, i, e) {\n        this.capture(\"$ai_metric\", {\n            $ai_trace_id: String(t),\n            $ai_metric_name: i,\n            $ai_metric_value: String(e)\n        });\n    }\n}\n!function(t, i) {\n    for(var e = 0; e < i.length; e++)t.prototype[i[e]] = Q(t.prototype[i[e]]);\n}(Ro, [\n    \"identify\"\n]);\nvar To, Mo, Oo, Co, Fo, Ao;\n!function(t) {\n    t.Button = \"button\", t.Tab = \"tab\", t.Selector = \"selector\";\n}(To || (To = {})), function(t) {\n    t.Left = \"left\", t.Center = \"center\", t.Right = \"right\", t.NextToTrigger = \"next_to_trigger\";\n}(Mo || (Mo = {})), function(t) {\n    t.Popover = \"popover\", t.API = \"api\", t.Widget = \"widget\";\n}(Oo || (Oo = {})), function(t) {\n    t.Open = \"open\", t.MultipleChoice = \"multiple_choice\", t.SingleChoice = \"single_choice\", t.Rating = \"rating\", t.Link = \"link\";\n}(Co || (Co = {})), function(t) {\n    t.NextQuestion = \"next_question\", t.End = \"end\", t.ResponseBased = \"response_based\", t.SpecificQuestion = \"specific_question\";\n}(Fo || (Fo = {})), function(t) {\n    t.Once = \"once\", t.Recurring = \"recurring\", t.Always = \"always\";\n}(Ao || (Ao = {}));\nvar Do, jo = (Do = So[ko] = new Ro, function() {\n    function t() {\n        t.done || (t.done = !0, xo = !1, J(So, function(t) {\n            t._dom_loaded();\n        }));\n    }\n    null != a && a.addEventListener ? \"complete\" === a.readyState ? t() : st(a, \"DOMContentLoaded\", t, {\n        capture: !1\n    }) : i && N.error(\"Browser doesn't support `document.addEventListener` so PostHog couldn't be initialized\");\n}(), Do);\n //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9kaXN0L21vZHVsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsR0FBRUMsSUFBRSxNQUFhLEdBQWNDLENBQU1BLEdBQUMsS0FBSyxHQUFFQyxJQUFFLGVBQWEsT0FBT0MsYUFBV0EsYUFBV0gsR0FBRUksSUFBRUMsTUFBTUMsU0FBUyxFQUFDQyxJQUFFSCxFQUFFSSxPQUFPLEVBQUNDLElBQUVMLEVBQUVNLE9BQU8sRUFBQ0MsSUFBRSxRQUFNVCxJQUFFLEtBQUssSUFBRUEsRUFBRVUsU0FBUyxFQUFDQyxJQUFFLFFBQU1YLElBQUUsS0FBSyxJQUFFQSxFQUFFWSxRQUFRLEVBQUNDLElBQUUsUUFBTWIsSUFBRSxLQUFLLElBQUVBLEVBQUVjLFFBQVEsRUFBQ0MsSUFBRSxRQUFNZixJQUFFLEtBQUssSUFBRUEsRUFBRWdCLEtBQUssRUFBQ0MsSUFBRSxRQUFNakIsS0FBR0EsRUFBRWtCLGNBQWMsSUFBRSxxQkFBb0IsSUFBSWxCLEVBQUVrQixjQUFjLEdBQUNsQixFQUFFa0IsY0FBYyxHQUFDLEtBQUssR0FBRUMsSUFBRSxRQUFNbkIsSUFBRSxLQUFLLElBQUVBLEVBQUVvQixlQUFlLEVBQUNDLElBQUUsUUFBTVosSUFBRSxLQUFLLElBQUVBLEVBQUVhLFNBQVMsRUFBQ0MsSUFBRSxRQUFNekIsSUFBRUEsSUFBRSxDQUFDLEdBQUUwQixJQUFFO0lBQUNDLE9BQU0sQ0FBQztJQUFFQyxhQUFZO0FBQVMsR0FBRUMsSUFBRSxxQkFBb0JDLElBQUU7SUFBQztJQUFZO0lBQVk7SUFBYTtJQUFPO0lBQW1CO0lBQWM7SUFBZTtJQUFZO0lBQWlCO0lBQWdCO0lBQTZCO0lBQTBCO0lBQTZCO0NBQXVCO0FBQUMsQ0FBQyxTQUFTL0IsQ0FBQztJQUFFQSxFQUFFZ0MsTUFBTSxHQUFDLFdBQVVoQyxFQUFFaUMsTUFBTSxHQUFDO0FBQVEsRUFBRWpDLEtBQUlBLENBQUFBLElBQUUsQ0FBQztB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QUFLQSxDQUFBQSxLQUFHLENBQUMsS0FBSSxTQUFTNzZDLENBQUM7SUFBRUEsRUFBRSs3QyxZQUFZLEdBQUMsaUJBQWdCLzdDLEVBQUVnOEMsR0FBRyxHQUFDLE9BQU1oOEMsRUFBRWk4QyxhQUFhLEdBQUMsa0JBQWlCajhDLEVBQUVrOEMsZ0JBQWdCLEdBQUM7QUFBbUIsRUFBRXBCLE1BQUtBLENBQUFBLEtBQUcsQ0FBQyxLQUFJLFNBQVM5NkMsQ0FBQztJQUFFQSxFQUFFbThDLElBQUksR0FBQyxRQUFPbjhDLEVBQUVvOEMsU0FBUyxHQUFDLGFBQVlwOEMsRUFBRXE4QyxNQUFNLEdBQUM7QUFBUSxFQUFFdEIsTUFBS0EsQ0FBQUEsS0FBRyxDQUFDO0FBQUksSUFBSXVCLElBQUdDLEtBQUlELENBQUFBLEtBQUdwSixFQUFFLENBQUNFLEdBQUcsR0FBQyxJQUFJOEIsSUFBRztJQUFXLFNBQVNsMUM7UUFBSUEsRUFBRXc4QyxJQUFJLElBQUd4OEMsQ0FBQUEsRUFBRXc4QyxJQUFJLEdBQUMsQ0FBQyxHQUFFbkosS0FBRyxDQUFDLEdBQUVwc0MsRUFBRWlzQyxJQUFJLFNBQVNsekMsQ0FBQztZQUFFQSxFQUFFaTNDLFdBQVc7UUFBRSxFQUFFO0lBQUU7SUFBQyxRQUFNbjJDLEtBQUdBLEVBQUUrRSxnQkFBZ0IsR0FBQyxlQUFhL0UsRUFBRWdyQyxVQUFVLEdBQUM5ckMsTUFBSXFJLEdBQUd2SCxHQUFFLG9CQUFtQmQsR0FBRTtRQUFDc0ksU0FBUSxDQUFDO0lBQUMsS0FBR3JJLEtBQUcwRSxFQUFFSixLQUFLLENBQUM7QUFBeUYsS0FBSSszQyxFQUFDO0FBQWlTLENBQ3gvNEosa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR3YXJkLWxlZS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9kaXN0L21vZHVsZS5qcz9jNjNmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0LGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwLGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczppLHI9QXJyYXkucHJvdG90eXBlLHM9ci5mb3JFYWNoLG49ci5pbmRleE9mLG89bnVsbD09ZT92b2lkIDA6ZS5uYXZpZ2F0b3IsYT1udWxsPT1lP3ZvaWQgMDplLmRvY3VtZW50LGw9bnVsbD09ZT92b2lkIDA6ZS5sb2NhdGlvbix1PW51bGw9PWU/dm9pZCAwOmUuZmV0Y2gsaD1udWxsIT1lJiZlLlhNTEh0dHBSZXF1ZXN0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4gbmV3IGUuWE1MSHR0cFJlcXVlc3Q/ZS5YTUxIdHRwUmVxdWVzdDp2b2lkIDAsZD1udWxsPT1lP3ZvaWQgMDplLkFib3J0Q29udHJvbGxlcix2PW51bGw9PW8/dm9pZCAwOm8udXNlckFnZW50LGM9bnVsbCE9aT9pOnt9LGY9e0RFQlVHOiExLExJQl9WRVJTSU9OOlwiMS4yMzcuMFwifSxwPVwiJGNvcHlfYXV0b2NhcHR1cmVcIixnPVtcIiRzbmFwc2hvdFwiLFwiJHBhZ2V2aWV3XCIsXCIkcGFnZWxlYXZlXCIsXCIkc2V0XCIsXCJzdXJ2ZXkgZGlzbWlzc2VkXCIsXCJzdXJ2ZXkgc2VudFwiLFwic3VydmV5IHNob3duXCIsXCIkaWRlbnRpZnlcIixcIiRncm91cGlkZW50aWZ5XCIsXCIkY3JlYXRlX2FsaWFzXCIsXCIkJGNsaWVudF9pbmdlc3Rpb25fd2FybmluZ1wiLFwiJHdlYl9leHBlcmltZW50X2FwcGxpZWRcIixcIiRmZWF0dXJlX2Vucm9sbG1lbnRfdXBkYXRlXCIsXCIkZmVhdHVyZV9mbGFnX2NhbGxlZFwiXTshZnVuY3Rpb24odCl7dC5HWmlwSlM9XCJnemlwLWpzXCIsdC5CYXNlNjQ9XCJiYXNlNjRcIn0odHx8KHQ9e30pKTt2YXIgXz1bXCJmYXRhbFwiLFwiZXJyb3JcIixcIndhcm5pbmdcIixcImxvZ1wiLFwiaW5mb1wiLFwiZGVidWdcIl07ZnVuY3Rpb24gbSh0LGkpe3JldHVybi0xIT09dC5pbmRleE9mKGkpfXZhciBiPWZ1bmN0aW9uKHQpe3JldHVybiB0LnRyaW0oKX0sdz1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9eXFwkLyxcIlwiKX07dmFyIHk9QXJyYXkuaXNBcnJheSxTPU9iamVjdC5wcm90b3R5cGUsJD1TLmhhc093blByb3BlcnR5LGs9Uy50b1N0cmluZyx4PXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiW29iamVjdCBBcnJheV1cIj09PWsuY2FsbCh0KX0sRT10PT5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LEk9dD0+dD09PU9iamVjdCh0KSYmIXgodCksUD10PT57aWYoSSh0KSl7Zm9yKHZhciBpIGluIHQpaWYoJC5jYWxsKHQsaSkpcmV0dXJuITE7cmV0dXJuITB9cmV0dXJuITF9LFI9dD0+dm9pZCAwPT09dCxUPXQ9PlwiW29iamVjdCBTdHJpbmddXCI9PWsuY2FsbCh0KSxNPXQ9PlQodCkmJjA9PT10LnRyaW0oKS5sZW5ndGgsTz10PT5udWxsPT09dCxDPXQ9PlIodCl8fE8odCksRj10PT5cIltvYmplY3QgTnVtYmVyXVwiPT1rLmNhbGwodCksQT10PT5cIltvYmplY3QgQm9vbGVhbl1cIj09PWsuY2FsbCh0KSxEPXQ9PnQgaW5zdGFuY2VvZiBGb3JtRGF0YSxqPXQ9Pm0oZyx0KSxMPXQ9Pnt2YXIgZT17dDpmdW5jdGlvbihlKXtpZihpJiYoZi5ERUJVR3x8Yy5QT1NUSE9HX0RFQlVHKSYmIVIoaS5jb25zb2xlKSYmaS5jb25zb2xlKXtmb3IodmFyIHI9KFwiX19ycndlYl9vcmlnaW5hbF9fXCJpbiBpLmNvbnNvbGVbZV0/aS5jb25zb2xlW2VdLl9fcnJ3ZWJfb3JpZ2luYWxfXzppLmNvbnNvbGVbZV0pLHM9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShzPjE/cy0xOjApLG89MTtvPHM7bysrKW5bby0xXT1hcmd1bWVudHNbb107cih0LC4uLm4pfX0saW5mbzpmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWlbcl09YXJndW1lbnRzW3JdO2UudChcImxvZ1wiLC4uLmkpfSx3YXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkodCkscj0wO3I8dDtyKyspaVtyXT1hcmd1bWVudHNbcl07ZS50KFwid2FyblwiLC4uLmkpfSxlcnJvcjpmdW5jdGlvbigpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9bmV3IEFycmF5KHQpLHI9MDtyPHQ7cisrKWlbcl09YXJndW1lbnRzW3JdO2UudChcImVycm9yXCIsLi4uaSl9LGNyaXRpY2FsOmZ1bmN0aW9uKCl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkoaSkscj0wO3I8aTtyKyspZVtyXT1hcmd1bWVudHNbcl07Y29uc29sZS5lcnJvcih0LC4uLmUpfSx1bmluaXRpYWxpemVkV2FybmluZzp0PT57ZS5lcnJvcihcIllvdSBtdXN0IGluaXRpYWxpemUgUG9zdEhvZyBiZWZvcmUgY2FsbGluZyBcIit0KX0sY3JlYXRlTG9nZ2VyOmk9PkwodCtcIiBcIitpKX07cmV0dXJuIGV9LE49TChcIltQb3N0SG9nLmpzXVwiKSx6PU4uY3JlYXRlTG9nZ2VyLFU9eihcIltFeHRlcm5hbFNjcmlwdHNMb2FkZXJdXCIpLHE9KHQsaSxlKT0+e2lmKHQuY29uZmlnLmRpc2FibGVfZXh0ZXJuYWxfZGVwZW5kZW5jeV9sb2FkaW5nKXJldHVybiBVLndhcm4oaStcIiB3YXMgcmVxdWVzdGVkIGJ1dCBsb2FkaW5nIG9mIGV4dGVybmFsIHNjcmlwdHMgaXMgZGlzYWJsZWQuXCIpLGUoXCJMb2FkaW5nIG9mIGV4dGVybmFsIHNjcmlwdHMgaXMgZGlzYWJsZWRcIik7dmFyIHI9bnVsbD09YT92b2lkIDA6YS5xdWVyeVNlbGVjdG9yQWxsKFwic2NyaXB0XCIpO2lmKHIpZm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspaWYocltzXS5zcmM9PT1pKXJldHVybiBlKCk7dmFyIG49KCk9PntpZighYSlyZXR1cm4gZShcImRvY3VtZW50IG5vdCBmb3VuZFwiKTt2YXIgcj1hLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7aWYoci50eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIsci5jcm9zc09yaWdpbj1cImFub255bW91c1wiLHIuc3JjPWksci5vbmxvYWQ9dD0+ZSh2b2lkIDAsdCksci5vbmVycm9yPXQ9PmUodCksdC5jb25maWcucHJlcGFyZV9leHRlcm5hbF9kZXBlbmRlbmN5X3NjcmlwdCYmKHI9dC5jb25maWcucHJlcGFyZV9leHRlcm5hbF9kZXBlbmRlbmN5X3NjcmlwdChyKSksIXIpcmV0dXJuIGUoXCJwcmVwYXJlX2V4dGVybmFsX2RlcGVuZGVuY3lfc2NyaXB0IHJldHVybmVkIG51bGxcIik7dmFyIHMsbj1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCJib2R5ID4gc2NyaXB0XCIpO24ubGVuZ3RoPjA/bnVsbD09KHM9blswXS5wYXJlbnROb2RlKXx8cy5pbnNlcnRCZWZvcmUocixuWzBdKTphLmJvZHkuYXBwZW5kQ2hpbGQocil9O251bGwhPWEmJmEuYm9keT9uKCk6bnVsbD09YXx8YS5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLG4pfTtmdW5jdGlvbiBCKCl7cmV0dXJuIEI9T2JqZWN0LmFzc2lnbj9PYmplY3QuYXNzaWduLmJpbmQoKTpmdW5jdGlvbih0KXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXt2YXIgZT1hcmd1bWVudHNbaV07Zm9yKHZhciByIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJih0W3JdPWVbcl0pfXJldHVybiB0fSxCLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBIKHQsaSl7aWYobnVsbD09dClyZXR1cm57fTt2YXIgZSxyLHM9e30sbj1PYmplY3Qua2V5cyh0KTtmb3Iocj0wO3I8bi5sZW5ndGg7cisrKWU9bltyXSxpLmluZGV4T2YoZSk+PTB8fChzW2VdPXRbZV0pO3JldHVybiBzfWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fPWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19ffHx7fSxjLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXy5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5PSh0LGksZSk9Pnt2YXIgcj1cIi9zdGF0aWMvXCIraStcIi5qcz92PVwiK3QudmVyc2lvbjtpZihcInJlbW90ZS1jb25maWdcIj09PWkmJihyPVwiL2FycmF5L1wiK3QuY29uZmlnLnRva2VuK1wiL2NvbmZpZy5qc1wiKSxcInRvb2xiYXJcIj09PWkpe3ZhciBzPTNlNTtyPXIrXCImdD1cIitNYXRoLmZsb29yKERhdGUubm93KCkvcykqc312YXIgbj10LnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhc3NldHNcIixyKTtxKHQsbixlKX0sYy5fX1Bvc3Rob2dFeHRlbnNpb25zX18ubG9hZFNpdGVBcHA9KHQsaSxlKT0+e3ZhciByPXQucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcImFwaVwiLGkpO3EodCxyLGUpfTt2YXIgVz17fTtmdW5jdGlvbiBHKHQsaSxlKXtpZih4KHQpKWlmKHMmJnQuZm9yRWFjaD09PXMpdC5mb3JFYWNoKGksZSk7ZWxzZSBpZihcImxlbmd0aFwiaW4gdCYmdC5sZW5ndGg9PT0rdC5sZW5ndGgpZm9yKHZhciByPTAsbj10Lmxlbmd0aDtyPG47cisrKWlmKHIgaW4gdCYmaS5jYWxsKGUsdFtyXSxyKT09PVcpcmV0dXJufWZ1bmN0aW9uIEoodCxpLGUpe2lmKCFDKHQpKXtpZih4KHQpKXJldHVybiBHKHQsaSxlKTtpZihEKHQpKXtmb3IodmFyIHIgb2YgdC5lbnRyaWVzKCkpaWYoaS5jYWxsKGUsclsxXSxyWzBdKT09PVcpcmV0dXJufWVsc2UgZm9yKHZhciBzIGluIHQpaWYoJC5jYWxsKHQscykmJmkuY2FsbChlLHRbc10scyk9PT1XKXJldHVybn19dmFyIFY9ZnVuY3Rpb24odCl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkoaT4xP2ktMTowKSxyPTE7cjxpO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBHKGUsKGZ1bmN0aW9uKGkpe2Zvcih2YXIgZSBpbiBpKXZvaWQgMCE9PWlbZV0mJih0W2VdPWlbZV0pfSkpLHR9LEs9ZnVuY3Rpb24odCl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkoaT4xP2ktMTowKSxyPTE7cjxpO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBHKGUsKGZ1bmN0aW9uKGkpe0coaSwoZnVuY3Rpb24oaSl7dC5wdXNoKGkpfSkpfSkpLHR9O2Z1bmN0aW9uIFkodCl7Zm9yKHZhciBpPU9iamVjdC5rZXlzKHQpLGU9aS5sZW5ndGgscj1uZXcgQXJyYXkoZSk7ZS0tOylyW2VdPVtpW2VdLHRbaVtlXV1dO3JldHVybiByfXZhciBYPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gdCgpfWNhdGNoKHQpe3JldHVybn19LFE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e2Zvcih2YXIgaT1hcmd1bWVudHMubGVuZ3RoLGU9bmV3IEFycmF5KGkpLHI9MDtyPGk7cisrKWVbcl09YXJndW1lbnRzW3JdO3JldHVybiB0LmFwcGx5KHRoaXMsZSl9Y2F0Y2godCl7Ti5jcml0aWNhbChcIkltcGxlbWVudGF0aW9uIGVycm9yLiBQbGVhc2UgdHVybiBvbiBkZWJ1ZyBtb2RlIGFuZCBvcGVuIGEgdGlja2V0IG9uIGh0dHBzOi8vYXBwLnBvc3Rob2cuY29tL2hvbWUjcGFuZWw9c3VwcG9ydCUzQXN1cHBvcnQlM0EuXCIpLE4uY3JpdGljYWwodCl9fX0sWj1mdW5jdGlvbih0KXt2YXIgaT17fTtyZXR1cm4gSih0LChmdW5jdGlvbih0LGUpeyhUKHQpJiZ0Lmxlbmd0aD4wfHxGKHQpKSYmKGlbZV09dCl9KSksaX07ZnVuY3Rpb24gdHQodCxpKXtyZXR1cm4gZT10LHI9dD0+VCh0KSYmIU8oaSk/dC5zbGljZSgwLGkpOnQscz1uZXcgU2V0LGZ1bmN0aW9uIHQoaSxlKXtyZXR1cm4gaSE9PU9iamVjdChpKT9yP3IoaSxlKTppOnMuaGFzKGkpP3ZvaWQgMDoocy5hZGQoaSkseChpKT8obj1bXSxHKGksKGk9PntuLnB1c2godChpKSl9KSkpOihuPXt9LEooaSwoKGksZSk9PntzLmhhcyhpKXx8KG5bZV09dChpLGUpKX0pKSksbik7dmFyIG59KGUpO3ZhciBlLHIsc312YXIgaXQ9W1wiaGVyb2t1YXBwLmNvbVwiLFwidmVyY2VsLmFwcFwiLFwibmV0bGlmeS5hcHBcIl07ZnVuY3Rpb24gZXQodCl7dmFyIGk9bnVsbD09dD92b2lkIDA6dC5ob3N0bmFtZTtpZighVChpKSlyZXR1cm4hMTt2YXIgZT1pLnNwbGl0KFwiLlwiKS5zbGljZSgtMikuam9pbihcIi5cIik7Zm9yKHZhciByIG9mIGl0KWlmKGU9PT1yKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHJ0KHQsaSl7Zm9yKHZhciBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYoaSh0W2VdKSlyZXR1cm4gdFtlXX1mdW5jdGlvbiBzdCh0LGksZSxyKXt2YXJ7Y2FwdHVyZTpzPSExLHBhc3NpdmU6bj0hMH09bnVsbCE9cj9yOnt9O251bGw9PXR8fHQuYWRkRXZlbnRMaXN0ZW5lcihpLGUse2NhcHR1cmU6cyxwYXNzaXZlOm59KX12YXIgbnQ9XCIkcGVvcGxlX2Rpc3RpbmN0X2lkXCIsb3Q9XCJfX2FsaWFzXCIsYXQ9XCJfX3RpbWVyc1wiLGx0PVwiJGF1dG9jYXB0dXJlX2Rpc2FibGVkX3NlcnZlcl9zaWRlXCIsdXQ9XCIkaGVhdG1hcHNfZW5hYmxlZF9zZXJ2ZXJfc2lkZVwiLGh0PVwiJGV4Y2VwdGlvbl9jYXB0dXJlX2VuYWJsZWRfc2VydmVyX3NpZGVcIixkdD1cIiR3ZWJfdml0YWxzX2VuYWJsZWRfc2VydmVyX3NpZGVcIix2dD1cIiRkZWFkX2NsaWNrc19lbmFibGVkX3NlcnZlcl9zaWRlXCIsY3Q9XCIkd2ViX3ZpdGFsc19hbGxvd2VkX21ldHJpY3NcIixmdD1cIiRzZXNzaW9uX3JlY29yZGluZ19lbmFibGVkX3NlcnZlcl9zaWRlXCIscHQ9XCIkY29uc29sZV9sb2dfcmVjb3JkaW5nX2VuYWJsZWRfc2VydmVyX3NpZGVcIixndD1cIiRzZXNzaW9uX3JlY29yZGluZ19uZXR3b3JrX3BheWxvYWRfY2FwdHVyZVwiLF90PVwiJHNlc3Npb25fcmVjb3JkaW5nX21hc2tpbmdcIixtdD1cIiRzZXNzaW9uX3JlY29yZGluZ19jYW52YXNfcmVjb3JkaW5nXCIsYnQ9XCIkcmVwbGF5X3NhbXBsZV9yYXRlXCIsd3Q9XCIkcmVwbGF5X21pbmltdW1fZHVyYXRpb25cIix5dD1cIiRyZXBsYXlfc2NyaXB0X2NvbmZpZ1wiLFN0PVwiJHNlc2lkXCIsJHQ9XCIkc2Vzc2lvbl9pc19zYW1wbGVkXCIsa3Q9XCIkc2Vzc2lvbl9yZWNvcmRpbmdfdXJsX3RyaWdnZXJfYWN0aXZhdGVkX3Nlc3Npb25cIix4dD1cIiRzZXNzaW9uX3JlY29yZGluZ19ldmVudF90cmlnZ2VyX2FjdGl2YXRlZF9zZXNzaW9uXCIsRXQ9XCIkZW5hYmxlZF9mZWF0dXJlX2ZsYWdzXCIsSXQ9XCIkZWFybHlfYWNjZXNzX2ZlYXR1cmVzXCIsUHQ9XCIkZmVhdHVyZV9mbGFnX2RldGFpbHNcIixSdD1cIiRzdG9yZWRfcGVyc29uX3Byb3BlcnRpZXNcIixUdD1cIiRzdG9yZWRfZ3JvdXBfcHJvcGVydGllc1wiLE10PVwiJHN1cnZleXNcIixPdD1cIiRzdXJ2ZXlzX2FjdGl2YXRlZFwiLEN0PVwiJGZsYWdfY2FsbF9yZXBvcnRlZFwiLEZ0PVwiJHVzZXJfc3RhdGVcIixBdD1cIiRjbGllbnRfc2Vzc2lvbl9wcm9wc1wiLER0PVwiJGNhcHR1cmVfcmF0ZV9saW1pdFwiLGp0PVwiJGluaXRpYWxfY2FtcGFpZ25fcGFyYW1zXCIsTHQ9XCIkaW5pdGlhbF9yZWZlcnJlcl9pbmZvXCIsTnQ9XCIkaW5pdGlhbF9wZXJzb25faW5mb1wiLHp0PVwiJGVwcFwiLFV0PVwiX19QT1NUSE9HX1RPT0xCQVJfX1wiLHF0PVwiJHBvc3Rob2dfY29va2llbGVzc1wiLEJ0PVtudCxvdCxcIl9fY21wbnNcIixhdCxmdCx1dCxTdCxFdCxGdCxJdCxQdCxUdCxSdCxNdCxDdCxBdCxEdCxqdCxMdCx6dF07ZnVuY3Rpb24gSHQodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBFbGVtZW50JiYodC5pZD09PVV0fHwhKG51bGw9PXQuY2xvc2VzdHx8IXQuY2xvc2VzdChcIi50b29sYmFyLWdsb2JhbC1mYWRlLWNvbnRhaW5lclwiKSkpfWZ1bmN0aW9uIFd0KHQpe3JldHVybiEhdCYmMT09PXQubm9kZVR5cGV9ZnVuY3Rpb24gR3QodCxpKXtyZXR1cm4hIXQmJiEhdC50YWdOYW1lJiZ0LnRhZ05hbWUudG9Mb3dlckNhc2UoKT09PWkudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBKdCh0KXtyZXR1cm4hIXQmJjM9PT10Lm5vZGVUeXBlfWZ1bmN0aW9uIFZ0KHQpe3JldHVybiEhdCYmMTE9PT10Lm5vZGVUeXBlfWZ1bmN0aW9uIEt0KHQpe3JldHVybiB0P2IodCkuc3BsaXQoL1xccysvKTpbXX1mdW5jdGlvbiBZdCh0KXt2YXIgZT1udWxsPT1pP3ZvaWQgMDppLmxvY2F0aW9uLmhyZWY7cmV0dXJuISEoZSYmdCYmdC5zb21lKCh0PT5lLm1hdGNoKHQpKSkpfWZ1bmN0aW9uIFh0KHQpe3ZhciBpPVwiXCI7c3dpdGNoKHR5cGVvZiB0LmNsYXNzTmFtZSl7Y2FzZVwic3RyaW5nXCI6aT10LmNsYXNzTmFtZTticmVhaztjYXNlXCJvYmplY3RcIjppPSh0LmNsYXNzTmFtZSYmXCJiYXNlVmFsXCJpbiB0LmNsYXNzTmFtZT90LmNsYXNzTmFtZS5iYXNlVmFsOm51bGwpfHx0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiO2JyZWFrO2RlZmF1bHQ6aT1cIlwifXJldHVybiBLdChpKX1mdW5jdGlvbiBRdCh0KXtyZXR1cm4gQyh0KT9udWxsOmIodCkuc3BsaXQoLyhcXHMrKS8pLmZpbHRlcigodD0+dmkodCkpKS5qb2luKFwiXCIpLnJlcGxhY2UoL1tcXHJcXG5dL2csXCIgXCIpLnJlcGxhY2UoL1sgXSsvZyxcIiBcIikuc3Vic3RyaW5nKDAsMjU1KX1mdW5jdGlvbiBadCh0KXt2YXIgaT1cIlwiO3JldHVybiBzaSh0KSYmIW5pKHQpJiZ0LmNoaWxkTm9kZXMmJnQuY2hpbGROb2Rlcy5sZW5ndGgmJkoodC5jaGlsZE5vZGVzLChmdW5jdGlvbih0KXt2YXIgZTtKdCh0KSYmdC50ZXh0Q29udGVudCYmKGkrPW51bGwhPT0oZT1RdCh0LnRleHRDb250ZW50KSkmJnZvaWQgMCE9PWU/ZTpcIlwiKX0pKSxiKGkpfWZ1bmN0aW9uIHRpKHQpe3JldHVybiBSKHQudGFyZ2V0KT90LnNyY0VsZW1lbnR8fG51bGw6bnVsbCE9KGk9dC50YXJnZXQpJiZpLnNoYWRvd1Jvb3Q/dC5jb21wb3NlZFBhdGgoKVswXXx8bnVsbDp0LnRhcmdldHx8bnVsbDt2YXIgaX12YXIgaWk9W1wiYVwiLFwiYnV0dG9uXCIsXCJmb3JtXCIsXCJpbnB1dFwiLFwic2VsZWN0XCIsXCJ0ZXh0YXJlYVwiLFwibGFiZWxcIl07ZnVuY3Rpb24gZWkodCl7dmFyIGk9dC5wYXJlbnROb2RlO3JldHVybiEoIWl8fCFXdChpKSkmJml9ZnVuY3Rpb24gcmkodCxlLHIscyxuKXt2YXIgbyxhLGw7aWYodm9pZCAwPT09ciYmKHI9dm9pZCAwKSwhaXx8IXR8fEd0KHQsXCJodG1sXCIpfHwhV3QodCkpcmV0dXJuITE7aWYobnVsbCE9KG89cikmJm8udXJsX2FsbG93bGlzdCYmIVl0KHIudXJsX2FsbG93bGlzdCkpcmV0dXJuITE7aWYobnVsbCE9KGE9cikmJmEudXJsX2lnbm9yZWxpc3QmJll0KHIudXJsX2lnbm9yZWxpc3QpKXJldHVybiExO2lmKG51bGwhPShsPXIpJiZsLmRvbV9ldmVudF9hbGxvd2xpc3Qpe3ZhciB1PXIuZG9tX2V2ZW50X2FsbG93bGlzdDtpZih1JiYhdS5zb21lKCh0PT5lLnR5cGU9PT10KSkpcmV0dXJuITF9Zm9yKHZhciBoPSExLGQ9W3RdLHY9ITAsYz10O2MucGFyZW50Tm9kZSYmIUd0KGMsXCJib2R5XCIpOylpZihWdChjLnBhcmVudE5vZGUpKWQucHVzaChjLnBhcmVudE5vZGUuaG9zdCksYz1jLnBhcmVudE5vZGUuaG9zdDtlbHNle2lmKCEodj1laShjKSkpYnJlYWs7aWYoc3x8aWkuaW5kZXhPZih2LnRhZ05hbWUudG9Mb3dlckNhc2UoKSk+LTEpaD0hMDtlbHNle3ZhciBmPWkuZ2V0Q29tcHV0ZWRTdHlsZSh2KTtmJiZcInBvaW50ZXJcIj09PWYuZ2V0UHJvcGVydHlWYWx1ZShcImN1cnNvclwiKSYmKGg9ITApfWQucHVzaCh2KSxjPXZ9aWYoIWZ1bmN0aW9uKHQsaSl7dmFyIGU9bnVsbD09aT92b2lkIDA6aS5lbGVtZW50X2FsbG93bGlzdDtpZihSKGUpKXJldHVybiEwO3ZhciByPWZ1bmN0aW9uKHQpe2lmKGUuc29tZSgoaT0+dC50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PT1pKSkpcmV0dXJue3Y6ITB9fTtmb3IodmFyIHMgb2YgdCl7dmFyIG49cihzKTtpZihcIm9iamVjdFwiPT10eXBlb2YgbilyZXR1cm4gbi52fXJldHVybiExfShkLHIpKXJldHVybiExO2lmKCFmdW5jdGlvbih0LGkpe3ZhciBlPW51bGw9PWk/dm9pZCAwOmkuY3NzX3NlbGVjdG9yX2FsbG93bGlzdDtpZihSKGUpKXJldHVybiEwO3ZhciByPWZ1bmN0aW9uKHQpe2lmKGUuc29tZSgoaT0+dC5tYXRjaGVzKGkpKSkpcmV0dXJue3Y6ITB9fTtmb3IodmFyIHMgb2YgdCl7dmFyIG49cihzKTtpZihcIm9iamVjdFwiPT10eXBlb2YgbilyZXR1cm4gbi52fXJldHVybiExfShkLHIpKXJldHVybiExO3ZhciBwPWkuZ2V0Q29tcHV0ZWRTdHlsZSh0KTtpZihwJiZcInBvaW50ZXJcIj09PXAuZ2V0UHJvcGVydHlWYWx1ZShcImN1cnNvclwiKSYmXCJjbGlja1wiPT09ZS50eXBlKXJldHVybiEwO3ZhciBnPXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO3N3aXRjaChnKXtjYXNlXCJodG1sXCI6cmV0dXJuITE7Y2FzZVwiZm9ybVwiOnJldHVybihufHxbXCJzdWJtaXRcIl0pLmluZGV4T2YoZS50eXBlKT49MDtjYXNlXCJpbnB1dFwiOmNhc2VcInNlbGVjdFwiOmNhc2VcInRleHRhcmVhXCI6cmV0dXJuKG58fFtcImNoYW5nZVwiLFwiY2xpY2tcIl0pLmluZGV4T2YoZS50eXBlKT49MDtkZWZhdWx0OnJldHVybiBoPyhufHxbXCJjbGlja1wiXSkuaW5kZXhPZihlLnR5cGUpPj0wOihufHxbXCJjbGlja1wiXSkuaW5kZXhPZihlLnR5cGUpPj0wJiYoaWkuaW5kZXhPZihnKT4tMXx8XCJ0cnVlXCI9PT10LmdldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSl9fWZ1bmN0aW9uIHNpKHQpe2Zvcih2YXIgaT10O2kucGFyZW50Tm9kZSYmIUd0KGksXCJib2R5XCIpO2k9aS5wYXJlbnROb2RlKXt2YXIgZT1YdChpKTtpZihtKGUsXCJwaC1zZW5zaXRpdmVcIil8fG0oZSxcInBoLW5vLWNhcHR1cmVcIikpcmV0dXJuITF9aWYobShYdCh0KSxcInBoLWluY2x1ZGVcIikpcmV0dXJuITA7dmFyIHI9dC50eXBlfHxcIlwiO2lmKFQocikpc3dpdGNoKHIudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGlkZGVuXCI6Y2FzZVwicGFzc3dvcmRcIjpyZXR1cm4hMX12YXIgcz10Lm5hbWV8fHQuaWR8fFwiXCI7aWYoVChzKSl7aWYoL15jY3xjYXJkbnVtfGNjbnVtfGNyZWRpdGNhcmR8Y3NjfGN2Y3xjdnZ8ZXhwfHBhc3N8cHdkfHJvdXRpbmd8c2VjY29kZXxzZWN1cml0eWNvZGV8c2VjdXJpdHludW18c29jaWFsc2VjfHNvY3NlY3xzc24vaS50ZXN0KHMucmVwbGFjZSgvW15hLXpBLVowLTldL2csXCJcIikpKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIG5pKHQpe3JldHVybiEhKEd0KHQsXCJpbnB1dFwiKSYmIVtcImJ1dHRvblwiLFwiY2hlY2tib3hcIixcInN1Ym1pdFwiLFwicmVzZXRcIl0uaW5jbHVkZXModC50eXBlKXx8R3QodCxcInNlbGVjdFwiKXx8R3QodCxcInRleHRhcmVhXCIpfHxcInRydWVcIj09PXQuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpKX12YXIgb2k9XCIoNFswLTldezEyfSg/OlswLTldezN9KT8pfCg1WzEtNV1bMC05XXsxNH0pfCg2KD86MDExfDVbMC05XXsyfSlbMC05XXsxMn0pfCgzWzQ3XVswLTldezEzfSl8KDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfSl8KCg/OjIxMzF8MTgwMHwzNVswLTldezN9KVswLTldezExfSlcIixhaT1uZXcgUmVnRXhwKFwiXig/OlwiK29pK1wiKSRcIiksbGk9bmV3IFJlZ0V4cChvaSksdWk9XCJcXFxcZHszfS0/XFxcXGR7Mn0tP1xcXFxkezR9XCIsaGk9bmV3IFJlZ0V4cChcIl4oXCIrdWkrXCIpJFwiKSxkaT1uZXcgUmVnRXhwKFwiKFwiK3VpK1wiKVwiKTtmdW5jdGlvbiB2aSh0LGkpe2lmKHZvaWQgMD09PWkmJihpPSEwKSxDKHQpKXJldHVybiExO2lmKFQodCkpe2lmKHQ9Yih0KSwoaT9haTpsaSkudGVzdCgodHx8XCJcIikucmVwbGFjZSgvWy0gXS9nLFwiXCIpKSlyZXR1cm4hMTtpZigoaT9oaTpkaSkudGVzdCh0KSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBjaSh0KXt2YXIgaT1adCh0KTtyZXR1cm4gdmkoaT0oaStcIiBcIitmaSh0KSkudHJpbSgpKT9pOlwiXCJ9ZnVuY3Rpb24gZmkodCl7dmFyIGk9XCJcIjtyZXR1cm4gdCYmdC5jaGlsZE5vZGVzJiZ0LmNoaWxkTm9kZXMubGVuZ3RoJiZKKHQuY2hpbGROb2RlcywoZnVuY3Rpb24odCl7dmFyIGU7aWYodCYmXCJzcGFuXCI9PT0obnVsbD09KGU9dC50YWdOYW1lKT92b2lkIDA6ZS50b0xvd2VyQ2FzZSgpKSl0cnl7dmFyIHI9WnQodCk7aT0oaStcIiBcIityKS50cmltKCksdC5jaGlsZE5vZGVzJiZ0LmNoaWxkTm9kZXMubGVuZ3RoJiYoaT0oaStcIiBcIitmaSh0KSkudHJpbSgpKX1jYXRjaCh0KXtOLmVycm9yKFwiW0F1dG9DYXB0dXJlXVwiLHQpfX0pKSxpfWZ1bmN0aW9uIHBpKHQpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgaT10Lm1hcCgodD0+e3ZhciBpLGUscj1cIlwiO2lmKHQudGFnX25hbWUmJihyKz10LnRhZ19uYW1lKSx0LmF0dHJfY2xhc3MpZm9yKHZhciBzIG9mKHQuYXR0cl9jbGFzcy5zb3J0KCksdC5hdHRyX2NsYXNzKSlyKz1cIi5cIitzLnJlcGxhY2UoL1wiL2csXCJcIik7dmFyIG49Qih7fSx0LnRleHQ/e3RleHQ6dC50ZXh0fTp7fSx7XCJudGgtY2hpbGRcIjpudWxsIT09KGk9dC5udGhfY2hpbGQpJiZ2b2lkIDAhPT1pP2k6MCxcIm50aC1vZi10eXBlXCI6bnVsbCE9PShlPXQubnRoX29mX3R5cGUpJiZ2b2lkIDAhPT1lP2U6MH0sdC5ocmVmP3tocmVmOnQuaHJlZn06e30sdC5hdHRyX2lkP3thdHRyX2lkOnQuYXR0cl9pZH06e30sdC5hdHRyaWJ1dGVzKSxvPXt9O3JldHVybiBZKG4pLnNvcnQoKCh0LGkpPT57dmFyW2VdPXQsW3JdPWk7cmV0dXJuIGUubG9jYWxlQ29tcGFyZShyKX0pKS5mb3JFYWNoKCh0PT57dmFyW2ksZV09dDtyZXR1cm4gb1tnaShpLnRvU3RyaW5nKCkpXT1naShlLnRvU3RyaW5nKCkpfSkpLHIrPVwiOlwiLHIrPVkobikubWFwKCh0PT57dmFyW2ksZV09dDtyZXR1cm4gaSsnPVwiJytlKydcIid9KSkuam9pbihcIlwiKX0pKTtyZXR1cm4gaS5qb2luKFwiO1wiKX0oZnVuY3Rpb24odCl7cmV0dXJuIHQubWFwKCh0PT57dmFyIGksZSxyPXt0ZXh0Om51bGw9PShpPXQuJGVsX3RleHQpP3ZvaWQgMDppLnNsaWNlKDAsNDAwKSx0YWdfbmFtZTp0LnRhZ19uYW1lLGhyZWY6bnVsbD09KGU9dC5hdHRyX19ocmVmKT92b2lkIDA6ZS5zbGljZSgwLDIwNDgpLGF0dHJfY2xhc3M6X2kodCksYXR0cl9pZDp0LmF0dHJfX2lkLG50aF9jaGlsZDp0Lm50aF9jaGlsZCxudGhfb2ZfdHlwZTp0Lm50aF9vZl90eXBlLGF0dHJpYnV0ZXM6e319O3JldHVybiBZKHQpLmZpbHRlcigodD0+e3ZhcltpXT10O3JldHVybiAwPT09aS5pbmRleE9mKFwiYXR0cl9fXCIpfSkpLmZvckVhY2goKHQ9Pnt2YXJbaSxlXT10O3JldHVybiByLmF0dHJpYnV0ZXNbaV09ZX0pKSxyfSkpfSh0KSl9ZnVuY3Rpb24gZ2kodCl7cmV0dXJuIHQucmVwbGFjZSgvXCJ8XFxcXFwiL2csJ1xcXFxcIicpfWZ1bmN0aW9uIF9pKHQpe3ZhciBpPXQuYXR0cl9fY2xhc3M7cmV0dXJuIGk/eChpKT9pOkt0KGkpOnZvaWQgMH1jbGFzcyBtaXtjb25zdHJ1Y3Rvcigpe3RoaXMuY2xpY2tzPVtdfWlzUmFnZUNsaWNrKHQsaSxlKXt2YXIgcj10aGlzLmNsaWNrc1t0aGlzLmNsaWNrcy5sZW5ndGgtMV07aWYociYmTWF0aC5hYnModC1yLngpK01hdGguYWJzKGktci55KTwzMCYmZS1yLnRpbWVzdGFtcDwxZTMpe2lmKHRoaXMuY2xpY2tzLnB1c2goe3g6dCx5OmksdGltZXN0YW1wOmV9KSwzPT09dGhpcy5jbGlja3MubGVuZ3RoKXJldHVybiEwfWVsc2UgdGhpcy5jbGlja3M9W3t4OnQseTppLHRpbWVzdGFtcDplfV07cmV0dXJuITF9fXZhciBiaT1bXCJsb2NhbGhvc3RcIixcIjEyNy4wLjAuMVwiXSx3aT10PT57dmFyIGk9bnVsbD09YT92b2lkIDA6YS5jcmVhdGVFbGVtZW50KFwiYVwiKTtyZXR1cm4gUihpKT9udWxsOihpLmhyZWY9dCxpKX0seWk9ZnVuY3Rpb24odCxpKXt2YXIgZSxyO3ZvaWQgMD09PWkmJihpPVwiJlwiKTt2YXIgcz1bXTtyZXR1cm4gSih0LChmdW5jdGlvbih0LGkpe1IodCl8fFIoaSl8fFwidW5kZWZpbmVkXCI9PT1pfHwoZT1lbmNvZGVVUklDb21wb25lbnQoKHQ9PnQgaW5zdGFuY2VvZiBGaWxlKSh0KT90Lm5hbWU6dC50b1N0cmluZygpKSxyPWVuY29kZVVSSUNvbXBvbmVudChpKSxzW3MubGVuZ3RoXT1yK1wiPVwiK2UpfSkpLHMuam9pbihpKX0sU2k9ZnVuY3Rpb24odCxpKXtmb3IodmFyIGUscj0oKHQuc3BsaXQoXCIjXCIpWzBdfHxcIlwiKS5zcGxpdCgvXFw/KC4qKS8pWzFdfHxcIlwiKS5yZXBsYWNlKC9eXFw/Ky9nLFwiXCIpLnNwbGl0KFwiJlwiKSxzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBuPXJbc10uc3BsaXQoXCI9XCIpO2lmKG5bMF09PT1pKXtlPW47YnJlYWt9fWlmKCF4KGUpfHxlLmxlbmd0aDwyKXJldHVyblwiXCI7dmFyIG89ZVsxXTt0cnl7bz1kZWNvZGVVUklDb21wb25lbnQobyl9Y2F0Y2godCl7Ti5lcnJvcihcIlNraXBwaW5nIGRlY29kaW5nIGZvciBtYWxmb3JtZWQgcXVlcnkgcGFyYW06IFwiK28pfXJldHVybiBvLnJlcGxhY2UoL1xcKy9nLFwiIFwiKX0sJGk9ZnVuY3Rpb24odCxpLGUpe2lmKCF0fHwhaXx8IWkubGVuZ3RoKXJldHVybiB0O2Zvcih2YXIgcj10LnNwbGl0KFwiI1wiKSxzPXJbMF18fFwiXCIsbj1yWzFdLG89cy5zcGxpdChcIj9cIiksYT1vWzFdLGw9b1swXSx1PShhfHxcIlwiKS5zcGxpdChcIiZcIiksaD1bXSxkPTA7ZDx1Lmxlbmd0aDtkKyspe3ZhciB2PXVbZF0uc3BsaXQoXCI9XCIpO3godikmJihpLmluY2x1ZGVzKHZbMF0pP2gucHVzaCh2WzBdK1wiPVwiK2UpOmgucHVzaCh1W2RdKSl9dmFyIGM9bDtyZXR1cm4gbnVsbCE9YSYmKGMrPVwiP1wiK2guam9pbihcIiZcIikpLG51bGwhPW4mJihjKz1cIiNcIituKSxjfSxraT1mdW5jdGlvbih0LGkpe3ZhciBlPXQubWF0Y2gobmV3IFJlZ0V4cChpK1wiPShbXiZdKilcIikpO3JldHVybiBlP2VbMV06bnVsbH0seGk9eihcIltBdXRvQ2FwdHVyZV1cIik7ZnVuY3Rpb24gRWkodCxpKXtyZXR1cm4gaS5sZW5ndGg+dD9pLnNsaWNlKDAsdCkrXCIuLi5cIjppfWZ1bmN0aW9uIElpKHQpe2lmKHQucHJldmlvdXNFbGVtZW50U2libGluZylyZXR1cm4gdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO3ZhciBpPXQ7ZG97aT1pLnByZXZpb3VzU2libGluZ313aGlsZShpJiYhV3QoaSkpO3JldHVybiBpfWZ1bmN0aW9uIFBpKHQsaSxlLHIpe3ZhciBzPXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLG49e3RhZ19uYW1lOnN9O2lpLmluZGV4T2Yocyk+LTEmJiFlJiYoXCJhXCI9PT1zLnRvTG93ZXJDYXNlKCl8fFwiYnV0dG9uXCI9PT1zLnRvTG93ZXJDYXNlKCk/bi4kZWxfdGV4dD1FaSgxMDI0LGNpKHQpKTpuLiRlbF90ZXh0PUVpKDEwMjQsWnQodCkpKTt2YXIgbz1YdCh0KTtvLmxlbmd0aD4wJiYobi5jbGFzc2VzPW8uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm5cIlwiIT09dH0pKSksSih0LmF0dHJpYnV0ZXMsKGZ1bmN0aW9uKGUpe3ZhciBzO2lmKCghbmkodCl8fC0xIT09W1wibmFtZVwiLFwiaWRcIixcImNsYXNzXCIsXCJhcmlhLWxhYmVsXCJdLmluZGV4T2YoZS5uYW1lKSkmJigobnVsbD09cnx8IXIuaW5jbHVkZXMoZS5uYW1lKSkmJiFpJiZ2aShlLnZhbHVlKSYmKHM9ZS5uYW1lLCFUKHMpfHxcIl9uZ2NvbnRlbnRcIiE9PXMuc3Vic3RyaW5nKDAsMTApJiZcIl9uZ2hvc3RcIiE9PXMuc3Vic3RyaW5nKDAsNykpKSl7dmFyIG89ZS52YWx1ZTtcImNsYXNzXCI9PT1lLm5hbWUmJihvPUt0KG8pLmpvaW4oXCIgXCIpKSxuW1wiYXR0cl9fXCIrZS5uYW1lXT1FaSgxMDI0LG8pfX0pKTtmb3IodmFyIGE9MSxsPTEsdT10O3U9SWkodSk7KWErKyx1LnRhZ05hbWU9PT10LnRhZ05hbWUmJmwrKztyZXR1cm4gbi5udGhfY2hpbGQ9YSxuLm50aF9vZl90eXBlPWwsbn1mdW5jdGlvbiBSaSh0LGUpe2Zvcih2YXIgcixzLHtlOm4sbWFza0FsbEVsZW1lbnRBdHRyaWJ1dGVzOm8sbWFza0FsbFRleHQ6YSxlbGVtZW50QXR0cmlidXRlSWdub3JlTGlzdDpsLGVsZW1lbnRzQ2hhaW5Bc1N0cmluZzp1fT1lLGg9W3RdLGQ9dDtkLnBhcmVudE5vZGUmJiFHdChkLFwiYm9keVwiKTspVnQoZC5wYXJlbnROb2RlKT8oaC5wdXNoKGQucGFyZW50Tm9kZS5ob3N0KSxkPWQucGFyZW50Tm9kZS5ob3N0KTooaC5wdXNoKGQucGFyZW50Tm9kZSksZD1kLnBhcmVudE5vZGUpO3ZhciB2LGM9W10sZj17fSxwPSExLGc9ITE7aWYoSihoLCh0PT57dmFyIGk9c2kodCk7XCJhXCI9PT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmKHA9dC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLHA9aSYmcCYmdmkocCkmJnApLG0oWHQodCksXCJwaC1uby1jYXB0dXJlXCIpJiYoZz0hMCksYy5wdXNoKFBpKHQsbyxhLGwpKTt2YXIgZT1mdW5jdGlvbih0KXtpZighc2kodCkpcmV0dXJue307dmFyIGk9e307cmV0dXJuIEoodC5hdHRyaWJ1dGVzLChmdW5jdGlvbih0KXtpZih0Lm5hbWUmJjA9PT10Lm5hbWUuaW5kZXhPZihcImRhdGEtcGgtY2FwdHVyZS1hdHRyaWJ1dGVcIikpe3ZhciBlPXQubmFtZS5yZXBsYWNlKFwiZGF0YS1waC1jYXB0dXJlLWF0dHJpYnV0ZS1cIixcIlwiKSxyPXQudmFsdWU7ZSYmciYmdmkocikmJihpW2VdPXIpfX0pKSxpfSh0KTtWKGYsZSl9KSksZylyZXR1cm57cHJvcHM6e30sZXhwbGljaXROb0NhcHR1cmU6Z307aWYoYXx8KFwiYVwiPT09dC50YWdOYW1lLnRvTG93ZXJDYXNlKCl8fFwiYnV0dG9uXCI9PT10LnRhZ05hbWUudG9Mb3dlckNhc2UoKT9jWzBdLiRlbF90ZXh0PWNpKHQpOmNbMF0uJGVsX3RleHQ9WnQodCkpLHApe3ZhciBfLGI7Y1swXS5hdHRyX19ocmVmPXA7dmFyIHc9bnVsbD09KF89d2kocCkpP3ZvaWQgMDpfLmhvc3QseT1udWxsPT1pfHxudWxsPT0oYj1pLmxvY2F0aW9uKT92b2lkIDA6Yi5ob3N0O3cmJnkmJnchPT15JiYodj1wKX1yZXR1cm57cHJvcHM6Vih7JGV2ZW50X3R5cGU6bi50eXBlLCRjZV92ZXJzaW9uOjF9LHU/e306eyRlbGVtZW50czpjfSx7JGVsZW1lbnRzX2NoYWluOnBpKGMpfSxudWxsIT0ocj1jWzBdKSYmci4kZWxfdGV4dD97JGVsX3RleHQ6bnVsbD09KHM9Y1swXSk/dm9pZCAwOnMuJGVsX3RleHR9Ont9LHYmJlwiY2xpY2tcIj09PW4udHlwZT97JGV4dGVybmFsX2NsaWNrX3VybDp2fTp7fSxmKX19Y2xhc3MgVGl7Y29uc3RydWN0b3IodCl7dGhpcy5pPSExLHRoaXMubz1udWxsLHRoaXMucmFnZWNsaWNrcz1uZXcgbWksdGhpcy5oPSExLHRoaXMuaW5zdGFuY2U9dCx0aGlzLm09bnVsbH1nZXQgUygpe3ZhciB0LGksZT1JKHRoaXMuaW5zdGFuY2UuY29uZmlnLmF1dG9jYXB0dXJlKT90aGlzLmluc3RhbmNlLmNvbmZpZy5hdXRvY2FwdHVyZTp7fTtyZXR1cm4gZS51cmxfYWxsb3dsaXN0PW51bGw9PSh0PWUudXJsX2FsbG93bGlzdCk/dm9pZCAwOnQubWFwKCh0PT5uZXcgUmVnRXhwKHQpKSksZS51cmxfaWdub3JlbGlzdD1udWxsPT0oaT1lLnVybF9pZ25vcmVsaXN0KT92b2lkIDA6aS5tYXAoKHQ9Pm5ldyBSZWdFeHAodCkpKSxlfSQoKXtpZih0aGlzLmlzQnJvd3NlclN1cHBvcnRlZCgpKXtpZihpJiZhKXt2YXIgdD10PT57dD10fHwobnVsbD09aT92b2lkIDA6aS5ldmVudCk7dHJ5e3RoaXMuayh0KX1jYXRjaCh0KXt4aS5lcnJvcihcIkZhaWxlZCB0byBjYXB0dXJlIGV2ZW50XCIsdCl9fTtpZihzdChhLFwic3VibWl0XCIsdCx7Y2FwdHVyZTohMH0pLHN0KGEsXCJjaGFuZ2VcIix0LHtjYXB0dXJlOiEwfSksc3QoYSxcImNsaWNrXCIsdCx7Y2FwdHVyZTohMH0pLHRoaXMuUy5jYXB0dXJlX2NvcGllZF90ZXh0KXt2YXIgZT10PT57dD10fHwobnVsbD09aT92b2lkIDA6aS5ldmVudCksdGhpcy5rKHQscCl9O3N0KGEsXCJjb3B5XCIsZSx7Y2FwdHVyZTohMH0pLHN0KGEsXCJjdXRcIixlLHtjYXB0dXJlOiEwfSl9fX1lbHNlIHhpLmluZm8oXCJEaXNhYmxpbmcgQXV0b21hdGljIEV2ZW50IENvbGxlY3Rpb24gYmVjYXVzZSB0aGlzIGJyb3dzZXIgaXMgbm90IHN1cHBvcnRlZFwiKX1zdGFydElmRW5hYmxlZCgpe3RoaXMuaXNFbmFibGVkJiYhdGhpcy5pJiYodGhpcy4kKCksdGhpcy5pPSEwKX1vblJlbW90ZUNvbmZpZyh0KXt0LmVsZW1lbnRzQ2hhaW5Bc1N0cmluZyYmKHRoaXMuaD10LmVsZW1lbnRzQ2hhaW5Bc1N0cmluZyksdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W2x0XTohIXQuYXV0b2NhcHR1cmVfb3B0X291dH0pLHRoaXMubz0hIXQuYXV0b2NhcHR1cmVfb3B0X291dCx0aGlzLnN0YXJ0SWZFbmFibGVkKCl9c2V0RWxlbWVudFNlbGVjdG9ycyh0KXt0aGlzLm09dH1nZXRFbGVtZW50U2VsZWN0b3JzKHQpe3ZhciBpLGU9W107cmV0dXJuIG51bGw9PShpPXRoaXMubSl8fGkuZm9yRWFjaCgoaT0+e3ZhciByPW51bGw9PWE/dm9pZCAwOmEucXVlcnlTZWxlY3RvckFsbChpKTtudWxsPT1yfHxyLmZvckVhY2goKHI9Pnt0PT09ciYmZS5wdXNoKGkpfSkpfSkpLGV9Z2V0IGlzRW5hYmxlZCgpe3ZhciB0LGksZT1udWxsPT0odD10aGlzLmluc3RhbmNlLnBlcnNpc3RlbmNlKT92b2lkIDA6dC5wcm9wc1tsdF0scj10aGlzLm87aWYoTyhyKSYmIUEoZSkmJiF0aGlzLmluc3RhbmNlLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2RlY2lkZSlyZXR1cm4hMTt2YXIgcz1udWxsIT09KGk9dGhpcy5vKSYmdm9pZCAwIT09aT9pOiEhZTtyZXR1cm4hIXRoaXMuaW5zdGFuY2UuY29uZmlnLmF1dG9jYXB0dXJlJiYhc31rKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9XCIkYXV0b2NhcHR1cmVcIiksdGhpcy5pc0VuYWJsZWQpe3ZhciByLHM9dGkodCk7aWYoSnQocykmJihzPXMucGFyZW50Tm9kZXx8bnVsbCksXCIkYXV0b2NhcHR1cmVcIj09PWUmJlwiY2xpY2tcIj09PXQudHlwZSYmdCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpdGhpcy5pbnN0YW5jZS5jb25maWcucmFnZWNsaWNrJiZudWxsIT0ocj10aGlzLnJhZ2VjbGlja3MpJiZyLmlzUmFnZUNsaWNrKHQuY2xpZW50WCx0LmNsaWVudFksKG5ldyBEYXRlKS5nZXRUaW1lKCkpJiZ0aGlzLmsodCxcIiRyYWdlY2xpY2tcIik7dmFyIG49ZT09PXA7aWYocyYmcmkocyx0LHRoaXMuUyxuLG4/W1wiY29weVwiLFwiY3V0XCJdOnZvaWQgMCkpe3Zhcntwcm9wczpvLGV4cGxpY2l0Tm9DYXB0dXJlOmF9PVJpKHMse2U6dCxtYXNrQWxsRWxlbWVudEF0dHJpYnV0ZXM6dGhpcy5pbnN0YW5jZS5jb25maWcubWFza19hbGxfZWxlbWVudF9hdHRyaWJ1dGVzLG1hc2tBbGxUZXh0OnRoaXMuaW5zdGFuY2UuY29uZmlnLm1hc2tfYWxsX3RleHQsZWxlbWVudEF0dHJpYnV0ZUlnbm9yZUxpc3Q6dGhpcy5TLmVsZW1lbnRfYXR0cmlidXRlX2lnbm9yZWxpc3QsZWxlbWVudHNDaGFpbkFzU3RyaW5nOnRoaXMuaH0pO2lmKGEpcmV0dXJuITE7dmFyIGw9dGhpcy5nZXRFbGVtZW50U2VsZWN0b3JzKHMpO2lmKGwmJmwubGVuZ3RoPjAmJihvLiRlbGVtZW50X3NlbGVjdG9ycz1sKSxlPT09cCl7dmFyIHUsaD1RdChudWxsPT1pfHxudWxsPT0odT1pLmdldFNlbGVjdGlvbigpKT92b2lkIDA6dS50b1N0cmluZygpKSxkPXQudHlwZXx8XCJjbGlwYm9hcmRcIjtpZighaClyZXR1cm4hMTtvLiRzZWxlY3RlZF9jb250ZW50PWgsby4kY29weV90eXBlPWR9cmV0dXJuIHRoaXMuaW5zdGFuY2UuY2FwdHVyZShlLG8pLCEwfX19aXNCcm93c2VyU3VwcG9ydGVkKCl7cmV0dXJuIEUobnVsbD09YT92b2lkIDA6YS5xdWVyeVNlbGVjdG9yQWxsKX19TWF0aC50cnVuY3x8KE1hdGgudHJ1bmM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCk6TWF0aC5mbG9vcih0KX0pLE51bWJlci5pc0ludGVnZXJ8fChOdW1iZXIuaXNJbnRlZ2VyPWZ1bmN0aW9uKHQpe3JldHVybiBGKHQpJiZpc0Zpbml0ZSh0KSYmTWF0aC5mbG9vcih0KT09PXR9KTt2YXIgTWk9XCIwMTIzNDU2Nzg5YWJjZGVmXCI7Y2xhc3MgT2l7Y29uc3RydWN0b3IodCl7aWYodGhpcy5ieXRlcz10LDE2IT09dC5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5vdCAxMjgtYml0IGxlbmd0aFwiKX1zdGF0aWMgZnJvbUZpZWxkc1Y3KHQsaSxlLHIpe2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHQpfHwhTnVtYmVyLmlzSW50ZWdlcihpKXx8IU51bWJlci5pc0ludGVnZXIoZSl8fCFOdW1iZXIuaXNJbnRlZ2VyKHIpfHx0PDB8fGk8MHx8ZTwwfHxyPDB8fHQ+MHhmZmZmZmZmZmZmZmZ8fGk+NDA5NXx8ZT4xMDczNzQxODIzfHxyPjQyOTQ5NjcyOTUpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJpbnZhbGlkIGZpZWxkIHZhbHVlXCIpO3ZhciBzPW5ldyBVaW50OEFycmF5KDE2KTtyZXR1cm4gc1swXT10L01hdGgucG93KDIsNDApLHNbMV09dC9NYXRoLnBvdygyLDMyKSxzWzJdPXQvTWF0aC5wb3coMiwyNCksc1szXT10L01hdGgucG93KDIsMTYpLHNbNF09dC9NYXRoLnBvdygyLDgpLHNbNV09dCxzWzZdPTExMnxpPj4+OCxzWzddPWksc1s4XT0xMjh8ZT4+PjI0LHNbOV09ZT4+PjE2LHNbMTBdPWU+Pj44LHNbMTFdPWUsc1sxMl09cj4+PjI0LHNbMTNdPXI+Pj4xNixzWzE0XT1yPj4+OCxzWzE1XT1yLG5ldyBPaShzKX10b1N0cmluZygpe2Zvcih2YXIgdD1cIlwiLGk9MDtpPHRoaXMuYnl0ZXMubGVuZ3RoO2krKyl0PXQrTWkuY2hhckF0KHRoaXMuYnl0ZXNbaV0+Pj40KStNaS5jaGFyQXQoMTUmdGhpcy5ieXRlc1tpXSksMyE9PWkmJjUhPT1pJiY3IT09aSYmOSE9PWl8fCh0Kz1cIi1cIik7aWYoMzYhPT10Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFVVSUR2NyB3YXMgZ2VuZXJhdGVkXCIpO3JldHVybiB0fWNsb25lKCl7cmV0dXJuIG5ldyBPaSh0aGlzLmJ5dGVzLnNsaWNlKDApKX1lcXVhbHModCl7cmV0dXJuIDA9PT10aGlzLmNvbXBhcmVUbyh0KX1jb21wYXJlVG8odCl7Zm9yKHZhciBpPTA7aTwxNjtpKyspe3ZhciBlPXRoaXMuYnl0ZXNbaV0tdC5ieXRlc1tpXTtpZigwIT09ZSlyZXR1cm4gTWF0aC5zaWduKGUpfXJldHVybiAwfX1jbGFzcyBDaXtjb25zdHJ1Y3Rvcigpe3RoaXMuST0wLHRoaXMuUD0wLHRoaXMuUj1uZXcgRGl9Z2VuZXJhdGUoKXt2YXIgdD10aGlzLmdlbmVyYXRlT3JBYm9ydCgpO2lmKFIodCkpe3RoaXMuST0wO3ZhciBpPXRoaXMuZ2VuZXJhdGVPckFib3J0KCk7aWYoUihpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2VuZXJhdGUgVVVJRCBhZnRlciB0aW1lc3RhbXAgcmVzZXRcIik7cmV0dXJuIGl9cmV0dXJuIHR9Z2VuZXJhdGVPckFib3J0KCl7dmFyIHQ9RGF0ZS5ub3coKTtpZih0PnRoaXMuSSl0aGlzLkk9dCx0aGlzLlQoKTtlbHNle2lmKCEodCsxZTQ+dGhpcy5JKSlyZXR1cm47dGhpcy5QKyssdGhpcy5QPjQzOTgwNDY1MTExMDMmJih0aGlzLkkrKyx0aGlzLlQoKSl9cmV0dXJuIE9pLmZyb21GaWVsZHNWNyh0aGlzLkksTWF0aC50cnVuYyh0aGlzLlAvTWF0aC5wb3coMiwzMCkpLHRoaXMuUCZNYXRoLnBvdygyLDMwKS0xLHRoaXMuUi5uZXh0VWludDMyKCkpfVQoKXt0aGlzLlA9MTAyNCp0aGlzLlIubmV4dFVpbnQzMigpKygxMDIzJnRoaXMuUi5uZXh0VWludDMyKCkpfX12YXIgRmksQWk9dD0+e2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVVUlEVjdfREVOWV9XRUFLX1JORyYmVVVJRFY3X0RFTllfV0VBS19STkcpdGhyb3cgbmV3IEVycm9yKFwibm8gY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nIFJORyBhdmFpbGFibGVcIik7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspdFtpXT02NTUzNipNYXRoLnRydW5jKDY1NTM2Kk1hdGgucmFuZG9tKCkpK01hdGgudHJ1bmMoNjU1MzYqTWF0aC5yYW5kb20oKSk7cmV0dXJuIHR9O2kmJiFSKGkuY3J5cHRvKSYmY3J5cHRvLmdldFJhbmRvbVZhbHVlcyYmKEFpPXQ9PmNyeXB0by5nZXRSYW5kb21WYWx1ZXModCkpO2NsYXNzIERpe2NvbnN0cnVjdG9yKCl7dGhpcy5NPW5ldyBVaW50MzJBcnJheSg4KSx0aGlzLk89MS8wfW5leHRVaW50MzIoKXtyZXR1cm4gdGhpcy5PPj10aGlzLk0ubGVuZ3RoJiYoQWkodGhpcy5NKSx0aGlzLk89MCksdGhpcy5NW3RoaXMuTysrXX19dmFyIGppPSgpPT5MaSgpLnRvU3RyaW5nKCksTGk9KCk9PihGaXx8KEZpPW5ldyBDaSkpLmdlbmVyYXRlKCksTmk9XCJUaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVFwiLHppPVwiXCI7dmFyIFVpPS9bYS16MC05XVthLXowLTktXStcXC5bYS16XXsyLH0kL2k7ZnVuY3Rpb24gcWkodCxpKXtpZihpKXt2YXIgZT1mdW5jdGlvbih0LGkpe2lmKHZvaWQgMD09PWkmJihpPWEpLHppKXJldHVybiB6aTtpZighaSlyZXR1cm5cIlwiO2lmKFtcImxvY2FsaG9zdFwiLFwiMTI3LjAuMC4xXCJdLmluY2x1ZGVzKHQpKXJldHVyblwiXCI7Zm9yKHZhciBlPXQuc3BsaXQoXCIuXCIpLHI9TWF0aC5taW4oZS5sZW5ndGgsOCkscz1cImRtbl9jaGtfXCIramkoKSxuPW5ldyBSZWdFeHAoXCIoXnw7KVxcXFxzKlwiK3MrXCI9MVwiKTshemkmJnItLTspe3ZhciBvPWUuc2xpY2Uocikuam9pbihcIi5cIiksbD1zK1wiPTE7ZG9tYWluPS5cIitvO2kuY29va2llPWwsbi50ZXN0KGkuY29va2llKSYmKGkuY29va2llPWwrXCI7ZXhwaXJlcz1cIitOaSx6aT1vKX1yZXR1cm4geml9KHQpO2lmKCFlKXt2YXIgcj0odD0+e3ZhciBpPXQubWF0Y2goVWkpO3JldHVybiBpP2lbMF06XCJcIn0pKHQpO3IhPT1lJiZOLmluZm8oXCJXYXJuaW5nOiBjb29raWUgc3ViZG9tYWluIGRpc2NvdmVyeSBtaXNtYXRjaFwiLHIsZSksZT1yfXJldHVybiBlP1wiOyBkb21haW49LlwiK2U6XCJcIn1yZXR1cm5cIlwifXZhciBCaSxIaT17QzooKT0+ISFhLEY6ZnVuY3Rpb24odCl7Ti5lcnJvcihcImNvb2tpZVN0b3JlIGVycm9yOiBcIit0KX0sQTpmdW5jdGlvbih0KXtpZihhKXt0cnl7Zm9yKHZhciBpPXQrXCI9XCIsZT1hLmNvb2tpZS5zcGxpdChcIjtcIikuZmlsdGVyKCh0PT50Lmxlbmd0aCkpLHI9MDtyPGUubGVuZ3RoO3IrKyl7Zm9yKHZhciBzPWVbcl07XCIgXCI9PXMuY2hhckF0KDApOylzPXMuc3Vic3RyaW5nKDEscy5sZW5ndGgpO2lmKDA9PT1zLmluZGV4T2YoaSkpcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzLnN1YnN0cmluZyhpLmxlbmd0aCxzLmxlbmd0aCkpfX1jYXRjaCh0KXt9cmV0dXJuIG51bGx9fSxEOmZ1bmN0aW9uKHQpe3ZhciBpO3RyeXtpPUpTT04ucGFyc2UoSGkuQSh0KSl8fHt9fWNhdGNoKHQpe31yZXR1cm4gaX0sajpmdW5jdGlvbih0LGksZSxyLHMpe2lmKGEpdHJ5e3ZhciBuPVwiXCIsbz1cIlwiLGw9cWkoYS5sb2NhdGlvbi5ob3N0bmFtZSxyKTtpZihlKXt2YXIgdT1uZXcgRGF0ZTt1LnNldFRpbWUodS5nZXRUaW1lKCkrMjQqZSo2MCo2MCoxZTMpLG49XCI7IGV4cGlyZXM9XCIrdS50b1VUQ1N0cmluZygpfXMmJihvPVwiOyBzZWN1cmVcIik7dmFyIGg9dCtcIj1cIitlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoaSkpK24rXCI7IFNhbWVTaXRlPUxheDsgcGF0aD0vXCIrbCtvO3JldHVybiBoLmxlbmd0aD4zNjg2LjQmJk4ud2FybihcImNvb2tpZVN0b3JlIHdhcm5pbmc6IGxhcmdlIGNvb2tpZSwgbGVuPVwiK2gubGVuZ3RoKSxhLmNvb2tpZT1oLGh9Y2F0Y2godCl7cmV0dXJufX0sTDpmdW5jdGlvbih0LGkpe3RyeXtIaS5qKHQsXCJcIiwtMSxpKX1jYXRjaCh0KXtyZXR1cm59fX0sV2k9bnVsbCxHaT17QzpmdW5jdGlvbigpe2lmKCFPKFdpKSlyZXR1cm4gV2k7dmFyIHQ9ITA7aWYoUihpKSl0PSExO2Vsc2UgdHJ5e3ZhciBlPVwiX19tcGxzc3VwcG9ydF9fXCI7R2kuaihlLFwieHl6XCIpLCdcInh5elwiJyE9PUdpLkEoZSkmJih0PSExKSxHaS5MKGUpfWNhdGNoKGkpe3Q9ITF9cmV0dXJuIHR8fE4uZXJyb3IoXCJsb2NhbFN0b3JhZ2UgdW5zdXBwb3J0ZWQ7IGZhbGxpbmcgYmFjayB0byBjb29raWUgc3RvcmVcIiksV2k9dCx0fSxGOmZ1bmN0aW9uKHQpe04uZXJyb3IoXCJsb2NhbFN0b3JhZ2UgZXJyb3I6IFwiK3QpfSxBOmZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gbnVsbD09aT92b2lkIDA6aS5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0KX1jYXRjaCh0KXtHaS5GKHQpfXJldHVybiBudWxsfSxEOmZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShHaS5BKHQpKXx8e319Y2F0Y2godCl7fXJldHVybiBudWxsfSxqOmZ1bmN0aW9uKHQsZSl7dHJ5e251bGw9PWl8fGkubG9jYWxTdG9yYWdlLnNldEl0ZW0odCxKU09OLnN0cmluZ2lmeShlKSl9Y2F0Y2godCl7R2kuRih0KX19LEw6ZnVuY3Rpb24odCl7dHJ5e251bGw9PWl8fGkubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odCl9Y2F0Y2godCl7R2kuRih0KX19fSxKaT1bXCJkaXN0aW5jdF9pZFwiLFN0LCR0LHp0LE50XSxWaT1CKHt9LEdpLHtEOmZ1bmN0aW9uKHQpe3RyeXt2YXIgaT17fTt0cnl7aT1IaS5EKHQpfHx7fX1jYXRjaCh0KXt9dmFyIGU9VihpLEpTT04ucGFyc2UoR2kuQSh0KXx8XCJ7fVwiKSk7cmV0dXJuIEdpLmoodCxlKSxlfWNhdGNoKHQpe31yZXR1cm4gbnVsbH0sajpmdW5jdGlvbih0LGksZSxyLHMsbil7dHJ5e0dpLmoodCxpLHZvaWQgMCx2b2lkIDAsbik7dmFyIG89e307SmkuZm9yRWFjaCgodD0+e2lbdF0mJihvW3RdPWlbdF0pfSkpLE9iamVjdC5rZXlzKG8pLmxlbmd0aCYmSGkuaih0LG8sZSxyLHMsbil9Y2F0Y2godCl7R2kuRih0KX19LEw6ZnVuY3Rpb24odCxlKXt0cnl7bnVsbD09aXx8aS5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh0KSxIaS5MKHQsZSl9Y2F0Y2godCl7R2kuRih0KX19fSksS2k9e30sWWk9e0M6ZnVuY3Rpb24oKXtyZXR1cm4hMH0sRjpmdW5jdGlvbih0KXtOLmVycm9yKFwibWVtb3J5U3RvcmFnZSBlcnJvcjogXCIrdCl9LEE6ZnVuY3Rpb24odCl7cmV0dXJuIEtpW3RdfHxudWxsfSxEOmZ1bmN0aW9uKHQpe3JldHVybiBLaVt0XXx8bnVsbH0sajpmdW5jdGlvbih0LGkpe0tpW3RdPWl9LEw6ZnVuY3Rpb24odCl7ZGVsZXRlIEtpW3RdfX0sWGk9bnVsbCxRaT17QzpmdW5jdGlvbigpe2lmKCFPKFhpKSlyZXR1cm4gWGk7aWYoWGk9ITAsUihpKSlYaT0hMTtlbHNlIHRyeXt2YXIgdD1cIl9fc3VwcG9ydF9fXCI7UWkuaih0LFwieHl6XCIpLCdcInh5elwiJyE9PVFpLkEodCkmJihYaT0hMSksUWkuTCh0KX1jYXRjaCh0KXtYaT0hMX1yZXR1cm4gWGl9LEY6ZnVuY3Rpb24odCl7Ti5lcnJvcihcInNlc3Npb25TdG9yYWdlIGVycm9yOiBcIix0KX0sQTpmdW5jdGlvbih0KXt0cnl7cmV0dXJuIG51bGw9PWk/dm9pZCAwOmkuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSh0KX1jYXRjaCh0KXtRaS5GKHQpfXJldHVybiBudWxsfSxEOmZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShRaS5BKHQpKXx8bnVsbH1jYXRjaCh0KXt9cmV0dXJuIG51bGx9LGo6ZnVuY3Rpb24odCxlKXt0cnl7bnVsbD09aXx8aS5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHQsSlNPTi5zdHJpbmdpZnkoZSkpfWNhdGNoKHQpe1FpLkYodCl9fSxMOmZ1bmN0aW9uKHQpe3RyeXtudWxsPT1pfHxpLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0odCl9Y2F0Y2godCl7UWkuRih0KX19fTshZnVuY3Rpb24odCl7dFt0LlBFTkRJTkc9LTFdPVwiUEVORElOR1wiLHRbdC5ERU5JRUQ9MF09XCJERU5JRURcIix0W3QuR1JBTlRFRD0xXT1cIkdSQU5URURcIn0oQml8fChCaT17fSkpO2NsYXNzIFppe2NvbnN0cnVjdG9yKHQpe3RoaXMuTj10fWdldCBTKCl7cmV0dXJuIHRoaXMuTi5jb25maWd9Z2V0IGNvbnNlbnQoKXtyZXR1cm4gdGhpcy5VKCk/QmkuREVOSUVEOnRoaXMucX1pc09wdGVkT3V0KCl7cmV0dXJuIHRoaXMuY29uc2VudD09PUJpLkRFTklFRHx8dGhpcy5jb25zZW50PT09QmkuUEVORElORyYmdGhpcy5TLm9wdF9vdXRfY2FwdHVyaW5nX2J5X2RlZmF1bHR9aXNPcHRlZEluKCl7cmV0dXJuIXRoaXMuaXNPcHRlZE91dCgpfW9wdEluT3V0KHQpe3RoaXMuQi5qKHRoaXMuSCx0PzE6MCx0aGlzLlMuY29va2llX2V4cGlyYXRpb24sdGhpcy5TLmNyb3NzX3N1YmRvbWFpbl9jb29raWUsdGhpcy5TLnNlY3VyZV9jb29raWUpfXJlc2V0KCl7dGhpcy5CLkwodGhpcy5ILHRoaXMuUy5jcm9zc19zdWJkb21haW5fY29va2llKX1nZXQgSCgpe3Zhcnt0b2tlbjp0LG9wdF9vdXRfY2FwdHVyaW5nX2Nvb2tpZV9wcmVmaXg6aX09dGhpcy5OLmNvbmZpZztyZXR1cm4oaXx8XCJfX3BoX29wdF9pbl9vdXRfXCIpK3R9Z2V0IHEoKXt2YXIgdD10aGlzLkIuQSh0aGlzLkgpO3JldHVyblwiMVwiPT09dD9CaS5HUkFOVEVEOlwiMFwiPT09dD9CaS5ERU5JRUQ6QmkuUEVORElOR31nZXQgQigpe2lmKCF0aGlzLlcpe3ZhciB0PXRoaXMuUy5vcHRfb3V0X2NhcHR1cmluZ19wZXJzaXN0ZW5jZV90eXBlO3RoaXMuVz1cImxvY2FsU3RvcmFnZVwiPT09dD9HaTpIaTt2YXIgaT1cImxvY2FsU3RvcmFnZVwiPT09dD9IaTpHaTtpLkEodGhpcy5IKSYmKHRoaXMuVy5BKHRoaXMuSCl8fHRoaXMub3B0SW5PdXQoXCIxXCI9PT1pLkEodGhpcy5IKSksaS5MKHRoaXMuSCx0aGlzLlMuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSkpfXJldHVybiB0aGlzLld9VSgpe3JldHVybiEhdGhpcy5TLnJlc3BlY3RfZG50JiYhIXJ0KFtudWxsPT1vP3ZvaWQgMDpvLmRvTm90VHJhY2ssbnVsbD09bz92b2lkIDA6by5tc0RvTm90VHJhY2ssYy5kb05vdFRyYWNrXSwodD0+bShbITAsMSxcIjFcIixcInllc1wiXSx0KSkpfX12YXIgdGU9eihcIltEZWFkIENsaWNrc11cIiksaWU9KCk9PiEwLGVlPXQ9Pnt2YXIgaSxlPSEobnVsbD09KGk9dC5pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fCFpLmdldF9wcm9wZXJ0eSh2dCkpLHI9dC5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrcztyZXR1cm4gQShyKT9yOmV9O2NsYXNzIHJle2dldCBsYXp5TG9hZGVkRGVhZENsaWNrc0F1dG9jYXB0dXJlKCl7cmV0dXJuIHRoaXMuR31jb25zdHJ1Y3Rvcih0LGksZSl7dGhpcy5pbnN0YW5jZT10LHRoaXMuaXNFbmFibGVkPWksdGhpcy5vbkNhcHR1cmU9ZSx0aGlzLnN0YXJ0SWZFbmFibGVkKCl9b25SZW1vdGVDb25maWcodCl7dGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSYmdGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W3Z0XTpudWxsPT10P3ZvaWQgMDp0LmNhcHR1cmVEZWFkQ2xpY2tzfSksdGhpcy5zdGFydElmRW5hYmxlZCgpfXN0YXJ0SWZFbmFibGVkKCl7dGhpcy5pc0VuYWJsZWQodGhpcykmJnRoaXMuSigoKCk9Pnt0aGlzLlYoKX0pKX1KKHQpe3ZhciBpLGU7bnVsbCE9KGk9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pJiZpLmluaXREZWFkQ2xpY2tzQXV0b2NhcHR1cmUmJnQoKSxudWxsPT0oZT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PWUubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuaW5zdGFuY2UsXCJkZWFkLWNsaWNrcy1hdXRvY2FwdHVyZVwiLChpPT57aT90ZS5lcnJvcihcImZhaWxlZCB0byBsb2FkIHNjcmlwdFwiLGkpOnQoKX0pKX1WKCl7dmFyIHQ7aWYoYSl7aWYoIXRoaXMuRyYmbnVsbCE9KHQ9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pJiZ0LmluaXREZWFkQ2xpY2tzQXV0b2NhcHR1cmUpe3ZhciBpPUkodGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrcyk/dGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9kZWFkX2NsaWNrczp7fTtpLl9fb25DYXB0dXJlPXRoaXMub25DYXB0dXJlLHRoaXMuRz1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXy5pbml0RGVhZENsaWNrc0F1dG9jYXB0dXJlKHRoaXMuaW5zdGFuY2UsaSksdGhpcy5HLnN0YXJ0KGEpLHRlLmluZm8oXCJzdGFydGluZy4uLlwiKX19ZWxzZSB0ZS5lcnJvcihcImBkb2N1bWVudGAgbm90IGZvdW5kLiBDYW5ub3Qgc3RhcnQuXCIpfXN0b3AoKXt0aGlzLkcmJih0aGlzLkcuc3RvcCgpLHRoaXMuRz12b2lkIDAsdGUuaW5mbyhcInN0b3BwaW5nLi4uXCIpKX19dmFyIHNlPXooXCJbRXhjZXB0aW9uQXV0b2NhcHR1cmVdXCIpO2NsYXNzIG5le2NvbnN0cnVjdG9yKHQpe3ZhciBlO3RoaXMuSz0oKT0+e3ZhciB0O2lmKGkmJnRoaXMuaXNFbmFibGVkJiZudWxsIT0odD1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJnQuZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucyl7dmFyIGU9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18uZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucy53cmFwT25FcnJvcixyPWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fLmVycm9yV3JhcHBpbmdGdW5jdGlvbnMud3JhcFVuaGFuZGxlZFJlamVjdGlvbixzPWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fLmVycm9yV3JhcHBpbmdGdW5jdGlvbnMud3JhcENvbnNvbGVFcnJvcjt0cnl7IXRoaXMuWSYmdGhpcy5jb25maWcuY2FwdHVyZV91bmhhbmRsZWRfZXJyb3JzJiYodGhpcy5ZPWUodGhpcy5jYXB0dXJlRXhjZXB0aW9uLmJpbmQodGhpcykpKSwhdGhpcy5YJiZ0aGlzLmNvbmZpZy5jYXB0dXJlX3VuaGFuZGxlZF9yZWplY3Rpb25zJiYodGhpcy5YPXIodGhpcy5jYXB0dXJlRXhjZXB0aW9uLmJpbmQodGhpcykpKSwhdGhpcy5aJiZ0aGlzLmNvbmZpZy5jYXB0dXJlX2NvbnNvbGVfZXJyb3JzJiYodGhpcy5aPXModGhpcy5jYXB0dXJlRXhjZXB0aW9uLmJpbmQodGhpcykpKX1jYXRjaCh0KXtzZS5lcnJvcihcImZhaWxlZCB0byBzdGFydFwiLHQpLHRoaXMudHQoKX19fSx0aGlzLmluc3RhbmNlPXQsdGhpcy5yZW1vdGVFbmFibGVkPSEobnVsbD09KGU9dGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fCFlLnByb3BzW2h0XSksdGhpcy5jb25maWc9dGhpcy5pdCgpLHRoaXMuc3RhcnRJZkVuYWJsZWQoKX1pdCgpe3ZhciB0PXRoaXMuaW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfZXhjZXB0aW9ucyxpPXtjYXB0dXJlX3VuaGFuZGxlZF9lcnJvcnM6ITEsY2FwdHVyZV91bmhhbmRsZWRfcmVqZWN0aW9uczohMSxjYXB0dXJlX2NvbnNvbGVfZXJyb3JzOiExfTtyZXR1cm4gSSh0KT9pPUIoe30saSx0KTooUih0KT90aGlzLnJlbW90ZUVuYWJsZWQ6dCkmJihpPUIoe30saSx7Y2FwdHVyZV91bmhhbmRsZWRfZXJyb3JzOiEwLGNhcHR1cmVfdW5oYW5kbGVkX3JlamVjdGlvbnM6ITB9KSksaX1nZXQgaXNFbmFibGVkKCl7cmV0dXJuIHRoaXMuY29uZmlnLmNhcHR1cmVfY29uc29sZV9lcnJvcnN8fHRoaXMuY29uZmlnLmNhcHR1cmVfdW5oYW5kbGVkX2Vycm9yc3x8dGhpcy5jb25maWcuY2FwdHVyZV91bmhhbmRsZWRfcmVqZWN0aW9uc31zdGFydElmRW5hYmxlZCgpe3RoaXMuaXNFbmFibGVkJiYoc2UuaW5mbyhcImVuYWJsZWRcIiksdGhpcy5KKHRoaXMuSykpfUoodCl7dmFyIGksZTtudWxsIT0oaT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJmkuZXJyb3JXcmFwcGluZ0Z1bmN0aW9ucyYmdCgpLG51bGw9PShlPWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5fHxlLmxvYWRFeHRlcm5hbERlcGVuZGVuY3kodGhpcy5pbnN0YW5jZSxcImV4Y2VwdGlvbi1hdXRvY2FwdHVyZVwiLChpPT57aWYoaSlyZXR1cm4gc2UuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBzY3JpcHRcIixpKTt0KCl9KSl9dHQoKXt2YXIgdCxpLGU7bnVsbD09KHQ9dGhpcy5ZKXx8dC5jYWxsKHRoaXMpLHRoaXMuWT12b2lkIDAsbnVsbD09KGk9dGhpcy5YKXx8aS5jYWxsKHRoaXMpLHRoaXMuWD12b2lkIDAsbnVsbD09KGU9dGhpcy5aKXx8ZS5jYWxsKHRoaXMpLHRoaXMuWj12b2lkIDB9b25SZW1vdGVDb25maWcodCl7dmFyIGk9dC5hdXRvY2FwdHVyZUV4Y2VwdGlvbnM7dGhpcy5yZW1vdGVFbmFibGVkPSEhaXx8ITEsdGhpcy5jb25maWc9dGhpcy5pdCgpLHRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UmJnRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UucmVnaXN0ZXIoe1todF06dGhpcy5yZW1vdGVFbmFibGVkfSksdGhpcy5zdGFydElmRW5hYmxlZCgpfWNhcHR1cmVFeGNlcHRpb24odCl7dmFyIGk9dGhpcy5pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwidWlcIik7dC4kZXhjZXB0aW9uX3BlcnNvblVSTD1pK1wiL3Byb2plY3QvXCIrdGhpcy5pbnN0YW5jZS5jb25maWcudG9rZW4rXCIvcGVyc29uL1wiK3RoaXMuaW5zdGFuY2UuZ2V0X2Rpc3RpbmN0X2lkKCksdGhpcy5pbnN0YW5jZS5leGNlcHRpb25zLnNlbmRFeGNlcHRpb25FdmVudCh0KX19ZnVuY3Rpb24gb2UodCl7cmV0dXJuIVIoRXZlbnQpJiZhZSh0LEV2ZW50KX1mdW5jdGlvbiBhZSh0LGkpe3RyeXtyZXR1cm4gdCBpbnN0YW5jZW9mIGl9Y2F0Y2godCl7cmV0dXJuITF9fWZ1bmN0aW9uIGxlKHQpe3N3aXRjaChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkpe2Nhc2VcIltvYmplY3QgRXJyb3JdXCI6Y2FzZVwiW29iamVjdCBFeGNlcHRpb25dXCI6Y2FzZVwiW29iamVjdCBET01FeGNlcHRpb25dXCI6Y2FzZVwiW29iamVjdCBET01FcnJvcl1cIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiBhZSh0LEVycm9yKX19ZnVuY3Rpb24gdWUodCxpKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpPT09XCJbb2JqZWN0IFwiK2krXCJdXCJ9ZnVuY3Rpb24gaGUodCl7cmV0dXJuIHVlKHQsXCJET01FcnJvclwiKX12YXIgZGU9L1xcKGVycm9yOiAoLiopXFwpLyx2ZT01MCxjZT1cIj9cIjtmdW5jdGlvbiBmZSh0LGksZSxyKXt2YXIgcz17cGxhdGZvcm06XCJ3ZWI6amF2YXNjcmlwdFwiLGZpbGVuYW1lOnQsZnVuY3Rpb246XCI8YW5vbnltb3VzPlwiPT09aT9jZTppLGluX2FwcDohMH07cmV0dXJuIFIoZSl8fChzLmxpbmVubz1lKSxSKHIpfHwocy5jb2xubz1yKSxzfXZhciBwZT0vXlxccyphdCAoXFxTKz8pKD86OihcXGQrKSkoPzo6KFxcZCspKVxccyokL2ksZ2U9L15cXHMqYXQgKD86KC4rP1xcKSg/OiBcXFsuK1xcXSk/fC4qPykgP1xcKCg/OmFkZHJlc3MgYXQgKT8pPyg/OmFzeW5jICk/KCg/Ojxhbm9ueW1vdXM+fFstYS16XSs6fC4qYnVuZGxlfFxcLyk/Lio/KSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xcKT9cXHMqJC9pLF9lPS9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLyxtZT0vXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApPygoPzpbLWEtel0rKT86XFwvLio/fFxcW25hdGl2ZSBjb2RlXFxdfFteQF0qKD86YnVuZGxlfFxcZCtcXC5qcyl8XFwvW1xcd1xcLS4gLz1dKykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXHMqJC9pLGJlPS8oXFxTKykgbGluZSAoXFxkKykoPzogPiBldmFsIGxpbmUgXFxkKykqID4gZXZhbC9pLHdlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsaT1uZXcgQXJyYXkodCksZT0wO2U8dDtlKyspaVtlXT1hcmd1bWVudHNbZV07dmFyIHI9aS5zb3J0KCgodCxpKT0+dFswXS1pWzBdKSkubWFwKCh0PT50WzFdKSk7cmV0dXJuIGZ1bmN0aW9uKHQsaSl7dm9pZCAwPT09aSYmKGk9MCk7Zm9yKHZhciBlPVtdLHM9dC5zcGxpdChcIlxcblwiKSxuPWk7bjxzLmxlbmd0aDtuKyspe3ZhciBvPXNbbl07aWYoIShvLmxlbmd0aD4xMDI0KSl7dmFyIGE9ZGUudGVzdChvKT9vLnJlcGxhY2UoZGUsXCIkMVwiKTpvO2lmKCFhLm1hdGNoKC9cXFMqRXJyb3I6IC8pKXtmb3IodmFyIGwgb2Ygcil7dmFyIHU9bChhKTtpZih1KXtlLnB1c2godSk7YnJlYWt9fWlmKGUubGVuZ3RoPj12ZSlicmVha319fXJldHVybiBmdW5jdGlvbih0KXtpZighdC5sZW5ndGgpcmV0dXJuW107dmFyIGk9QXJyYXkuZnJvbSh0KTtyZXR1cm4gaS5yZXZlcnNlKCksaS5zbGljZSgwLHZlKS5tYXAoKHQ9PkIoe30sdCx7ZmlsZW5hbWU6dC5maWxlbmFtZXx8eWUoaSkuZmlsZW5hbWUsZnVuY3Rpb246dC5mdW5jdGlvbnx8Y2V9KSkpfShlKX19KC4uLltbMzAsdD0+e3ZhciBpPXBlLmV4ZWModCk7aWYoaSl7dmFyWyxlLHIsc109aTtyZXR1cm4gZmUoZSxjZSwrciwrcyl9dmFyIG49Z2UuZXhlYyh0KTtpZihuKXtpZihuWzJdJiYwPT09blsyXS5pbmRleE9mKFwiZXZhbFwiKSl7dmFyIG89X2UuZXhlYyhuWzJdKTtvJiYoblsyXT1vWzFdLG5bM109b1syXSxuWzRdPW9bM10pfXZhclthLGxdPXhlKG5bMV18fGNlLG5bMl0pO3JldHVybiBmZShsLGEsblszXT8rblszXTp2b2lkIDAsbls0XT8rbls0XTp2b2lkIDApfX1dLFs1MCx0PT57dmFyIGk9bWUuZXhlYyh0KTtpZihpKXtpZihpWzNdJiZpWzNdLmluZGV4T2YoXCIgPiBldmFsXCIpPi0xKXt2YXIgZT1iZS5leGVjKGlbM10pO2UmJihpWzFdPWlbMV18fFwiZXZhbFwiLGlbM109ZVsxXSxpWzRdPWVbMl0saVs1XT1cIlwiKX12YXIgcj1pWzNdLHM9aVsxXXx8Y2U7cmV0dXJuW3Mscl09eGUocyxyKSxmZShyLHMsaVs0XT8raVs0XTp2b2lkIDAsaVs1XT8raVs1XTp2b2lkIDApfX1dXSk7ZnVuY3Rpb24geWUodCl7cmV0dXJuIHRbdC5sZW5ndGgtMV18fHt9fXZhciBTZSwkZSxrZSx4ZT0odCxpKT0+e3ZhciBlPS0xIT09dC5pbmRleE9mKFwic2FmYXJpLWV4dGVuc2lvblwiKSxyPS0xIT09dC5pbmRleE9mKFwic2FmYXJpLXdlYi1leHRlbnNpb25cIik7cmV0dXJuIGV8fHI/Wy0xIT09dC5pbmRleE9mKFwiQFwiKT90LnNwbGl0KFwiQFwiKVswXTpjZSxlP1wic2FmYXJpLWV4dGVuc2lvbjpcIitpOlwic2FmYXJpLXdlYi1leHRlbnNpb246XCIraV06W3QsaV19O3ZhciBFZT0vXig/OltVdV1uY2F1Z2h0ICg/OmV4Y2VwdGlvbjogKT8pPyg/OigoPzpFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkl8KUVycm9yKTogKT8oLiopJC9pO2Z1bmN0aW9uIEllKHQsaSl7dm9pZCAwPT09aSYmKGk9MCk7dmFyIGU9dC5zdGFja3RyYWNlfHx0LnN0YWNrfHxcIlwiLHI9ZnVuY3Rpb24odCl7aWYodCYmUGUudGVzdCh0Lm1lc3NhZ2UpKXJldHVybiAxO3JldHVybiAwfSh0KTt0cnl7dmFyIHM9d2Usbj1mdW5jdGlvbih0LGkpe3ZhciBlPWZ1bmN0aW9uKHQpe3ZhciBpPWdsb2JhbFRoaXMuX3Bvc3Rob2dDaHVua0lkcztpZighaSlyZXR1cm57fTt2YXIgZT1PYmplY3Qua2V5cyhpKTtyZXR1cm4ga2UmJmUubGVuZ3RoPT09JGV8fCgkZT1lLmxlbmd0aCxrZT1lLnJlZHVjZSgoKGUscik9PntTZXx8KFNlPXt9KTt2YXIgcz1TZVtyXTtpZihzKWVbc1swXV09c1sxXTtlbHNlIGZvcih2YXIgbj10KHIpLG89bi5sZW5ndGgtMTtvPj0wO28tLSl7dmFyIGE9bltvXSxsPW51bGw9PWE/dm9pZCAwOmEuZmlsZW5hbWUsdT1pW3JdO2lmKGwmJnUpe2VbbF09dSxTZVtyXT1bbCx1XTticmVha319cmV0dXJuIGV9KSx7fSkpLGtlfShpKTtyZXR1cm4gdC5mb3JFYWNoKCh0PT57dC5maWxlbmFtZSYmKHQuY2h1bmtfaWQ9ZVt0LmZpbGVuYW1lXSl9KSksdH0ocyhlLHIpLHMpO3JldHVybiBuLnNsaWNlKDAsbi5sZW5ndGgtaSl9Y2F0Y2godCl7fXJldHVybltdfXZhciBQZT0vTWluaWZpZWQgUmVhY3QgZXJyb3IgI1xcZCs7L2k7ZnVuY3Rpb24gUmUodCxpKXt2YXIgZSxyLHM9SWUodCksbj1udWxsPT09KGU9bnVsbD09aT92b2lkIDA6aS5oYW5kbGVkKXx8dm9pZCAwPT09ZXx8ZSxvPW51bGwhPT0ocj1udWxsPT1pP3ZvaWQgMDppLnN5bnRoZXRpYykmJnZvaWQgMCE9PXImJnI7cmV0dXJue3R5cGU6bnVsbCE9aSYmaS5vdmVycmlkZUV4Y2VwdGlvblR5cGU/aS5vdmVycmlkZUV4Y2VwdGlvblR5cGU6dC5uYW1lLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBpPXQubWVzc2FnZTtpZihpLmVycm9yJiZcInN0cmluZ1wiPT10eXBlb2YgaS5lcnJvci5tZXNzYWdlKXJldHVybiBTdHJpbmcoaS5lcnJvci5tZXNzYWdlKTtyZXR1cm4gU3RyaW5nKGkpfSh0KSxzdGFja3RyYWNlOntmcmFtZXM6cyx0eXBlOlwicmF3XCJ9LG1lY2hhbmlzbTp7aGFuZGxlZDpuLHN5bnRoZXRpYzpvfX19ZnVuY3Rpb24gVGUodCxpKXt2YXIgZT1SZSh0LGkpO3JldHVybiB0LmNhdXNlJiZsZSh0LmNhdXNlKSYmdC5jYXVzZSE9PXQ/W2UsLi4uVGUodC5jYXVzZSx7aGFuZGxlZDpudWxsPT1pP3ZvaWQgMDppLmhhbmRsZWQsc3ludGhldGljOm51bGw9PWk/dm9pZCAwOmkuc3ludGhldGljfSldOltlXX1mdW5jdGlvbiBNZSh0LGkpe3JldHVybnskZXhjZXB0aW9uX2xpc3Q6VGUodCxpKSwkZXhjZXB0aW9uX2xldmVsOlwiZXJyb3JcIn19ZnVuY3Rpb24gT2UodCxpKXt2YXIgZSxyLHMsbj1udWxsPT09KGU9bnVsbD09aT92b2lkIDA6aS5oYW5kbGVkKXx8dm9pZCAwPT09ZXx8ZSxvPW51bGw9PT0ocj1udWxsPT1pP3ZvaWQgMDppLnN5bnRoZXRpYyl8fHZvaWQgMD09PXJ8fHIsYT17dHlwZTpudWxsIT1pJiZpLm92ZXJyaWRlRXhjZXB0aW9uVHlwZT9pLm92ZXJyaWRlRXhjZXB0aW9uVHlwZTpudWxsIT09KHM9bnVsbD09aT92b2lkIDA6aS5kZWZhdWx0RXhjZXB0aW9uVHlwZSkmJnZvaWQgMCE9PXM/czpcIkVycm9yXCIsdmFsdWU6dHx8KG51bGw9PWk/dm9pZCAwOmkuZGVmYXVsdEV4Y2VwdGlvbk1lc3NhZ2UpLG1lY2hhbmlzbTp7aGFuZGxlZDpuLHN5bnRoZXRpYzpvfX07aWYobnVsbCE9aSYmaS5zeW50aGV0aWNFeGNlcHRpb24pe3ZhciBsPUllKGkuc3ludGhldGljRXhjZXB0aW9uLDEpO2wubGVuZ3RoJiYoYS5zdGFja3RyYWNlPXtmcmFtZXM6bCx0eXBlOlwicmF3XCJ9KX1yZXR1cm57JGV4Y2VwdGlvbl9saXN0OlthXSwkZXhjZXB0aW9uX2xldmVsOlwiZXJyb3JcIn19ZnVuY3Rpb24gQ2UodCl7cmV0dXJuIFQodCkmJiFNKHQpJiZfLmluZGV4T2YodCk+PTB9ZnVuY3Rpb24gRmUodCxpKXt2YXIgZSxyLHM9bnVsbD09PShlPW51bGw9PWk/dm9pZCAwOmkuaGFuZGxlZCl8fHZvaWQgMD09PWV8fGUsbj1udWxsPT09KHI9bnVsbD09aT92b2lkIDA6aS5zeW50aGV0aWMpfHx2b2lkIDA9PT1yfHxyLG89bnVsbCE9aSYmaS5vdmVycmlkZUV4Y2VwdGlvblR5cGU/aS5vdmVycmlkZUV4Y2VwdGlvblR5cGU6b2UodCk/dC5jb25zdHJ1Y3Rvci5uYW1lOlwiRXJyb3JcIixhPVwiTm9uLUVycm9yICdleGNlcHRpb24nIGNhcHR1cmVkIHdpdGgga2V5czogXCIrZnVuY3Rpb24odCxpKXt2b2lkIDA9PT1pJiYoaT00MCk7dmFyIGU9T2JqZWN0LmtleXModCk7aWYoZS5zb3J0KCksIWUubGVuZ3RoKXJldHVyblwiW29iamVjdCBoYXMgbm8ga2V5c11cIjtmb3IodmFyIHI9ZS5sZW5ndGg7cj4wO3ItLSl7dmFyIHM9ZS5zbGljZSgwLHIpLmpvaW4oXCIsIFwiKTtpZighKHMubGVuZ3RoPmkpKXJldHVybiByPT09ZS5sZW5ndGh8fHMubGVuZ3RoPD1pP3M6cy5zbGljZSgwLGkpK1wiLi4uXCJ9cmV0dXJuXCJcIn0odCksbD17dHlwZTpvLHZhbHVlOmEsbWVjaGFuaXNtOntoYW5kbGVkOnMsc3ludGhldGljOm59fTtpZihudWxsIT1pJiZpLnN5bnRoZXRpY0V4Y2VwdGlvbil7dmFyIHU9SWUobnVsbD09aT92b2lkIDA6aS5zeW50aGV0aWNFeGNlcHRpb24sMSk7dS5sZW5ndGgmJihsLnN0YWNrdHJhY2U9e2ZyYW1lczp1LHR5cGU6XCJyYXdcIn0pfXJldHVybnskZXhjZXB0aW9uX2xpc3Q6W2xdLCRleGNlcHRpb25fbGV2ZWw6Q2UodC5sZXZlbCk/dC5sZXZlbDpcImVycm9yXCJ9fWZ1bmN0aW9uIEFlKHQsaSl7dmFye2Vycm9yOmUsZXZlbnQ6cn09dCxzPXskZXhjZXB0aW9uX2xpc3Q6W119LG49ZXx8cjtpZihoZShuKXx8ZnVuY3Rpb24odCl7cmV0dXJuIHVlKHQsXCJET01FeGNlcHRpb25cIil9KG4pKXt2YXIgbz1uO2lmKGZ1bmN0aW9uKHQpe3JldHVyblwic3RhY2tcImluIHR9KG4pKXM9TWUobixpKTtlbHNle3ZhciBhPW8ubmFtZXx8KGhlKG8pP1wiRE9NRXJyb3JcIjpcIkRPTUV4Y2VwdGlvblwiKSxsPW8ubWVzc2FnZT9hK1wiOiBcIitvLm1lc3NhZ2U6YTtzPU9lKGwsQih7fSxpLHtvdmVycmlkZUV4Y2VwdGlvblR5cGU6aGUobyk/XCJET01FcnJvclwiOlwiRE9NRXhjZXB0aW9uXCIsZGVmYXVsdEV4Y2VwdGlvbk1lc3NhZ2U6bH0pKX1yZXR1cm5cImNvZGVcImluIG8mJihzLiRleGNlcHRpb25fRE9NRXhjZXB0aW9uX2NvZGU9XCJcIitvLmNvZGUpLHN9aWYoZnVuY3Rpb24odCl7cmV0dXJuIHVlKHQsXCJFcnJvckV2ZW50XCIpfShuKSYmbi5lcnJvcilyZXR1cm4gTWUobi5lcnJvcixpKTtpZihsZShuKSlyZXR1cm4gTWUobixpKTtpZihmdW5jdGlvbih0KXtyZXR1cm4gdWUodCxcIk9iamVjdFwiKX0obil8fG9lKG4pKXJldHVybiBGZShuLGkpO2lmKFIoZSkmJlQocikpe3ZhciB1PVwiRXJyb3JcIixoPXIsZD1yLm1hdGNoKEVlKTtyZXR1cm4gZCYmKHU9ZFsxXSxoPWRbMl0pLE9lKGgsQih7fSxpLHtvdmVycmlkZUV4Y2VwdGlvblR5cGU6dSxkZWZhdWx0RXhjZXB0aW9uTWVzc2FnZTpofSkpfXJldHVybiBPZShuLGkpfWZ1bmN0aW9uIERlKHQsaSxlKXt0cnl7aWYoIShpIGluIHQpKXJldHVybigpPT57fTt2YXIgcj10W2ldLHM9ZShyKTtyZXR1cm4gRShzKSYmKHMucHJvdG90eXBlPXMucHJvdG90eXBlfHx7fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzLHtfX3Bvc3Rob2dfd3JhcHBlZF9fOntlbnVtZXJhYmxlOiExLHZhbHVlOiEwfX0pKSx0W2ldPXMsKCk9Pnt0W2ldPXJ9fWNhdGNoKHQpe3JldHVybigpPT57fX19Y2xhc3MgamV7Y29uc3RydWN0b3IodCl7dmFyIGU7dGhpcy5OPXQsdGhpcy5ldD0obnVsbD09aXx8bnVsbD09KGU9aS5sb2NhdGlvbik/dm9pZCAwOmUucGF0aG5hbWUpfHxcIlwifWdldCBpc0VuYWJsZWQoKXtyZXR1cm5cImhpc3RvcnlfY2hhbmdlXCI9PT10aGlzLk4uY29uZmlnLmNhcHR1cmVfcGFnZXZpZXd9c3RhcnRJZkVuYWJsZWQoKXt0aGlzLmlzRW5hYmxlZCYmKE4uaW5mbyhcIkhpc3RvcnkgQVBJIG1vbml0b3JpbmcgZW5hYmxlZCwgc3RhcnRpbmcuLi5cIiksdGhpcy5tb25pdG9ySGlzdG9yeUNoYW5nZXMoKSl9c3RvcCgpe3RoaXMucnQmJnRoaXMucnQoKSx0aGlzLnJ0PXZvaWQgMCxOLmluZm8oXCJIaXN0b3J5IEFQSSBtb25pdG9yaW5nIHN0b3BwZWRcIil9bW9uaXRvckhpc3RvcnlDaGFuZ2VzKCl7dmFyIHQsZTtpZihpJiZpLmhpc3Rvcnkpe3ZhciByPXRoaXM7bnVsbCE9KHQ9aS5oaXN0b3J5LnB1c2hTdGF0ZSkmJnQuX19wb3N0aG9nX3dyYXBwZWRfX3x8RGUoaS5oaXN0b3J5LFwicHVzaFN0YXRlXCIsKHQ9PmZ1bmN0aW9uKGksZSxzKXt0LmNhbGwodGhpcyxpLGUscyksci5zdChcInB1c2hTdGF0ZVwiKX0pKSxudWxsIT0oZT1pLmhpc3RvcnkucmVwbGFjZVN0YXRlKSYmZS5fX3Bvc3Rob2dfd3JhcHBlZF9ffHxEZShpLmhpc3RvcnksXCJyZXBsYWNlU3RhdGVcIiwodD0+ZnVuY3Rpb24oaSxlLHMpe3QuY2FsbCh0aGlzLGksZSxzKSxyLnN0KFwicmVwbGFjZVN0YXRlXCIpfSkpLHRoaXMubnQoKX19c3QodCl7dHJ5e3ZhciBlLHI9bnVsbD09aXx8bnVsbD09KGU9aS5sb2NhdGlvbik/dm9pZCAwOmUucGF0aG5hbWU7aWYoIXIpcmV0dXJuO3IhPT10aGlzLmV0JiZ0aGlzLmlzRW5hYmxlZCYmdGhpcy5OLmNhcHR1cmUoXCIkcGFnZXZpZXdcIix7bmF2aWdhdGlvbl90eXBlOnR9KSx0aGlzLmV0PXJ9Y2F0Y2goaSl7Ti5lcnJvcihcIkVycm9yIGNhcHR1cmluZyBcIit0K1wiIHBhZ2V2aWV3XCIsaSl9fW50KCl7aWYoIXRoaXMucnQpe3ZhciB0PSgpPT57dGhpcy5zdChcInBvcHN0YXRlXCIpfTtzdChpLFwicG9wc3RhdGVcIix0KSx0aGlzLnJ0PSgpPT57aSYmaS5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIix0KX19fX1mdW5jdGlvbiBMZSh0KXt2YXIgaSxlO3JldHVybihudWxsPT0oaT1KU09OLnN0cmluZ2lmeSh0LChlPVtdLGZ1bmN0aW9uKHQsaSl7aWYoSShpKSl7Zm9yKDtlLmxlbmd0aD4wJiZlW2UubGVuZ3RoLTFdIT09dGhpczspZS5wb3AoKTtyZXR1cm4gZS5pbmNsdWRlcyhpKT9cIltDaXJjdWxhcl1cIjooZS5wdXNoKGkpLGkpfXJldHVybiBpfSkpKT92b2lkIDA6aS5sZW5ndGgpfHwwfWZ1bmN0aW9uIE5lKHQsaSl7aWYodm9pZCAwPT09aSYmKGk9NjYwNjAyOC44KSx0LnNpemU+PWkmJnQuZGF0YS5sZW5ndGg+MSl7dmFyIGU9TWF0aC5mbG9vcih0LmRhdGEubGVuZ3RoLzIpLHI9dC5kYXRhLnNsaWNlKDAsZSkscz10LmRhdGEuc2xpY2UoZSk7cmV0dXJuW05lKHtzaXplOkxlKHIpLGRhdGE6cixzZXNzaW9uSWQ6dC5zZXNzaW9uSWQsd2luZG93SWQ6dC53aW5kb3dJZH0pLE5lKHtzaXplOkxlKHMpLGRhdGE6cyxzZXNzaW9uSWQ6dC5zZXNzaW9uSWQsd2luZG93SWQ6dC53aW5kb3dJZH0pXS5mbGF0TWFwKCh0PT50KSl9cmV0dXJuW3RdfXZhciB6ZT0odD0+KHRbdC5Eb21Db250ZW50TG9hZGVkPTBdPVwiRG9tQ29udGVudExvYWRlZFwiLHRbdC5Mb2FkPTFdPVwiTG9hZFwiLHRbdC5GdWxsU25hcHNob3Q9Ml09XCJGdWxsU25hcHNob3RcIix0W3QuSW5jcmVtZW50YWxTbmFwc2hvdD0zXT1cIkluY3JlbWVudGFsU25hcHNob3RcIix0W3QuTWV0YT00XT1cIk1ldGFcIix0W3QuQ3VzdG9tPTVdPVwiQ3VzdG9tXCIsdFt0LlBsdWdpbj02XT1cIlBsdWdpblwiLHQpKSh6ZXx8e30pLFVlPSh0PT4odFt0Lk11dGF0aW9uPTBdPVwiTXV0YXRpb25cIix0W3QuTW91c2VNb3ZlPTFdPVwiTW91c2VNb3ZlXCIsdFt0Lk1vdXNlSW50ZXJhY3Rpb249Ml09XCJNb3VzZUludGVyYWN0aW9uXCIsdFt0LlNjcm9sbD0zXT1cIlNjcm9sbFwiLHRbdC5WaWV3cG9ydFJlc2l6ZT00XT1cIlZpZXdwb3J0UmVzaXplXCIsdFt0LklucHV0PTVdPVwiSW5wdXRcIix0W3QuVG91Y2hNb3ZlPTZdPVwiVG91Y2hNb3ZlXCIsdFt0Lk1lZGlhSW50ZXJhY3Rpb249N109XCJNZWRpYUludGVyYWN0aW9uXCIsdFt0LlN0eWxlU2hlZXRSdWxlPThdPVwiU3R5bGVTaGVldFJ1bGVcIix0W3QuQ2FudmFzTXV0YXRpb249OV09XCJDYW52YXNNdXRhdGlvblwiLHRbdC5Gb250PTEwXT1cIkZvbnRcIix0W3QuTG9nPTExXT1cIkxvZ1wiLHRbdC5EcmFnPTEyXT1cIkRyYWdcIix0W3QuU3R5bGVEZWNsYXJhdGlvbj0xM109XCJTdHlsZURlY2xhcmF0aW9uXCIsdFt0LlNlbGVjdGlvbj0xNF09XCJTZWxlY3Rpb25cIix0W3QuQWRvcHRlZFN0eWxlU2hlZXQ9MTVdPVwiQWRvcHRlZFN0eWxlU2hlZXRcIix0W3QuQ3VzdG9tRWxlbWVudD0xNl09XCJDdXN0b21FbGVtZW50XCIsdCkpKFVlfHx7fSkscWU9XCJbU2Vzc2lvblJlY29yZGluZ11cIixCZT1cInJlZGFjdGVkXCIsSGU9e2luaXRpYXRvclR5cGVzOltcImF1ZGlvXCIsXCJiZWFjb25cIixcImJvZHlcIixcImNzc1wiLFwiZWFybHktaGludFwiLFwiZW1iZWRcIixcImZldGNoXCIsXCJmcmFtZVwiLFwiaWZyYW1lXCIsXCJpY29uXCIsXCJpbWFnZVwiLFwiaW1nXCIsXCJpbnB1dFwiLFwibGlua1wiLFwibmF2aWdhdGlvblwiLFwib2JqZWN0XCIsXCJwaW5nXCIsXCJzY3JpcHRcIixcInRyYWNrXCIsXCJ2aWRlb1wiLFwieG1saHR0cHJlcXVlc3RcIl0sbWFza1JlcXVlc3RGbjp0PT50LHJlY29yZEhlYWRlcnM6ITEscmVjb3JkQm9keTohMSxyZWNvcmRJbml0aWFsUmVxdWVzdHM6ITEscmVjb3JkUGVyZm9ybWFuY2U6ITEscGVyZm9ybWFuY2VFbnRyeVR5cGVUb09ic2VydmU6W1wiZmlyc3QtaW5wdXRcIixcIm5hdmlnYXRpb25cIixcInBhaW50XCIsXCJyZXNvdXJjZVwiXSxwYXlsb2FkU2l6ZUxpbWl0Qnl0ZXM6MWU2LHBheWxvYWRIb3N0RGVueUxpc3Q6W1wiLmxyLWluZ2VzdC5pb1wiLFwiLmluZ2VzdC5zZW50cnkuaW9cIixcIi5jbGFyaXR5Lm1zXCIsXCJhbmFseXRpY3MuZ29vZ2xlLmNvbVwiXX0sV2U9W1wiYXV0aG9yaXphdGlvblwiLFwieC1mb3J3YXJkZWQtZm9yXCIsXCJhdXRob3JpemF0aW9uXCIsXCJjb29raWVcIixcInNldC1jb29raWVcIixcIngtYXBpLWtleVwiLFwieC1yZWFsLWlwXCIsXCJyZW1vdGUtYWRkclwiLFwiZm9yd2FyZGVkXCIsXCJwcm94eS1hdXRob3JpemF0aW9uXCIsXCJ4LWNzcmYtdG9rZW5cIixcIngtY3NyZnRva2VuXCIsXCJ4LXhzcmYtdG9rZW5cIl0sR2U9W1wicGFzc3dvcmRcIixcInNlY3JldFwiLFwicGFzc3dkXCIsXCJhcGlfa2V5XCIsXCJhcGlrZXlcIixcImF1dGhcIixcImNyZWRlbnRpYWxzXCIsXCJteXNxbF9wd2RcIixcInByaXZhdGVrZXlcIixcInByaXZhdGVfa2V5XCIsXCJ0b2tlblwiXSxKZT1bXCIvcy9cIixcIi9lL1wiLFwiL2kvXCJdO2Z1bmN0aW9uIFZlKHQsaSxlLHIpe2lmKEModCkpcmV0dXJuIHQ7dmFyIHM9KG51bGw9PWk/dm9pZCAwOmlbXCJjb250ZW50LWxlbmd0aFwiXSl8fGZ1bmN0aW9uKHQpe3JldHVybiBuZXcgQmxvYihbdF0pLnNpemV9KHQpO3JldHVybiBUKHMpJiYocz1wYXJzZUludChzKSkscz5lP3FlK1wiIFwiK3IrXCIgYm9keSB0b28gbGFyZ2UgdG8gcmVjb3JkIChcIitzK1wiIGJ5dGVzKVwiOnR9ZnVuY3Rpb24gS2UodCxpKXtpZihDKHQpKXJldHVybiB0O3ZhciBlPXQ7cmV0dXJuIHZpKGUsITEpfHwoZT1xZStcIiBcIitpK1wiIGJvZHkgXCIrQmUpLEooR2UsKHQ9Pnt2YXIgcixzO251bGwhPShyPWUpJiZyLmxlbmd0aCYmLTEhPT0obnVsbD09KHM9ZSk/dm9pZCAwOnMuaW5kZXhPZih0KSkmJihlPXFlK1wiIFwiK2krXCIgYm9keSBcIitCZStcIiBhcyBtaWdodCBjb250YWluOiBcIit0KX0pKSxlfXZhciBZZT0odCxpKT0+e3ZhciBlLHIscyxuPXtwYXlsb2FkU2l6ZUxpbWl0Qnl0ZXM6SGUucGF5bG9hZFNpemVMaW1pdEJ5dGVzLHBlcmZvcm1hbmNlRW50cnlUeXBlVG9PYnNlcnZlOlsuLi5IZS5wZXJmb3JtYW5jZUVudHJ5VHlwZVRvT2JzZXJ2ZV0scGF5bG9hZEhvc3REZW55TGlzdDpbLi4uaS5wYXlsb2FkSG9zdERlbnlMaXN0fHxbXSwuLi5IZS5wYXlsb2FkSG9zdERlbnlMaXN0XX0sbz0hMSE9PXQuc2Vzc2lvbl9yZWNvcmRpbmcucmVjb3JkSGVhZGVycyYmaS5yZWNvcmRIZWFkZXJzLGE9ITEhPT10LnNlc3Npb25fcmVjb3JkaW5nLnJlY29yZEJvZHkmJmkucmVjb3JkQm9keSxsPSExIT09dC5jYXB0dXJlX3BlcmZvcm1hbmNlJiZpLnJlY29yZFBlcmZvcm1hbmNlLHU9KGU9bixzPU1hdGgubWluKDFlNixudWxsIT09KHI9ZS5wYXlsb2FkU2l6ZUxpbWl0Qnl0ZXMpJiZ2b2lkIDAhPT1yP3I6MWU2KSx0PT4obnVsbCE9dCYmdC5yZXF1ZXN0Qm9keSYmKHQucmVxdWVzdEJvZHk9VmUodC5yZXF1ZXN0Qm9keSx0LnJlcXVlc3RIZWFkZXJzLHMsXCJSZXF1ZXN0XCIpKSxudWxsIT10JiZ0LnJlc3BvbnNlQm9keSYmKHQucmVzcG9uc2VCb2R5PVZlKHQucmVzcG9uc2VCb2R5LHQucmVzcG9uc2VIZWFkZXJzLHMsXCJSZXNwb25zZVwiKSksdCkpLGg9aT0+e3JldHVybiB1KCgodCxpKT0+e3ZhciBlLHI9d2kodC5uYW1lKSxzPTA9PT1pLmluZGV4T2YoXCJodHRwXCIpP251bGw9PShlPXdpKGkpKT92b2lkIDA6ZS5wYXRobmFtZTppO1wiL1wiPT09cyYmKHM9XCJcIik7dmFyIG49bnVsbD09cj92b2lkIDA6ci5wYXRobmFtZS5yZXBsYWNlKHN8fFwiXCIsXCJcIik7aWYoIShyJiZuJiZKZS5zb21lKCh0PT4wPT09bi5pbmRleE9mKHQpKSkpKXJldHVybiB0fSkoKHI9KGU9aSkucmVxdWVzdEhlYWRlcnMsQyhyKXx8SihPYmplY3Qua2V5cyhudWxsIT1yP3I6e30pLCh0PT57V2UuaW5jbHVkZXModC50b0xvd2VyQ2FzZSgpKSYmKHJbdF09QmUpfSkpLGUpLHQuYXBpX2hvc3QpKTt2YXIgZSxyfSxkPUUodC5zZXNzaW9uX3JlY29yZGluZy5tYXNrTmV0d29ya1JlcXVlc3RGbik7cmV0dXJuIGQmJkUodC5zZXNzaW9uX3JlY29yZGluZy5tYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuKSYmTi53YXJuKFwiQm90aCBgbWFza05ldHdvcmtSZXF1ZXN0Rm5gIGFuZCBgbWFza0NhcHR1cmVkTmV0d29ya1JlcXVlc3RGbmAgYXJlIGRlZmluZWQuIGBtYXNrTmV0d29ya1JlcXVlc3RGbmAgd2lsbCBiZSBpZ25vcmVkLlwiKSxkJiYodC5zZXNzaW9uX3JlY29yZGluZy5tYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuPWk9Pnt2YXIgZT10LnNlc3Npb25fcmVjb3JkaW5nLm1hc2tOZXR3b3JrUmVxdWVzdEZuKHt1cmw6aS5uYW1lfSk7cmV0dXJuIEIoe30saSx7bmFtZTpudWxsPT1lP3ZvaWQgMDplLnVybH0pfSksbi5tYXNrUmVxdWVzdEZuPUUodC5zZXNzaW9uX3JlY29yZGluZy5tYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuKT9pPT57dmFyIGUscj1oKGkpO3JldHVybiByJiZudWxsIT09KGU9bnVsbD09dC5zZXNzaW9uX3JlY29yZGluZy5tYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuP3ZvaWQgMDp0LnNlc3Npb25fcmVjb3JkaW5nLm1hc2tDYXB0dXJlZE5ldHdvcmtSZXF1ZXN0Rm4ocikpJiZ2b2lkIDAhPT1lP2U6dm9pZCAwfTp0PT5mdW5jdGlvbih0KXtpZighUih0KSlyZXR1cm4gdC5yZXF1ZXN0Qm9keT1LZSh0LnJlcXVlc3RCb2R5LFwiUmVxdWVzdFwiKSx0LnJlc3BvbnNlQm9keT1LZSh0LnJlc3BvbnNlQm9keSxcIlJlc3BvbnNlXCIpLHR9KGgodCkpLEIoe30sSGUsbix7cmVjb3JkSGVhZGVyczpvLHJlY29yZEJvZHk6YSxyZWNvcmRQZXJmb3JtYW5jZTpsLHJlY29yZEluaXRpYWxSZXF1ZXN0czpsfSl9O2Z1bmN0aW9uIFhlKHQsaSxlLHIscyl7cmV0dXJuIGk+ZSYmKE4ud2FybihcIm1pbiBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIG1heC5cIiksaT1lKSxGKHQpP3Q+ZT8ociYmTi53YXJuKHIrXCIgY2Fubm90IGJlICBncmVhdGVyIHRoYW4gbWF4OiBcIitlK1wiLiBVc2luZyBtYXggdmFsdWUgaW5zdGVhZC5cIiksZSk6dDxpPyhyJiZOLndhcm4ocitcIiBjYW5ub3QgYmUgbGVzcyB0aGFuIG1pbjogXCIraStcIi4gVXNpbmcgbWluIHZhbHVlIGluc3RlYWQuXCIpLGkpOnQ6KHImJk4ud2FybihyK1wiIG11c3QgYmUgYSBudW1iZXIuIHVzaW5nIG1heCBvciBmYWxsYmFjay4gbWF4OiBcIitlK1wiLCBmYWxsYmFjazogXCIrcyksWGUoc3x8ZSxpLGUscikpfWNsYXNzIFFle2NvbnN0cnVjdG9yKHQsaSl7dmFyIGUscjt2b2lkIDA9PT1pJiYoaT17fSksdGhpcy5vdD0xMDAsdGhpcy5sdD0xMCx0aGlzLnV0PXt9LHRoaXMuaHQ9e30sdGhpcy5kdD0oKT0+e09iamVjdC5rZXlzKHRoaXMudXQpLmZvckVhY2goKHQ9Pnt0aGlzLnV0W3RdPXRoaXMudXRbdF0rdGhpcy5sdCx0aGlzLnV0W3RdPj10aGlzLm90JiZkZWxldGUgdGhpcy51dFt0XX0pKX0sdGhpcy52dD10PT57dmFyIGk9dGhpcy5fcnJ3ZWIubWlycm9yLmdldE5vZGUodCk7aWYoXCJzdmdcIiE9PShudWxsPT1pP3ZvaWQgMDppLm5vZGVOYW1lKSYmaSBpbnN0YW5jZW9mIEVsZW1lbnQpe3ZhciBlPWkuY2xvc2VzdChcInN2Z1wiKTtpZihlKXJldHVyblt0aGlzLl9ycndlYi5taXJyb3IuZ2V0SWQoZSksZV19cmV0dXJuW3QsaV19LHRoaXMuY3Q9dD0+e3ZhciBpLGUscixzLG4sbyxhLGw7cmV0dXJuKG51bGwhPT0oaT1udWxsPT0oZT10LnJlbW92ZXMpP3ZvaWQgMDplLmxlbmd0aCkmJnZvaWQgMCE9PWk/aTowKSsobnVsbCE9PShyPW51bGw9PShzPXQuYXR0cmlidXRlcyk/dm9pZCAwOnMubGVuZ3RoKSYmdm9pZCAwIT09cj9yOjApKyhudWxsIT09KG49bnVsbD09KG89dC50ZXh0cyk/dm9pZCAwOm8ubGVuZ3RoKSYmdm9pZCAwIT09bj9uOjApKyhudWxsIT09KGE9bnVsbD09KGw9dC5hZGRzKT92b2lkIDA6bC5sZW5ndGgpJiZ2b2lkIDAhPT1hP2E6MCl9LHRoaXMudGhyb3R0bGVNdXRhdGlvbnM9dD0+e2lmKDMhPT10LnR5cGV8fDAhPT10LmRhdGEuc291cmNlKXJldHVybiB0O3ZhciBpPXQuZGF0YSxlPXRoaXMuY3QoaSk7aS5hdHRyaWJ1dGVzJiYoaS5hdHRyaWJ1dGVzPWkuYXR0cmlidXRlcy5maWx0ZXIoKHQ9Pnt2YXIgaSxlLHIsW3Msbl09dGhpcy52dCh0LmlkKTtpZigwPT09dGhpcy51dFtzXSlyZXR1cm4hMTsodGhpcy51dFtzXT1udWxsIT09KGk9dGhpcy51dFtzXSkmJnZvaWQgMCE9PWk/aTp0aGlzLm90LHRoaXMudXRbc109TWF0aC5tYXgodGhpcy51dFtzXS0xLDApLDA9PT10aGlzLnV0W3NdKSYmKHRoaXMuaHRbc118fCh0aGlzLmh0W3NdPSEwLG51bGw9PShlPShyPXRoaXMuZnQpLm9uQmxvY2tlZE5vZGUpfHxlLmNhbGwocixzLG4pKSk7cmV0dXJuIHR9KSkpO3ZhciByPXRoaXMuY3QoaSk7cmV0dXJuIDAhPT1yfHxlPT09cj90OnZvaWQgMH0sdGhpcy5fcnJ3ZWI9dCx0aGlzLmZ0PWksdGhpcy5sdD1YZShudWxsIT09KGU9dGhpcy5mdC5yZWZpbGxSYXRlKSYmdm9pZCAwIT09ZT9lOnRoaXMubHQsMCwxMDAsXCJtdXRhdGlvbiB0aHJvdHRsaW5nIHJlZmlsbCByYXRlXCIpLHRoaXMub3Q9WGUobnVsbCE9PShyPXRoaXMuZnQuYnVja2V0U2l6ZSkmJnZvaWQgMCE9PXI/cjp0aGlzLm90LDAsMTAwLFwibXV0YXRpb24gdGhyb3R0bGluZyBidWNrZXQgc2l6ZVwiKSxzZXRJbnRlcnZhbCgoKCk9Pnt0aGlzLmR0KCl9KSwxZTMpfX12YXIgWmU9VWludDhBcnJheSx0cj1VaW50MTZBcnJheSxpcj1VaW50MzJBcnJheSxlcj1uZXcgWmUoWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMCwwLDAsMF0pLHJyPW5ldyBaZShbMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxMywwLDBdKSxzcj1uZXcgWmUoWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdKSxucj1mdW5jdGlvbih0LGkpe2Zvcih2YXIgZT1uZXcgdHIoMzEpLHI9MDtyPDMxOysrcillW3JdPWkrPTE8PHRbci0xXTt2YXIgcz1uZXcgaXIoZVszMF0pO2ZvcihyPTE7cjwzMDsrK3IpZm9yKHZhciBuPWVbcl07bjxlW3IrMV07KytuKXNbbl09bi1lW3JdPDw1fHI7cmV0dXJuW2Usc119LG9yPW5yKGVyLDIpLGFyPW9yWzBdLGxyPW9yWzFdO2FyWzI4XT0yNTgsbHJbMjU4XT0yODtmb3IodmFyIHVyPW5yKHJyLDApWzFdLGhyPW5ldyB0cigzMjc2OCksZHI9MDtkcjwzMjc2ODsrK2RyKXt2YXIgdnI9KDQzNjkwJmRyKT4+PjF8KDIxODQ1JmRyKTw8MTt2cj0oNjE2ODAmKHZyPSg1MjQyOCZ2cik+Pj4yfCgxMzEwNyZ2cik8PDIpKT4+PjR8KDM4NTUmdnIpPDw0LGhyW2RyXT0oKDY1MjgwJnZyKT4+Pjh8KDI1NSZ2cik8PDgpPj4+MX12YXIgY3I9ZnVuY3Rpb24odCxpLGUpe2Zvcih2YXIgcj10Lmxlbmd0aCxzPTAsbj1uZXcgdHIoaSk7czxyOysrcykrK25bdFtzXS0xXTt2YXIgbyxhPW5ldyB0cihpKTtmb3Iocz0wO3M8aTsrK3MpYVtzXT1hW3MtMV0rbltzLTFdPDwxO2lmKGUpe289bmV3IHRyKDE8PGkpO3ZhciBsPTE1LWk7Zm9yKHM9MDtzPHI7KytzKWlmKHRbc10pZm9yKHZhciB1PXM8PDR8dFtzXSxoPWktdFtzXSxkPWFbdFtzXS0xXSsrPDxoLHY9ZHwoMTw8aCktMTtkPD12OysrZClvW2hyW2RdPj4+bF09dX1lbHNlIGZvcihvPW5ldyB0cihyKSxzPTA7czxyOysrcylvW3NdPWhyW2FbdFtzXS0xXSsrXT4+PjE1LXRbc107cmV0dXJuIG99LGZyPW5ldyBaZSgyODgpO2Zvcihkcj0wO2RyPDE0NDsrK2RyKWZyW2RyXT04O2Zvcihkcj0xNDQ7ZHI8MjU2OysrZHIpZnJbZHJdPTk7Zm9yKGRyPTI1NjtkcjwyODA7Kytkcilmcltkcl09Nztmb3IoZHI9MjgwO2RyPDI4ODsrK2RyKWZyW2RyXT04O3ZhciBwcj1uZXcgWmUoMzIpO2Zvcihkcj0wO2RyPDMyOysrZHIpcHJbZHJdPTU7dmFyIGdyPWNyKGZyLDksMCksX3I9Y3IocHIsNSwwKSxtcj1mdW5jdGlvbih0KXtyZXR1cm4odC84Pj4wKSsoNyZ0JiYxKX0sYnI9ZnVuY3Rpb24odCxpLGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO3ZhciByPW5ldyh0IGluc3RhbmNlb2YgdHI/dHI6dCBpbnN0YW5jZW9mIGlyP2lyOlplKShlLWkpO3JldHVybiByLnNldCh0LnN1YmFycmF5KGksZSkpLHJ9LHdyPWZ1bmN0aW9uKHQsaSxlKXtlPDw9NyZpO3ZhciByPWkvOD4+MDt0W3JdfD1lLHRbcisxXXw9ZT4+Pjh9LHlyPWZ1bmN0aW9uKHQsaSxlKXtlPDw9NyZpO3ZhciByPWkvOD4+MDt0W3JdfD1lLHRbcisxXXw9ZT4+PjgsdFtyKzJdfD1lPj4+MTZ9LFNyPWZ1bmN0aW9uKHQsaSl7Zm9yKHZhciBlPVtdLHI9MDtyPHQubGVuZ3RoOysrcil0W3JdJiZlLnB1c2goe3M6cixmOnRbcl19KTt2YXIgcz1lLmxlbmd0aCxuPWUuc2xpY2UoKTtpZighcylyZXR1cm5bbmV3IFplKDApLDBdO2lmKDE9PXMpe3ZhciBvPW5ldyBaZShlWzBdLnMrMSk7cmV0dXJuIG9bZVswXS5zXT0xLFtvLDFdfWUuc29ydCgoZnVuY3Rpb24odCxpKXtyZXR1cm4gdC5mLWkuZn0pKSxlLnB1c2goe3M6LTEsZjoyNTAwMX0pO3ZhciBhPWVbMF0sbD1lWzFdLHU9MCxoPTEsZD0yO2ZvcihlWzBdPXtzOi0xLGY6YS5mK2wuZixsOmEscjpsfTtoIT1zLTE7KWE9ZVtlW3VdLmY8ZVtkXS5mP3UrKzpkKytdLGw9ZVt1IT1oJiZlW3VdLmY8ZVtkXS5mP3UrKzpkKytdLGVbaCsrXT17czotMSxmOmEuZitsLmYsbDphLHI6bH07dmFyIHY9blswXS5zO2ZvcihyPTE7cjxzOysrciluW3JdLnM+diYmKHY9bltyXS5zKTt2YXIgYz1uZXcgdHIodisxKSxmPSRyKGVbaC0xXSxjLDApO2lmKGY+aSl7cj0wO3ZhciBwPTAsZz1mLWksXz0xPDxnO2ZvcihuLnNvcnQoKGZ1bmN0aW9uKHQsaSl7cmV0dXJuIGNbaS5zXS1jW3Quc118fHQuZi1pLmZ9KSk7cjxzOysrcil7dmFyIG09bltyXS5zO2lmKCEoY1ttXT5pKSlicmVhaztwKz1fLSgxPDxmLWNbbV0pLGNbbV09aX1mb3IocD4+Pj1nO3A+MDspe3ZhciBiPW5bcl0ucztjW2JdPGk/cC09MTw8aS1jW2JdKystMTorK3J9Zm9yKDtyPj0wJiZwOy0tcil7dmFyIHc9bltyXS5zO2Nbd109PWkmJigtLWNbd10sKytwKX1mPWl9cmV0dXJuW25ldyBaZShjKSxmXX0sJHI9ZnVuY3Rpb24odCxpLGUpe3JldHVybi0xPT10LnM/TWF0aC5tYXgoJHIodC5sLGksZSsxKSwkcih0LnIsaSxlKzEpKTppW3Quc109ZX0sa3I9ZnVuY3Rpb24odCl7Zm9yKHZhciBpPXQubGVuZ3RoO2kmJiF0Wy0taV07KTtmb3IodmFyIGU9bmV3IHRyKCsraSkscj0wLHM9dFswXSxuPTEsbz1mdW5jdGlvbih0KXtlW3IrK109dH0sYT0xO2E8PWk7KythKWlmKHRbYV09PXMmJmEhPWkpKytuO2Vsc2V7aWYoIXMmJm4+Mil7Zm9yKDtuPjEzODtuLT0xMzgpbygzMjc1NCk7bj4yJiYobyhuPjEwP24tMTE8PDV8Mjg2OTA6bi0zPDw1fDEyMzA1KSxuPTApfWVsc2UgaWYobj4zKXtmb3IobyhzKSwtLW47bj42O24tPTYpbyg4MzA0KTtuPjImJihvKG4tMzw8NXw4MjA4KSxuPTApfWZvcig7bi0tOylvKHMpO249MSxzPXRbYV19cmV0dXJuW2Uuc3ViYXJyYXkoMCxyKSxpXX0seHI9ZnVuY3Rpb24odCxpKXtmb3IodmFyIGU9MCxyPTA7cjxpLmxlbmd0aDsrK3IpZSs9dFtyXSppW3JdO3JldHVybiBlfSxFcj1mdW5jdGlvbih0LGksZSl7dmFyIHI9ZS5sZW5ndGgscz1tcihpKzIpO3Rbc109MjU1JnIsdFtzKzFdPXI+Pj44LHRbcysyXT0yNTVedFtzXSx0W3MrM109MjU1XnRbcysxXTtmb3IodmFyIG49MDtuPHI7KytuKXRbcytuKzRdPWVbbl07cmV0dXJuIDgqKHMrNCtyKX0sSXI9ZnVuY3Rpb24odCxpLGUscixzLG4sbyxhLGwsdSxoKXt3cihpLGgrKyxlKSwrK3NbMjU2XTtmb3IodmFyIGQ9U3IocywxNSksdj1kWzBdLGM9ZFsxXSxmPVNyKG4sMTUpLHA9ZlswXSxnPWZbMV0sXz1rcih2KSxtPV9bMF0sYj1fWzFdLHc9a3IocCkseT13WzBdLFM9d1sxXSwkPW5ldyB0cigxOSksaz0wO2s8bS5sZW5ndGg7KytrKSRbMzEmbVtrXV0rKztmb3Ioaz0wO2s8eS5sZW5ndGg7KytrKSRbMzEmeVtrXV0rKztmb3IodmFyIHg9U3IoJCw3KSxFPXhbMF0sST14WzFdLFA9MTk7UD40JiYhRVtzcltQLTFdXTstLVApO3ZhciBSLFQsTSxPLEM9dSs1PDwzLEY9eHIocyxmcikreHIobixwcikrbyxBPXhyKHMsdikreHIobixwKStvKzE0KzMqUCt4cigkLEUpKygyKiRbMTZdKzMqJFsxN10rNyokWzE4XSk7aWYoQzw9RiYmQzw9QSlyZXR1cm4gRXIoaSxoLHQuc3ViYXJyYXkobCxsK3UpKTtpZih3cihpLGgsMSsoQTxGKSksaCs9MixBPEYpe1I9Y3IodixjLDApLFQ9dixNPWNyKHAsZywwKSxPPXA7dmFyIEQ9Y3IoRSxJLDApO3dyKGksaCxiLTI1Nyksd3IoaSxoKzUsUy0xKSx3cihpLGgrMTAsUC00KSxoKz0xNDtmb3Ioaz0wO2s8UDsrK2spd3IoaSxoKzMqayxFW3NyW2tdXSk7aCs9MypQO2Zvcih2YXIgaj1bbSx5XSxMPTA7TDwyOysrTCl7dmFyIE49altMXTtmb3Ioaz0wO2s8Ti5sZW5ndGg7KytrKXt2YXIgej0zMSZOW2tdO3dyKGksaCxEW3pdKSxoKz1FW3pdLHo+MTUmJih3cihpLGgsTltrXT4+PjUmMTI3KSxoKz1OW2tdPj4+MTIpfX19ZWxzZSBSPWdyLFQ9ZnIsTT1fcixPPXByO2ZvcihrPTA7azxhOysraylpZihyW2tdPjI1NSl7ej1yW2tdPj4+MTgmMzE7eXIoaSxoLFJbeisyNTddKSxoKz1UW3orMjU3XSx6PjcmJih3cihpLGgscltrXT4+PjIzJjMxKSxoKz1lclt6XSk7dmFyIFU9MzEmcltrXTt5cihpLGgsTVtVXSksaCs9T1tVXSxVPjMmJih5cihpLGgscltrXT4+PjUmODE5MSksaCs9cnJbVV0pfWVsc2UgeXIoaSxoLFJbcltrXV0pLGgrPVRbcltrXV07cmV0dXJuIHlyKGksaCxSWzI1Nl0pLGgrVFsyNTZdfSxQcj1uZXcgaXIoWzY1NTQwLDEzMTA4MCwxMzEwODgsMTMxMTA0LDI2MjE3NiwxMDQ4NzA0LDEwNDg4MzIsMjExNDU2MCwyMTE3NjMyXSksUnI9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9bmV3IGlyKDI1NiksaT0wO2k8MjU2OysraSl7Zm9yKHZhciBlPWkscj05Oy0tcjspZT0oMSZlJiYzOTg4MjkyMzg0KV5lPj4+MTt0W2ldPWV9cmV0dXJuIHR9KCksVHI9ZnVuY3Rpb24oKXt2YXIgdD00Mjk0OTY3Mjk1O3JldHVybntwOmZ1bmN0aW9uKGkpe2Zvcih2YXIgZT10LHI9MDtyPGkubGVuZ3RoOysrcillPVJyWzI1NSZlXmlbcl1dXmU+Pj44O3Q9ZX0sZDpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTY3Mjk1XnR9fX0sTXI9ZnVuY3Rpb24odCxpLGUscixzKXtyZXR1cm4gZnVuY3Rpb24odCxpLGUscixzLG4pe3ZhciBvPXQubGVuZ3RoLGE9bmV3IFplKHIrbys1KigxK01hdGguZmxvb3Ioby83ZTMpKStzKSxsPWEuc3ViYXJyYXkocixhLmxlbmd0aC1zKSx1PTA7aWYoIWl8fG88OClmb3IodmFyIGg9MDtoPD1vO2grPTY1NTM1KXt2YXIgZD1oKzY1NTM1O2Q8bz91PUVyKGwsdSx0LnN1YmFycmF5KGgsZCkpOihsW2hdPW4sdT1FcihsLHUsdC5zdWJhcnJheShoLG8pKSl9ZWxzZXtmb3IodmFyIHY9UHJbaS0xXSxjPXY+Pj4xMyxmPTgxOTEmdixwPSgxPDxlKS0xLGc9bmV3IHRyKDMyNzY4KSxfPW5ldyB0cihwKzEpLG09TWF0aC5jZWlsKGUvMyksYj0yKm0sdz1mdW5jdGlvbihpKXtyZXR1cm4odFtpXV50W2krMV08PG1edFtpKzJdPDxiKSZwfSx5PW5ldyBpcigyNWUzKSxTPW5ldyB0cigyODgpLCQ9bmV3IHRyKDMyKSxrPTAseD0wLEU9KGg9MCwwKSxJPTAsUD0wO2g8bzsrK2gpe3ZhciBSPXcoaCksVD0zMjc2NyZoLE09X1tSXTtpZihnW1RdPU0sX1tSXT1ULEk8PWgpe3ZhciBPPW8taDtpZigoaz43ZTN8fEU+MjQ1NzYpJiZPPjQyMyl7dT1Jcih0LGwsMCx5LFMsJCx4LEUsUCxoLVAsdSksRT1rPXg9MCxQPWg7Zm9yKHZhciBDPTA7QzwyODY7KytDKVNbQ109MDtmb3IoQz0wO0M8MzA7KytDKSRbQ109MH12YXIgRj0yLEE9MCxEPWYsaj1ULU0mMzI3Njc7aWYoTz4yJiZSPT13KGgtaikpZm9yKHZhciBMPU1hdGgubWluKGMsTyktMSxOPU1hdGgubWluKDMyNzY3LGgpLHo9TWF0aC5taW4oMjU4LE8pO2o8PU4mJi0tRCYmVCE9TTspe2lmKHRbaCtGXT09dFtoK0Ytal0pe2Zvcih2YXIgVT0wO1U8eiYmdFtoK1VdPT10W2grVS1qXTsrK1UpO2lmKFU+Ril7aWYoRj1VLEE9aixVPkwpYnJlYWs7dmFyIHE9TWF0aC5taW4oaixVLTIpLEI9MDtmb3IoQz0wO0M8cTsrK0Mpe3ZhciBIPWgtaitDKzMyNzY4JjMyNzY3LFc9SC1nW0hdKzMyNzY4JjMyNzY3O1c+QiYmKEI9VyxNPUgpfX19ais9KFQ9TSktKE09Z1tUXSkrMzI3NjgmMzI3Njd9aWYoQSl7eVtFKytdPTI2ODQzNTQ1NnxscltGXTw8MTh8dXJbQV07dmFyIEc9MzEmbHJbRl0sSj0zMSZ1cltBXTt4Kz1lcltHXStycltKXSwrK1NbMjU3K0ddLCsrJFtKXSxJPWgrRiwrK2t9ZWxzZSB5W0UrK109dFtoXSwrK1NbdFtoXV19fXU9SXIodCxsLG4seSxTLCQseCxFLFAsaC1QLHUpfXJldHVybiBicihhLDAscittcih1KStzKX0odCxudWxsPT1pLmxldmVsPzY6aS5sZXZlbCxudWxsPT1pLm1lbT9NYXRoLmNlaWwoMS41Kk1hdGgubWF4KDgsTWF0aC5taW4oMTMsTWF0aC5sb2codC5sZW5ndGgpKSkpOjEyK2kubWVtLGUsciwhcyl9LE9yPWZ1bmN0aW9uKHQsaSxlKXtmb3IoO2U7KytpKXRbaV09ZSxlPj4+PTh9LENyPWZ1bmN0aW9uKHQsaSl7dmFyIGU9aS5maWxlbmFtZTtpZih0WzBdPTMxLHRbMV09MTM5LHRbMl09OCx0WzhdPWkubGV2ZWw8Mj80Ojk9PWkubGV2ZWw/MjowLHRbOV09MywwIT1pLm10aW1lJiZPcih0LDQsTWF0aC5mbG9vcihuZXcgRGF0ZShpLm10aW1lfHxEYXRlLm5vdygpKS8xZTMpKSxlKXt0WzNdPTg7Zm9yKHZhciByPTA7cjw9ZS5sZW5ndGg7KytyKXRbcisxMF09ZS5jaGFyQ29kZUF0KHIpfX0sRnI9ZnVuY3Rpb24odCl7cmV0dXJuIDEwKyh0LmZpbGVuYW1lJiZ0LmZpbGVuYW1lLmxlbmd0aCsxfHwwKX07ZnVuY3Rpb24gQXIodCxpKXt2b2lkIDA9PT1pJiYoaT17fSk7dmFyIGU9VHIoKSxyPXQubGVuZ3RoO2UucCh0KTt2YXIgcz1Ncih0LGksRnIoaSksOCksbj1zLmxlbmd0aDtyZXR1cm4gQ3IocyxpKSxPcihzLG4tOCxlLmQoKSksT3IocyxuLTQsciksc31mdW5jdGlvbiBEcih0LGkpe3ZhciBlPXQubGVuZ3RoO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RW5jb2RlcilyZXR1cm4obmV3IFRleHRFbmNvZGVyKS5lbmNvZGUodCk7Zm9yKHZhciByPW5ldyBaZSh0Lmxlbmd0aCsodC5sZW5ndGg+Pj4xKSkscz0wLG49ZnVuY3Rpb24odCl7cltzKytdPXR9LG89MDtvPGU7KytvKXtpZihzKzU+ci5sZW5ndGgpe3ZhciBhPW5ldyBaZShzKzgrKGUtbzw8MSkpO2Euc2V0KHIpLHI9YX12YXIgbD10LmNoYXJDb2RlQXQobyk7bDwxMjh8fGk/bihsKTpsPDIwNDg/KG4oMTkyfGw+Pj42KSxuKDEyOHw2MyZsKSk6bD41NTI5NSYmbDw1NzM0ND8obigyNDB8KGw9NjU1MzYrKDEwNDc1NTImbCl8MTAyMyZ0LmNoYXJDb2RlQXQoKytvKSk+Pj4xOCksbigxMjh8bD4+PjEyJjYzKSxuKDEyOHxsPj4+NiY2MyksbigxMjh8NjMmbCkpOihuKDIyNHxsPj4+MTIpLG4oMTI4fGw+Pj42JjYzKSxuKDEyOHw2MyZsKSl9cmV0dXJuIGJyKHIsMCxzKX1mdW5jdGlvbiBqcih0LGkpe3JldHVybiBmdW5jdGlvbih0KXtmb3IodmFyIGk9MCxlPTA7ZTx0Lmxlbmd0aDtlKyspaT0oaTw8NSktaSt0LmNoYXJDb2RlQXQoZSksaXw9MDtyZXR1cm4gTWF0aC5hYnMoaSl9KHQpJTEwMDxYZSgxMDAqaSwwLDEwMCl9dmFyIExyPVwiW1Nlc3Npb25SZWNvcmRpbmddXCIsTnI9eihMcik7ZnVuY3Rpb24genIoKXt2YXIgdCxpO3JldHVybiBudWxsPT1jfHxudWxsPT0odD1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PShpPXQucnJ3ZWIpP3ZvaWQgMDppLnJlY29yZH12YXIgVXI9M2U1LHFyPVtVZS5Nb3VzZU1vdmUsVWUuTW91c2VJbnRlcmFjdGlvbixVZS5TY3JvbGwsVWUuVmlld3BvcnRSZXNpemUsVWUuSW5wdXQsVWUuVG91Y2hNb3ZlLFVlLk1lZGlhSW50ZXJhY3Rpb24sVWUuRHJhZ10sQnI9dD0+KHtycndlYk1ldGhvZDp0LGVucXVldWVkQXQ6RGF0ZS5ub3coKSxhdHRlbXB0OjF9KTtmdW5jdGlvbiBIcih0KXtyZXR1cm4gZnVuY3Rpb24odCxpKXtmb3IodmFyIGU9XCJcIixyPTA7cjx0Lmxlbmd0aDspe3ZhciBzPXRbcisrXTtzPDEyOHx8aT9lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHMpOnM8MjI0P2UrPVN0cmluZy5mcm9tQ2hhckNvZGUoKDMxJnMpPDw2fDYzJnRbcisrXSk6czwyNDA/ZSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoMTUmcyk8PDEyfCg2MyZ0W3IrK10pPDw2fDYzJnRbcisrXSk6KHM9KCgxNSZzKTw8MTh8KDYzJnRbcisrXSk8PDEyfCg2MyZ0W3IrK10pPDw2fDYzJnRbcisrXSktNjU1MzYsZSs9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxzPj4xMCw1NjMyMHwxMDIzJnMpKX1yZXR1cm4gZX0oQXIoRHIoSlNPTi5zdHJpbmdpZnkodCkpKSwhMCl9ZnVuY3Rpb24gV3IodCl7cmV0dXJuIHQudHlwZT09PXplLkN1c3RvbSYmXCJzZXNzaW9uSWRsZVwiPT09dC5kYXRhLnRhZ31mdW5jdGlvbiBHcih0LGkpe3JldHVybiBpLnNvbWUoKGk9PlwicmVnZXhcIj09PWkubWF0Y2hpbmcmJm5ldyBSZWdFeHAoaS51cmwpLnRlc3QodCkpKX1jbGFzcyBKcntnZXQgZ3QoKXtyZXR1cm4gdGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5zZXNzaW9uX2lkbGVfdGhyZXNob2xkX21zfHwzZTV9Z2V0IHN0YXJ0ZWQoKXtyZXR1cm4gdGhpcy5fdH1nZXQgYnQoKXtpZighdGhpcy5OLnNlc3Npb25NYW5hZ2VyKXRocm93IG5ldyBFcnJvcihMcitcIiBtdXN0IGJlIHN0YXJ0ZWQgd2l0aCBhIHZhbGlkIHNlc3Npb25NYW5hZ2VyLlwiKTtyZXR1cm4gdGhpcy5OLnNlc3Npb25NYW5hZ2VyfWdldCB3dCgpe3ZhciB0LGk7cmV0dXJuXCJ0cmlnZ2VyX3BlbmRpbmdcIj09PXRoaXMueXQ/NmU0Om51bGwhPT0odD1udWxsPT0oaT10aGlzLk4uY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nKT92b2lkIDA6aS5mdWxsX3NuYXBzaG90X2ludGVydmFsX21pbGxpcykmJnZvaWQgMCE9PXQ/dDpVcn1nZXQgU3QoKXt2YXIgdD10aGlzLk4uZ2V0X3Byb3BlcnR5KCR0KTtyZXR1cm4gQSh0KT90Om51bGx9Z2V0ICR0KCl7dmFyIHQsaSxlPW51bGw9PSh0PXRoaXMuTSk/dm9pZCAwOnQuZGF0YVsobnVsbD09KGk9dGhpcy5NKT92b2lkIDA6aS5kYXRhLmxlbmd0aCktMV0se3Nlc3Npb25TdGFydFRpbWVzdGFtcDpyfT10aGlzLmJ0LmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCEwKTtyZXR1cm4gZT9lLnRpbWVzdGFtcC1yOm51bGx9Z2V0IGt0KCl7dmFyIHQ9ISF0aGlzLk4uZ2V0X3Byb3BlcnR5KGZ0KSxlPSF0aGlzLk4uY29uZmlnLmRpc2FibGVfc2Vzc2lvbl9yZWNvcmRpbmc7cmV0dXJuIGkmJnQmJmV9Z2V0IHh0KCl7dmFyIHQ9ISF0aGlzLk4uZ2V0X3Byb3BlcnR5KHB0KSxpPXRoaXMuTi5jb25maWcuZW5hYmxlX3JlY29yZGluZ19jb25zb2xlX2xvZztyZXR1cm4gbnVsbCE9aT9pOnR9Z2V0IEV0KCl7dmFyIHQsaSxlLHIscyxuLG89dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5jYXB0dXJlQ2FudmFzLGE9dGhpcy5OLmdldF9wcm9wZXJ0eShtdCksbD1udWxsIT09KHQ9bnVsbCE9PShpPW51bGw9PW8/dm9pZCAwOm8ucmVjb3JkQ2FudmFzKSYmdm9pZCAwIT09aT9pOm51bGw9PWE/dm9pZCAwOmEuZW5hYmxlZCkmJnZvaWQgMCE9PXQmJnQsdT1udWxsIT09KGU9bnVsbCE9PShyPW51bGw9PW8/dm9pZCAwOm8uY2FudmFzRnBzKSYmdm9pZCAwIT09cj9yOm51bGw9PWE/dm9pZCAwOmEuZnBzKSYmdm9pZCAwIT09ZT9lOjQsaD1udWxsIT09KHM9bnVsbCE9PShuPW51bGw9PW8/dm9pZCAwOm8uY2FudmFzUXVhbGl0eSkmJnZvaWQgMCE9PW4/bjpudWxsPT1hP3ZvaWQgMDphLnF1YWxpdHkpJiZ2b2lkIDAhPT1zP3M6LjQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpe3ZhciBkPXBhcnNlRmxvYXQoaCk7aD1pc05hTihkKT8uNDpkfXJldHVybntlbmFibGVkOmwsZnBzOlhlKHUsMCwxMixcImNhbnZhcyByZWNvcmRpbmcgZnBzXCIsNCkscXVhbGl0eTpYZShoLDAsMSxcImNhbnZhcyByZWNvcmRpbmcgcXVhbGl0eVwiLC40KX19Z2V0IEl0KCl7dmFyIHQsaSxlPXRoaXMuTi5nZXRfcHJvcGVydHkoZ3QpLHI9e3JlY29yZEhlYWRlcnM6bnVsbD09KHQ9dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZyk/dm9pZCAwOnQucmVjb3JkSGVhZGVycyxyZWNvcmRCb2R5Om51bGw9PShpPXRoaXMuTi5jb25maWcuc2Vzc2lvbl9yZWNvcmRpbmcpP3ZvaWQgMDppLnJlY29yZEJvZHl9LHM9KG51bGw9PXI/dm9pZCAwOnIucmVjb3JkSGVhZGVycyl8fChudWxsPT1lP3ZvaWQgMDplLnJlY29yZEhlYWRlcnMpLG49KG51bGw9PXI/dm9pZCAwOnIucmVjb3JkQm9keSl8fChudWxsPT1lP3ZvaWQgMDplLnJlY29yZEJvZHkpLG89SSh0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpP3RoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZS5uZXR3b3JrX3RpbWluZzp0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UsYT0hIShBKG8pP286bnVsbD09ZT92b2lkIDA6ZS5jYXB0dXJlUGVyZm9ybWFuY2UpO3JldHVybiBzfHxufHxhP3tyZWNvcmRIZWFkZXJzOnMscmVjb3JkQm9keTpuLHJlY29yZFBlcmZvcm1hbmNlOmF9OnZvaWQgMH1nZXQgUHQoKXt2YXIgdCxpLGUscixzLG4sbz10aGlzLk4uZ2V0X3Byb3BlcnR5KF90KSxhPXttYXNrQWxsSW5wdXRzOm51bGw9PSh0PXRoaXMuTi5jb25maWcuc2Vzc2lvbl9yZWNvcmRpbmcpP3ZvaWQgMDp0Lm1hc2tBbGxJbnB1dHMsbWFza1RleHRTZWxlY3RvcjpudWxsPT0oaT10aGlzLk4uY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nKT92b2lkIDA6aS5tYXNrVGV4dFNlbGVjdG9yLGJsb2NrU2VsZWN0b3I6bnVsbD09KGU9dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZyk/dm9pZCAwOmUuYmxvY2tTZWxlY3Rvcn0sbD1udWxsIT09KHI9bnVsbD09YT92b2lkIDA6YS5tYXNrQWxsSW5wdXRzKSYmdm9pZCAwIT09cj9yOm51bGw9PW8/dm9pZCAwOm8ubWFza0FsbElucHV0cyx1PW51bGwhPT0ocz1udWxsPT1hP3ZvaWQgMDphLm1hc2tUZXh0U2VsZWN0b3IpJiZ2b2lkIDAhPT1zP3M6bnVsbD09bz92b2lkIDA6by5tYXNrVGV4dFNlbGVjdG9yLGg9bnVsbCE9PShuPW51bGw9PWE/dm9pZCAwOmEuYmxvY2tTZWxlY3RvcikmJnZvaWQgMCE9PW4/bjpudWxsPT1vP3ZvaWQgMDpvLmJsb2NrU2VsZWN0b3I7cmV0dXJuIFIobCkmJlIodSkmJlIoaCk/dm9pZCAwOnttYXNrQWxsSW5wdXRzOm51bGw9PWx8fGwsbWFza1RleHRTZWxlY3Rvcjp1LGJsb2NrU2VsZWN0b3I6aH19Z2V0IFJ0KCl7dmFyIHQ9dGhpcy5OLmdldF9wcm9wZXJ0eShidCk7cmV0dXJuIEYodCk/dDpudWxsfWdldCBUdCgpe3ZhciB0PXRoaXMuTi5nZXRfcHJvcGVydHkod3QpO3JldHVybiBGKHQpP3Q6bnVsbH1nZXQgc3RhdHVzKCl7cmV0dXJuIHRoaXMuTXQ/dGhpcy5rdD8hMT09PXRoaXMuU3Q/XCJkaXNhYmxlZFwiOnRoaXMuT3Q/XCJwYXVzZWRcIjpDKHRoaXMuQ3QpfHx0aGlzLkZ0P1widHJpZ2dlcl9wZW5kaW5nXCI9PT10aGlzLnl0P1wiYnVmZmVyaW5nXCI6QSh0aGlzLlN0KT90aGlzLlN0P1wic2FtcGxlZFwiOlwiZGlzYWJsZWRcIjpcImFjdGl2ZVwiOlwiYnVmZmVyaW5nXCI6XCJkaXNhYmxlZFwiOlwiYnVmZmVyaW5nXCJ9Z2V0IEF0KCl7dmFyIHQ7cmV0dXJuIDA9PT10aGlzLkR0Lmxlbmd0aD9cInRyaWdnZXJfZGlzYWJsZWRcIjoobnVsbD09KHQ9dGhpcy5OKT92b2lkIDA6dC5nZXRfcHJvcGVydHkoa3QpKT09PXRoaXMuanQ/XCJ0cmlnZ2VyX2FjdGl2YXRlZFwiOlwidHJpZ2dlcl9wZW5kaW5nXCJ9Z2V0IEx0KCl7dmFyIHQ7cmV0dXJuIDA9PT10aGlzLk50Lmxlbmd0aD9cInRyaWdnZXJfZGlzYWJsZWRcIjoobnVsbD09KHQ9dGhpcy5OKT92b2lkIDA6dC5nZXRfcHJvcGVydHkoeHQpKT09PXRoaXMuanQ/XCJ0cmlnZ2VyX2FjdGl2YXRlZFwiOlwidHJpZ2dlcl9wZW5kaW5nXCJ9Z2V0IHl0KCl7dmFyIHQ9XCJ0cmlnZ2VyX2FjdGl2YXRlZFwiPT09dGhpcy5MdHx8XCJ0cmlnZ2VyX2FjdGl2YXRlZFwiPT09dGhpcy5BdCxpPVwidHJpZ2dlcl9wZW5kaW5nXCI9PT10aGlzLkx0fHxcInRyaWdnZXJfcGVuZGluZ1wiPT09dGhpcy5BdDtyZXR1cm4gdD9cInRyaWdnZXJfYWN0aXZhdGVkXCI6aT9cInRyaWdnZXJfcGVuZGluZ1wiOlwidHJpZ2dlcl9kaXNhYmxlZFwifWNvbnN0cnVjdG9yKHQpe2lmKHRoaXMuenQ9W10sdGhpcy5VdD1cInVua25vd25cIix0aGlzLkZ0PSExLHRoaXMucXQ9RGF0ZS5ub3coKSx0aGlzLkN0PW51bGwsdGhpcy5CdD12b2lkIDAsdGhpcy5IdD12b2lkIDAsdGhpcy5XdD12b2lkIDAsdGhpcy5HdD12b2lkIDAsdGhpcy5EdD1bXSx0aGlzLkp0PVtdLHRoaXMuT3Q9ITEsdGhpcy5OdD1bXSx0aGlzLlZ0PXZvaWQgMCx0aGlzLl9mb3JjZUFsbG93TG9jYWxob3N0TmV0d29ya0NhcHR1cmU9ITEsdGhpcy5LdD0oKT0+e3RoaXMuWXQoKX0sdGhpcy5YdD0oKT0+e3RoaXMuUXQoXCJicm93c2VyIG9mZmxpbmVcIix7fSl9LHRoaXMuWnQ9KCk9Pnt0aGlzLlF0KFwiYnJvd3NlciBvbmxpbmVcIix7fSl9LHRoaXMudGk9KCk9PntpZihudWxsIT1hJiZhLnZpc2liaWxpdHlTdGF0ZSl7dmFyIHQ9XCJ3aW5kb3cgXCIrYS52aXNpYmlsaXR5U3RhdGU7dGhpcy5RdCh0LHt9KX19LHRoaXMuTj10LHRoaXMuX3Q9ITEsdGhpcy5paT1cIi9zL1wiLHRoaXMuZWk9dm9pZCAwLHRoaXMuTXQ9ITEsIXRoaXMuTi5zZXNzaW9uTWFuYWdlcil0aHJvdyBOci5lcnJvcihcInN0YXJ0ZWQgd2l0aG91dCB2YWxpZCBzZXNzaW9uTWFuYWdlclwiKSxuZXcgRXJyb3IoTHIrXCIgc3RhcnRlZCB3aXRob3V0IHZhbGlkIHNlc3Npb25NYW5hZ2VyLiBUaGlzIGlzIGEgYnVnLlwiKTtpZih0aGlzLk4uY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRocm93IG5ldyBFcnJvcihMcitcIiBjYW5ub3QgYmUgdXNlZCB3aXRoIF9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlLlwiKTt2YXJ7c2Vzc2lvbklkOmksd2luZG93SWQ6ZX09dGhpcy5idC5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCgpO3RoaXMuanQ9aSx0aGlzLnJpPWUsdGhpcy5NPXRoaXMuc2koKSx0aGlzLmd0Pj10aGlzLmJ0LnNlc3Npb25UaW1lb3V0TXMmJk5yLndhcm4oXCJzZXNzaW9uX2lkbGVfdGhyZXNob2xkX21zIChcIit0aGlzLmd0K1wiKSBpcyBncmVhdGVyIHRoYW4gdGhlIHNlc3Npb24gdGltZW91dCAoXCIrdGhpcy5idC5zZXNzaW9uVGltZW91dE1zK1wiKS4gU2Vzc2lvbiB3aWxsIG5ldmVyIGJlIGRldGVjdGVkIGFzIGlkbGVcIil9c3RhcnRJZkVuYWJsZWRPclN0b3AodCl7dGhpcy5rdD8odGhpcy5uaSh0KSxzdChpLFwiYmVmb3JldW5sb2FkXCIsdGhpcy5LdCksc3QoaSxcIm9mZmxpbmVcIix0aGlzLlh0KSxzdChpLFwib25saW5lXCIsdGhpcy5adCksc3QoaSxcInZpc2liaWxpdHljaGFuZ2VcIix0aGlzLnRpKSx0aGlzLm9pKCksdGhpcy5haSgpLEModGhpcy5CdCkmJih0aGlzLkJ0PXRoaXMuTi5vbihcImV2ZW50Q2FwdHVyZWRcIiwodD0+e3RyeXtpZihcIiRwYWdldmlld1wiPT09dC5ldmVudCl7dmFyIGk9bnVsbCE9dCYmdC5wcm9wZXJ0aWVzLiRjdXJyZW50X3VybD90aGlzLmxpKG51bGw9PXQ/dm9pZCAwOnQucHJvcGVydGllcy4kY3VycmVudF91cmwpOlwiXCI7aWYoIWkpcmV0dXJuO3RoaXMuUXQoXCIkcGFnZXZpZXdcIix7aHJlZjppfSl9fWNhdGNoKHQpe05yLmVycm9yKFwiQ291bGQgbm90IGFkZCAkcGFnZXZpZXcgdG8gcnJ3ZWIgc2Vzc2lvblwiLHQpfX0pKSksdGhpcy5IdHx8KHRoaXMuSHQ9dGhpcy5idC5vblNlc3Npb25JZCgoKHQsaSxlKT0+e3ZhciByLHMsbixvO2UmJih0aGlzLlF0KFwiJHNlc3Npb25faWRfY2hhbmdlXCIse3Nlc3Npb25JZDp0LHdpbmRvd0lkOmksY2hhbmdlUmVhc29uOmV9KSxudWxsPT0ocj10aGlzLk4pfHxudWxsPT0ocz1yLnBlcnNpc3RlbmNlKXx8cy51bnJlZ2lzdGVyKHh0KSxudWxsPT0obj10aGlzLk4pfHxudWxsPT0obz1uLnBlcnNpc3RlbmNlKXx8by51bnJlZ2lzdGVyKGt0KSl9KSkpKTp0aGlzLnN0b3BSZWNvcmRpbmcoKX1zdG9wUmVjb3JkaW5nKCl7dmFyIHQsZSxyLHM7dGhpcy5fdCYmdGhpcy5laSYmKHRoaXMuZWkoKSx0aGlzLmVpPXZvaWQgMCx0aGlzLl90PSExLG51bGw9PWl8fGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLHRoaXMuS3QpLG51bGw9PWl8fGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIix0aGlzLlh0KSxudWxsPT1pfHxpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIix0aGlzLlp0KSxudWxsPT1pfHxpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsdGhpcy50aSksdGhpcy5zaSgpLGNsZWFySW50ZXJ2YWwodGhpcy51aSksbnVsbD09KHQ9dGhpcy5CdCl8fHQuY2FsbCh0aGlzKSx0aGlzLkJ0PXZvaWQgMCxudWxsPT0oZT10aGlzLlZ0KXx8ZS5jYWxsKHRoaXMpLHRoaXMuVnQ9dm9pZCAwLG51bGw9PShyPXRoaXMuSHQpfHxyLmNhbGwodGhpcyksdGhpcy5IdD12b2lkIDAsbnVsbD09KHM9dGhpcy5HdCl8fHMuY2FsbCh0aGlzKSx0aGlzLkd0PXZvaWQgMCxOci5pbmZvKFwic3RvcHBlZFwiKSl9aGkoKXt2YXIgdDtudWxsPT0odD10aGlzLk4ucGVyc2lzdGVuY2UpfHx0LnVucmVnaXN0ZXIoJHQpfWRpKHQpe3ZhciBpLGU9dGhpcy5qdCE9PXQscj10aGlzLlJ0O2lmKEYocikpe3ZhciBzPXRoaXMuU3Qsbj1lfHwhQShzKSxvPW4/anIodCxyKTpzO24mJihvP3RoaXMudmkoXCJzYW1wbGVkXCIpOk5yLndhcm4oXCJTYW1wbGUgcmF0ZSAoXCIrcitcIikgaGFzIGRldGVybWluZWQgdGhhdCB0aGlzIHNlc3Npb25JZCAoXCIrdCtcIikgd2lsbCBub3QgYmUgc2VudCB0byB0aGUgc2VydmVyLlwiKSx0aGlzLlF0KFwic2FtcGxpbmdEZWNpc2lvbk1hZGVcIix7c2FtcGxlUmF0ZTpyLGlzU2FtcGxlZDpvfSkpLG51bGw9PShpPXRoaXMuTi5wZXJzaXN0ZW5jZSl8fGkucmVnaXN0ZXIoe1skdF06b30pfWVsc2UgdGhpcy5oaSgpfW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpLGUscixzLG4sbzsodGhpcy5RdChcIiRyZW1vdGVfY29uZmlnX3JlY2VpdmVkXCIsdCksdGhpcy5jaSh0KSx0aGlzLkN0PShudWxsPT0oaT10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDppLmxpbmtlZEZsYWcpfHxudWxsLG51bGwhPShlPXQuc2Vzc2lvblJlY29yZGluZykmJmUuZW5kcG9pbnQpJiYodGhpcy5paT1udWxsPT0obz10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDpvLmVuZHBvaW50KTtpZih0aGlzLm9pKCksIUModGhpcy5DdCkmJiF0aGlzLkZ0KXt2YXIgYT1UKHRoaXMuQ3QpP3RoaXMuQ3Q6dGhpcy5DdC5mbGFnLGw9VCh0aGlzLkN0KT9udWxsOnRoaXMuQ3QudmFyaWFudDt0aGlzLk4ub25GZWF0dXJlRmxhZ3MoKCh0LGkpPT57dmFyIGU9SShpKSYmYSBpbiBpLHI9bD9pW2FdPT09bDplO3ImJnRoaXMudmkoXCJsaW5rZWRfZmxhZ19tYXRjaGVkXCIse2xpbmtlZEZsYWc6YSxsaW5rZWRWYXJpYW50Omx9KSx0aGlzLkZ0PXJ9KSl9bnVsbCE9KHI9dC5zZXNzaW9uUmVjb3JkaW5nKSYmci51cmxUcmlnZ2VycyYmKHRoaXMuRHQ9dC5zZXNzaW9uUmVjb3JkaW5nLnVybFRyaWdnZXJzKSxudWxsIT0ocz10LnNlc3Npb25SZWNvcmRpbmcpJiZzLnVybEJsb2NrbGlzdCYmKHRoaXMuSnQ9dC5zZXNzaW9uUmVjb3JkaW5nLnVybEJsb2NrbGlzdCksbnVsbCE9KG49dC5zZXNzaW9uUmVjb3JkaW5nKSYmbi5ldmVudFRyaWdnZXJzJiYodGhpcy5OdD10LnNlc3Npb25SZWNvcmRpbmcuZXZlbnRUcmlnZ2VycyksdGhpcy5NdD0hMCx0aGlzLnN0YXJ0SWZFbmFibGVkT3JTdG9wKCl9b2koKXtGKHRoaXMuUnQpJiZDKHRoaXMuR3QpJiYodGhpcy5HdD10aGlzLmJ0Lm9uU2Vzc2lvbklkKCh0PT57dGhpcy5kaSh0KX0pKSl9Y2kodCl7aWYodGhpcy5OLnBlcnNpc3RlbmNlKXt2YXIgaSxlPXRoaXMuTi5wZXJzaXN0ZW5jZSxyPSgpPT57dmFyIGkscixzLG4sbyxhLGwsdSxoLGQ9bnVsbD09KGk9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6aS5zYW1wbGVSYXRlLHY9QyhkKT9udWxsOnBhcnNlRmxvYXQoZCk7Qyh2KSYmdGhpcy5oaSgpO3ZhciBjPW51bGw9PShyPXQuc2Vzc2lvblJlY29yZGluZyk/dm9pZCAwOnIubWluaW11bUR1cmF0aW9uTWlsbGlzZWNvbmRzO2UucmVnaXN0ZXIoe1tmdF06ISF0LnNlc3Npb25SZWNvcmRpbmcsW3B0XTpudWxsPT0ocz10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDpzLmNvbnNvbGVMb2dSZWNvcmRpbmdFbmFibGVkLFtndF06Qih7Y2FwdHVyZVBlcmZvcm1hbmNlOnQuY2FwdHVyZVBlcmZvcm1hbmNlfSxudWxsPT0obj10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDpuLm5ldHdvcmtQYXlsb2FkQ2FwdHVyZSksW190XTpudWxsPT0obz10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDpvLm1hc2tpbmcsW210XTp7ZW5hYmxlZDpudWxsPT0oYT10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDphLnJlY29yZENhbnZhcyxmcHM6bnVsbD09KGw9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6bC5jYW52YXNGcHMscXVhbGl0eTpudWxsPT0odT10LnNlc3Npb25SZWNvcmRpbmcpP3ZvaWQgMDp1LmNhbnZhc1F1YWxpdHl9LFtidF06dixbd3RdOlIoYyk/bnVsbDpjLFt5dF06bnVsbD09KGg9dC5zZXNzaW9uUmVjb3JkaW5nKT92b2lkIDA6aC5zY3JpcHRDb25maWd9KX07cigpLG51bGw9PShpPXRoaXMuV3QpfHxpLmNhbGwodGhpcyksdGhpcy5XdD10aGlzLmJ0Lm9uU2Vzc2lvbklkKHIpfX1sb2codCxpKXt2YXIgZTt2b2lkIDA9PT1pJiYoaT1cImxvZ1wiKSxudWxsPT0oZT10aGlzLk4uc2Vzc2lvblJlY29yZGluZyl8fGUub25SUndlYkVtaXQoe3R5cGU6NixkYXRhOntwbHVnaW46XCJycndlYi9jb25zb2xlQDFcIixwYXlsb2FkOntsZXZlbDppLHRyYWNlOltdLHBheWxvYWQ6W0pTT04uc3RyaW5naWZ5KHQpXX19LHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9bmkodCl7aWYoIVIoT2JqZWN0LmFzc2lnbikmJiFSKEFycmF5LmZyb20pJiYhKHRoaXMuX3R8fHRoaXMuTi5jb25maWcuZGlzYWJsZV9zZXNzaW9uX3JlY29yZGluZ3x8dGhpcy5OLmNvbnNlbnQuaXNPcHRlZE91dCgpKSl7dmFyIGk7aWYodGhpcy5fdD0hMCx0aGlzLmJ0LmNoZWNrQW5kR2V0U2Vzc2lvbkFuZFdpbmRvd0lkKCksenIoKSl0aGlzLmZpKCk7ZWxzZSBudWxsPT0oaT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PWkubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8aS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuTix0aGlzLnBpLCh0PT57aWYodClyZXR1cm4gTnIuZXJyb3IoXCJjb3VsZCBub3QgbG9hZCByZWNvcmRlclwiLHQpO3RoaXMuZmkoKX0pKTtOci5pbmZvKFwic3RhcnRpbmdcIiksXCJhY3RpdmVcIj09PXRoaXMuc3RhdHVzJiZ0aGlzLnZpKHR8fFwicmVjb3JkaW5nX2luaXRpYWxpemVkXCIpfX1nZXQgcGkoKXt2YXIgdCxpLGU7cmV0dXJuKG51bGw9PSh0PXRoaXMuTil8fG51bGw9PShpPXQucGVyc2lzdGVuY2UpfHxudWxsPT0oZT1pLmdldF9wcm9wZXJ0eSh5dCkpP3ZvaWQgMDplLnNjcmlwdCl8fFwicmVjb3JkZXJcIn1naSh0KXt2YXIgaTtyZXR1cm4gMz09PXQudHlwZSYmLTEhPT1xci5pbmRleE9mKG51bGw9PShpPXQuZGF0YSk/dm9pZCAwOmkuc291cmNlKX1taSh0KXt2YXIgaT10aGlzLmdpKHQpO2l8fHRoaXMuVXR8fHQudGltZXN0YW1wLXRoaXMucXQ+dGhpcy5ndCYmKHRoaXMuVXQ9ITAsY2xlYXJJbnRlcnZhbCh0aGlzLnVpKSx0aGlzLlF0KFwic2Vzc2lvbklkbGVcIix7ZXZlbnRUaW1lc3RhbXA6dC50aW1lc3RhbXAsbGFzdEFjdGl2aXR5VGltZXN0YW1wOnRoaXMucXQsdGhyZXNob2xkOnRoaXMuZ3QsYnVmZmVyTGVuZ3RoOnRoaXMuTS5kYXRhLmxlbmd0aCxidWZmZXJTaXplOnRoaXMuTS5zaXplfSksdGhpcy5ZdCgpKTt2YXIgZT0hMTtpZihpJiYodGhpcy5xdD10LnRpbWVzdGFtcCx0aGlzLlV0KSl7dmFyIHI9XCJ1bmtub3duXCI9PT10aGlzLlV0O3RoaXMuVXQ9ITEscnx8KHRoaXMuUXQoXCJzZXNzaW9uTm9Mb25nZXJJZGxlXCIse3JlYXNvbjpcInVzZXIgYWN0aXZpdHlcIix0eXBlOnQudHlwZX0pLGU9ITApfWlmKCF0aGlzLlV0KXt2YXJ7d2luZG93SWQ6cyxzZXNzaW9uSWQ6bn09dGhpcy5idC5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghaSx0LnRpbWVzdGFtcCksbz10aGlzLmp0IT09bixhPXRoaXMucmkhPT1zO3RoaXMucmk9cyx0aGlzLmp0PW4sb3x8YT8odGhpcy5zdG9wUmVjb3JkaW5nKCksdGhpcy5zdGFydElmRW5hYmxlZE9yU3RvcChcInNlc3Npb25faWRfY2hhbmdlZFwiKSk6ZSYmdGhpcy5iaSgpfX13aSh0KXt0cnl7cmV0dXJuIHQucnJ3ZWJNZXRob2QoKSwhMH1jYXRjaChpKXtyZXR1cm4gdGhpcy56dC5sZW5ndGg8MTA/dGhpcy56dC5wdXNoKHtlbnF1ZXVlZEF0OnQuZW5xdWV1ZWRBdHx8RGF0ZS5ub3coKSxhdHRlbXB0OnQuYXR0ZW1wdCsrLHJyd2ViTWV0aG9kOnQucnJ3ZWJNZXRob2R9KTpOci53YXJuKFwiY291bGQgbm90IGVtaXQgcXVldWVkIHJyd2ViIGV2ZW50LlwiLGksdCksITF9fVF0KHQsaSl7cmV0dXJuIHRoaXMud2koQnIoKCgpPT56cigpLmFkZEN1c3RvbUV2ZW50KHQsaSkpKSl9eWkoKXtyZXR1cm4gdGhpcy53aShCcigoKCk9PnpyKCkudGFrZUZ1bGxTbmFwc2hvdCgpKSkpfWZpKCl7dmFyIHQsaSxlLHIscz17YmxvY2tDbGFzczpcInBoLW5vLWNhcHR1cmVcIixibG9ja1NlbGVjdG9yOnZvaWQgMCxpZ25vcmVDbGFzczpcInBoLWlnbm9yZS1pbnB1dFwiLG1hc2tUZXh0Q2xhc3M6XCJwaC1tYXNrXCIsbWFza1RleHRTZWxlY3Rvcjp2b2lkIDAsbWFza1RleHRGbjp2b2lkIDAsbWFza0FsbElucHV0czohMCxtYXNrSW5wdXRPcHRpb25zOntwYXNzd29yZDohMH0sbWFza0lucHV0Rm46dm9pZCAwLHNsaW1ET01PcHRpb25zOnt9LGNvbGxlY3RGb250czohMSxpbmxpbmVTdHlsZXNoZWV0OiEwLHJlY29yZENyb3NzT3JpZ2luSWZyYW1lczohMX0sbj10aGlzLk4uY29uZmlnLnNlc3Npb25fcmVjb3JkaW5nO2Zvcih2YXJbbyxhXW9mIE9iamVjdC5lbnRyaWVzKG58fHt9KSlvIGluIHMmJihcIm1hc2tJbnB1dE9wdGlvbnNcIj09PW8/cy5tYXNrSW5wdXRPcHRpb25zPUIoe3Bhc3N3b3JkOiEwfSxhKTpzW29dPWEpOyh0aGlzLkV0JiZ0aGlzLkV0LmVuYWJsZWQmJihzLnJlY29yZENhbnZhcz0hMCxzLnNhbXBsaW5nPXtjYW52YXM6dGhpcy5FdC5mcHN9LHMuZGF0YVVSTE9wdGlvbnM9e3R5cGU6XCJpbWFnZS93ZWJwXCIscXVhbGl0eTp0aGlzLkV0LnF1YWxpdHl9KSx0aGlzLlB0KSYmKHMubWFza0FsbElucHV0cz1udWxsPT09KGk9dGhpcy5QdC5tYXNrQWxsSW5wdXRzKXx8dm9pZCAwPT09aXx8aSxzLm1hc2tUZXh0U2VsZWN0b3I9bnVsbCE9PShlPXRoaXMuUHQubWFza1RleHRTZWxlY3RvcikmJnZvaWQgMCE9PWU/ZTp2b2lkIDAscy5ibG9ja1NlbGVjdG9yPW51bGwhPT0ocj10aGlzLlB0LmJsb2NrU2VsZWN0b3IpJiZ2b2lkIDAhPT1yP3I6dm9pZCAwKTt2YXIgbD16cigpO2lmKGwpe3RoaXMuU2k9bnVsbCE9PSh0PXRoaXMuU2kpJiZ2b2lkIDAhPT10P3Q6bmV3IFFlKGwse3JlZmlsbFJhdGU6dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5fX211dGF0aW9uUmF0ZUxpbWl0ZXJSZWZpbGxSYXRlLGJ1Y2tldFNpemU6dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5fX211dGF0aW9uUmF0ZUxpbWl0ZXJCdWNrZXRTaXplLG9uQmxvY2tlZE5vZGU6KHQsaSk9Pnt2YXIgZT1cIlRvbyBtYW55IG11dGF0aW9ucyBvbiBub2RlICdcIit0K1wiJy4gUmF0ZSBsaW1pdGluZy4gVGhpcyBjb3VsZCBiZSBkdWUgdG8gU1ZHIGFuaW1hdGlvbnMgb3Igc29tZXRoaW5nIHNpbWlsYXJcIjtOci5pbmZvKGUse25vZGU6aX0pLHRoaXMubG9nKExyK1wiIFwiK2UsXCJ3YXJuXCIpfX0pO3ZhciB1PXRoaXMuJGkoKTt0aGlzLmVpPWwoQih7ZW1pdDp0PT57dGhpcy5vblJSd2ViRW1pdCh0KX0scGx1Z2luczp1fSxzKSksdGhpcy5xdD1EYXRlLm5vdygpLHRoaXMuVXQ9QSh0aGlzLlV0KT90aGlzLlV0OlwidW5rbm93blwiLHRoaXMuUXQoXCIkc2Vzc2lvbl9vcHRpb25zXCIse3Nlc3Npb25SZWNvcmRpbmdPcHRpb25zOnMsYWN0aXZlUGx1Z2luczp1Lm1hcCgodD0+bnVsbD09dD92b2lkIDA6dC5uYW1lKSl9KSx0aGlzLlF0KFwiJHBvc3Rob2dfY29uZmlnXCIse2NvbmZpZzp0aGlzLk4uY29uZmlnfSl9ZWxzZSBOci5lcnJvcihcIm9uU2NyaXB0TG9hZGVkIHdhcyBjYWxsZWQgYnV0IHJyd2ViUmVjb3JkIGlzIG5vdCBhdmFpbGFibGUuIFRoaXMgaW5kaWNhdGVzIHNvbWV0aGluZyBoYXMgZ29uZSB3cm9uZy5cIil9YmkoKXtpZih0aGlzLnVpJiZjbGVhckludGVydmFsKHRoaXMudWkpLCEwIT09dGhpcy5VdCl7dmFyIHQ9dGhpcy53dDt0JiYodGhpcy51aT1zZXRJbnRlcnZhbCgoKCk9Pnt0aGlzLnlpKCl9KSx0KSl9fSRpKCl7dmFyIHQsaSxlLHIscz1bXSxuPW51bGw9PSh0PWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09KGk9dC5ycndlYlBsdWdpbnMpP3ZvaWQgMDppLmdldFJlY29yZENvbnNvbGVQbHVnaW47biYmdGhpcy54dCYmcy5wdXNoKG4oKSk7dmFyIG89bnVsbD09KGU9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT0ocj1lLnJyd2ViUGx1Z2lucyk/dm9pZCAwOnIuZ2V0UmVjb3JkTmV0d29ya1BsdWdpbjt0aGlzLkl0JiZFKG8pJiYoIWJpLmluY2x1ZGVzKGxvY2F0aW9uLmhvc3RuYW1lKXx8dGhpcy5fZm9yY2VBbGxvd0xvY2FsaG9zdE5ldHdvcmtDYXB0dXJlP3MucHVzaChvKFllKHRoaXMuTi5jb25maWcsdGhpcy5JdCkpKTpOci5pbmZvKFwiTmV0d29ya0NhcHR1cmUgbm90IHN0YXJ0ZWQgYmVjYXVzZSB3ZSBhcmUgb24gbG9jYWxob3N0LlwiKSk7cmV0dXJuIHN9b25SUndlYkVtaXQodCl7dmFyIGk7aWYodGhpcy5raSgpLHQmJkkodCkpe2lmKHQudHlwZT09PXplLk1ldGEpe3ZhciBlPXRoaXMubGkodC5kYXRhLmhyZWYpO2lmKHRoaXMueGk9ZSwhZSlyZXR1cm47dC5kYXRhLmhyZWY9ZX1lbHNlIHRoaXMuRWkoKTtpZih0aGlzLklpKCksIXRoaXMuT3R8fChyPXQpLnR5cGU9PT16ZS5DdXN0b20mJlwicmVjb3JkaW5nIHBhdXNlZFwiPT09ci5kYXRhLnRhZyl7dmFyIHI7dC50eXBlPT09emUuRnVsbFNuYXBzaG90JiZ0aGlzLmJpKCksdC50eXBlPT09emUuRnVsbFNuYXBzaG90JiZcInRyaWdnZXJfcGVuZGluZ1wiPT09dGhpcy55dCYmdGhpcy5zaSgpO3ZhciBzPXRoaXMuU2k/dGhpcy5TaS50aHJvdHRsZU11dGF0aW9ucyh0KTp0O2lmKHMpe3ZhciBuPWZ1bmN0aW9uKHQpe3ZhciBpPXQ7aWYoaSYmSShpKSYmNj09PWkudHlwZSYmSShpLmRhdGEpJiZcInJyd2ViL2NvbnNvbGVAMVwiPT09aS5kYXRhLnBsdWdpbil7aS5kYXRhLnBheWxvYWQucGF5bG9hZC5sZW5ndGg+MTAmJihpLmRhdGEucGF5bG9hZC5wYXlsb2FkPWkuZGF0YS5wYXlsb2FkLnBheWxvYWQuc2xpY2UoMCwxMCksaS5kYXRhLnBheWxvYWQucGF5bG9hZC5wdXNoKFwiLi4uW3RydW5jYXRlZF1cIikpO2Zvcih2YXIgZT1bXSxyPTA7cjxpLmRhdGEucGF5bG9hZC5wYXlsb2FkLmxlbmd0aDtyKyspaS5kYXRhLnBheWxvYWQucGF5bG9hZFtyXSYmaS5kYXRhLnBheWxvYWQucGF5bG9hZFtyXS5sZW5ndGg+MmUzP2UucHVzaChpLmRhdGEucGF5bG9hZC5wYXlsb2FkW3JdLnNsaWNlKDAsMmUzKStcIi4uLlt0cnVuY2F0ZWRdXCIpOmUucHVzaChpLmRhdGEucGF5bG9hZC5wYXlsb2FkW3JdKTtyZXR1cm4gaS5kYXRhLnBheWxvYWQucGF5bG9hZD1lLHR9cmV0dXJuIHR9KHMpO2lmKHRoaXMubWkobiksITAhPT10aGlzLlV0fHxXcihuKSl7aWYoV3Iobikpe3ZhciBvPW4uZGF0YS5wYXlsb2FkO2lmKG8pe3ZhciBhPW8ubGFzdEFjdGl2aXR5VGltZXN0YW1wLGw9by50aHJlc2hvbGQ7bi50aW1lc3RhbXA9YStsfX12YXIgdT1udWxsPT09KGk9dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZy5jb21wcmVzc19ldmVudHMpfHx2b2lkIDA9PT1pfHxpP2Z1bmN0aW9uKHQpe2lmKExlKHQpPDEwMjQpcmV0dXJuIHQ7dHJ5e2lmKHQudHlwZT09PXplLkZ1bGxTbmFwc2hvdClyZXR1cm4gQih7fSx0LHtkYXRhOkhyKHQuZGF0YSksY3Y6XCIyMDI0LTEwXCJ9KTtpZih0LnR5cGU9PT16ZS5JbmNyZW1lbnRhbFNuYXBzaG90JiZ0LmRhdGEuc291cmNlPT09VWUuTXV0YXRpb24pcmV0dXJuIEIoe30sdCx7Y3Y6XCIyMDI0LTEwXCIsZGF0YTpCKHt9LHQuZGF0YSx7dGV4dHM6SHIodC5kYXRhLnRleHRzKSxhdHRyaWJ1dGVzOkhyKHQuZGF0YS5hdHRyaWJ1dGVzKSxyZW1vdmVzOkhyKHQuZGF0YS5yZW1vdmVzKSxhZGRzOkhyKHQuZGF0YS5hZGRzKX0pfSk7aWYodC50eXBlPT09emUuSW5jcmVtZW50YWxTbmFwc2hvdCYmdC5kYXRhLnNvdXJjZT09PVVlLlN0eWxlU2hlZXRSdWxlKXJldHVybiBCKHt9LHQse2N2OlwiMjAyNC0xMFwiLGRhdGE6Qih7fSx0LmRhdGEse2FkZHM6dC5kYXRhLmFkZHM/SHIodC5kYXRhLmFkZHMpOnZvaWQgMCxyZW1vdmVzOnQuZGF0YS5yZW1vdmVzP0hyKHQuZGF0YS5yZW1vdmVzKTp2b2lkIDB9KX0pfWNhdGNoKHQpe05yLmVycm9yKFwiY291bGQgbm90IGNvbXByZXNzIGV2ZW50IC0gd2lsbCB1c2UgdW5jb21wcmVzc2VkIGV2ZW50XCIsdCl9cmV0dXJuIHR9KG4pOm4saD17JHNuYXBzaG90X2J5dGVzOkxlKHUpLCRzbmFwc2hvdF9kYXRhOnUsJHNlc3Npb25faWQ6dGhpcy5qdCwkd2luZG93X2lkOnRoaXMucml9O1wiZGlzYWJsZWRcIiE9PXRoaXMuc3RhdHVzP3RoaXMuUGkoaCk6dGhpcy5zaSgpfX19fX1FaSgpe2lmKCF0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGFnZXZpZXcmJmkpe3ZhciB0PXRoaXMubGkoaS5sb2NhdGlvbi5ocmVmKTt0aGlzLnhpIT09dCYmKHRoaXMuUXQoXCIkdXJsX2NoYW5nZWRcIix7aHJlZjp0fSksdGhpcy54aT10KX19a2koKXtpZih0aGlzLnp0Lmxlbmd0aCl7dmFyIHQ9Wy4uLnRoaXMuenRdO3RoaXMuenQ9W10sdC5mb3JFYWNoKCh0PT57RGF0ZS5ub3coKS10LmVucXVldWVkQXQ8PTJlMyYmdGhpcy53aSh0KX0pKX19bGkodCl7dmFyIGk9dGhpcy5OLmNvbmZpZy5zZXNzaW9uX3JlY29yZGluZztpZihpLm1hc2tOZXR3b3JrUmVxdWVzdEZuKXt2YXIgZSxyPXt1cmw6dH07cmV0dXJuIG51bGw9PShlPXI9aS5tYXNrTmV0d29ya1JlcXVlc3RGbihyKSk/dm9pZCAwOmUudXJsfXJldHVybiB0fXNpKCl7cmV0dXJuIHRoaXMuTT17c2l6ZTowLGRhdGE6W10sc2Vzc2lvbklkOnRoaXMuanQsd2luZG93SWQ6dGhpcy5yaX0sdGhpcy5NfVl0KCl7dGhpcy5SaSYmKGNsZWFyVGltZW91dCh0aGlzLlJpKSx0aGlzLlJpPXZvaWQgMCk7dmFyIHQ9dGhpcy5UdCxpPXRoaXMuJHQsZT1GKGkpJiZpPj0wLHI9Rih0KSYmZSYmaTx0O2lmKFwiYnVmZmVyaW5nXCI9PT10aGlzLnN0YXR1c3x8XCJwYXVzZWRcIj09PXRoaXMuc3RhdHVzfHxcImRpc2FibGVkXCI9PT10aGlzLnN0YXR1c3x8cilyZXR1cm4gdGhpcy5SaT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuWXQoKX0pLDJlMyksdGhpcy5NO3RoaXMuTS5kYXRhLmxlbmd0aD4wJiZOZSh0aGlzLk0pLmZvckVhY2goKHQ9Pnt0aGlzLlRpKHskc25hcHNob3RfYnl0ZXM6dC5zaXplLCRzbmFwc2hvdF9kYXRhOnQuZGF0YSwkc2Vzc2lvbl9pZDp0LnNlc3Npb25JZCwkd2luZG93X2lkOnQud2luZG93SWQsJGxpYjpcIndlYlwiLCRsaWJfdmVyc2lvbjpmLkxJQl9WRVJTSU9OfSl9KSk7cmV0dXJuIHRoaXMuc2koKX1QaSh0KXt2YXIgaSxlPTIrKChudWxsPT0oaT10aGlzLk0pP3ZvaWQgMDppLmRhdGEubGVuZ3RoKXx8MCk7IXRoaXMuVXQmJih0aGlzLk0uc2l6ZSt0LiRzbmFwc2hvdF9ieXRlcytlPjk0MzcxOC40fHx0aGlzLk0uc2Vzc2lvbklkIT09dGhpcy5qdCkmJih0aGlzLk09dGhpcy5ZdCgpKSx0aGlzLk0uc2l6ZSs9dC4kc25hcHNob3RfYnl0ZXMsdGhpcy5NLmRhdGEucHVzaCh0LiRzbmFwc2hvdF9kYXRhKSx0aGlzLlJpfHx0aGlzLlV0fHwodGhpcy5SaT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuWXQoKX0pLDJlMykpfVRpKHQpe3RoaXMuTi5jYXB0dXJlKFwiJHNuYXBzaG90XCIsdCx7X3VybDp0aGlzLk4ucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcImFwaVwiLHRoaXMuaWkpLF9ub1RydW5jYXRlOiEwLF9iYXRjaEtleTpcInJlY29yZGluZ3NcIixza2lwX2NsaWVudF9yYXRlX2xpbWl0aW5nOiEwfSl9SWkoKXtpZih2b2lkIDAhPT1pJiZpLmxvY2F0aW9uLmhyZWYpe3ZhciB0PWkubG9jYXRpb24uaHJlZixlPXRoaXMuT3Qscj1Hcih0LHRoaXMuSnQpO3ImJiFlP3RoaXMuTWkoKTohciYmZSYmdGhpcy5PaSgpLEdyKHQsdGhpcy5EdCkmJnRoaXMuQ2koXCJ1cmxcIil9fUNpKHQpe3ZhciBpLGU7XCJ0cmlnZ2VyX3BlbmRpbmdcIj09PXRoaXMueXQmJihudWxsPT0oaT10aGlzLk4pfHxudWxsPT0oZT1pLnBlcnNpc3RlbmNlKXx8ZS5yZWdpc3Rlcih7W1widXJsXCI9PT10P2t0Onh0XTp0aGlzLmp0fSksdGhpcy5ZdCgpLHRoaXMudmkodCtcIl90cmlnZ2VyX21hdGNoZWRcIikpfU1pKCl7dGhpcy5PdHx8KHRoaXMuT3Q9ITAsY2xlYXJJbnRlcnZhbCh0aGlzLnVpKSxOci5pbmZvKFwicmVjb3JkaW5nIHBhdXNlZCBkdWUgdG8gVVJMIGJsb2NrZXJcIiksdGhpcy5RdChcInJlY29yZGluZyBwYXVzZWRcIix7cmVhc29uOlwidXJsIGJsb2NrZXJcIn0pKX1PaSgpe3RoaXMuT3QmJih0aGlzLk90PSExLHRoaXMueWkoKSx0aGlzLmJpKCksdGhpcy5RdChcInJlY29yZGluZyByZXN1bWVkXCIse3JlYXNvbjpcImxlZnQgYmxvY2tlZCB1cmxcIn0pLE5yLmluZm8oXCJyZWNvcmRpbmcgcmVzdW1lZFwiKSl9YWkoKXswIT09dGhpcy5OdC5sZW5ndGgmJkModGhpcy5WdCkmJih0aGlzLlZ0PXRoaXMuTi5vbihcImV2ZW50Q2FwdHVyZWRcIiwodD0+e3RyeXt0aGlzLk50LmluY2x1ZGVzKHQuZXZlbnQpJiZ0aGlzLkNpKFwiZXZlbnRcIil9Y2F0Y2godCl7TnIuZXJyb3IoXCJDb3VsZCBub3QgYWN0aXZhdGUgZXZlbnQgdHJpZ2dlclwiLHQpfX0pKSl9b3ZlcnJpZGVMaW5rZWRGbGFnKCl7dGhpcy5GdD0hMCx0aGlzLnlpKCksdGhpcy52aShcImxpbmtlZF9mbGFnX292ZXJyaWRkZW5cIil9b3ZlcnJpZGVTYW1wbGluZygpe3ZhciB0O251bGw9PSh0PXRoaXMuTi5wZXJzaXN0ZW5jZSl8fHQucmVnaXN0ZXIoe1skdF06ITB9KSx0aGlzLnlpKCksdGhpcy52aShcInNhbXBsaW5nX292ZXJyaWRkZW5cIil9b3ZlcnJpZGVUcmlnZ2VyKHQpe3RoaXMuQ2kodCl9dmkodCxpKXt0aGlzLk4ucmVnaXN0ZXJfZm9yX3Nlc3Npb24oeyRzZXNzaW9uX3JlY29yZGluZ19zdGFydF9yZWFzb246dH0pLE5yLmluZm8odC5yZXBsYWNlKFwiX1wiLFwiIFwiKSxpKSxtKFtcInJlY29yZGluZ19pbml0aWFsaXplZFwiLFwic2Vzc2lvbl9pZF9jaGFuZ2VkXCJdLHQpfHx0aGlzLlF0KHQsaSl9Z2V0IHNka0RlYnVnUHJvcGVydGllcygpe3ZhcntzZXNzaW9uU3RhcnRUaW1lc3RhbXA6dH09dGhpcy5idC5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCk7cmV0dXJueyRyZWNvcmRpbmdfc3RhdHVzOnRoaXMuc3RhdHVzLCRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9sZW5ndGg6dGhpcy5NLmRhdGEubGVuZ3RoLCRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9zaXplOnRoaXMuTS5zaXplLCRzZGtfZGVidWdfY3VycmVudF9zZXNzaW9uX2R1cmF0aW9uOnRoaXMuJHQsJHNka19kZWJ1Z19zZXNzaW9uX3N0YXJ0OnR9fX12YXIgVnI9eihcIltTZWdtZW50SW50ZWdyYXRpb25dXCIpO2Z1bmN0aW9uIEtyKHQsaSl7dmFyIGU9dC5jb25maWcuc2VnbWVudDtpZighZSlyZXR1cm4gaSgpOyFmdW5jdGlvbih0LGkpe3ZhciBlPXQuY29uZmlnLnNlZ21lbnQ7aWYoIWUpcmV0dXJuIGkoKTt2YXIgcj1lPT57dmFyIHI9KCk9PmUuYW5vbnltb3VzSWQoKXx8amkoKTt0LmNvbmZpZy5nZXRfZGV2aWNlX2lkPXIsZS5pZCgpJiYodC5yZWdpc3Rlcih7ZGlzdGluY3RfaWQ6ZS5pZCgpLCRkZXZpY2VfaWQ6cigpfSksdC5wZXJzaXN0ZW5jZS5zZXRfcHJvcGVydHkoRnQsXCJpZGVudGlmaWVkXCIpKSxpKCl9LHM9ZS51c2VyKCk7XCJ0aGVuXCJpbiBzJiZFKHMudGhlbik/cy50aGVuKCh0PT5yKHQpKSk6cihzKX0odCwoKCk9PntlLnJlZ2lzdGVyKCh0PT57UHJvbWlzZSYmUHJvbWlzZS5yZXNvbHZlfHxWci53YXJuKFwiVGhpcyBicm93c2VyIGRvZXMgbm90IGhhdmUgUHJvbWlzZSBzdXBwb3J0LCBhbmQgY2FuIG5vdCB1c2UgdGhlIHNlZ21lbnQgaW50ZWdyYXRpb25cIik7dmFyIGk9KGksZSk9Pnt2YXIgcjtpZighZSlyZXR1cm4gaTtpLmV2ZW50LnVzZXJJZHx8aS5ldmVudC5hbm9ueW1vdXNJZD09PXQuZ2V0X2Rpc3RpbmN0X2lkKCl8fChWci5pbmZvKFwiTm8gdXNlcklkIHNldCwgcmVzZXR0aW5nIFBvc3RIb2dcIiksdC5yZXNldCgpKSxpLmV2ZW50LnVzZXJJZCYmaS5ldmVudC51c2VySWQhPT10LmdldF9kaXN0aW5jdF9pZCgpJiYoVnIuaW5mbyhcIlVzZXJJZCBzZXQsIGlkZW50aWZ5aW5nIHdpdGggUG9zdEhvZ1wiKSx0LmlkZW50aWZ5KGkuZXZlbnQudXNlcklkKSk7dmFyIHM9dC5GaShlLG51bGwhPT0ocj1pLmV2ZW50LnByb3BlcnRpZXMpJiZ2b2lkIDAhPT1yP3I6e30sbmV3IERhdGUpO3JldHVybiBpLmV2ZW50LnByb3BlcnRpZXM9T2JqZWN0LmFzc2lnbih7fSxzLGkuZXZlbnQucHJvcGVydGllcyksaX07cmV0dXJue25hbWU6XCJQb3N0SG9nIEpTXCIsdHlwZTpcImVucmljaG1lbnRcIix2ZXJzaW9uOlwiMS4wLjBcIixpc0xvYWRlZDooKT0+ITAsbG9hZDooKT0+UHJvbWlzZS5yZXNvbHZlKCksdHJhY2s6dD0+aSh0LHQuZXZlbnQuZXZlbnQpLHBhZ2U6dD0+aSh0LFwiJHBhZ2V2aWV3XCIpLGlkZW50aWZ5OnQ9PmkodCxcIiRpZGVudGlmeVwiKSxzY3JlZW46dD0+aSh0LFwiJHNjcmVlblwiKX19KSh0KSkudGhlbigoKCk9PntpKCl9KSl9KSl9dmFyIFlyPVwicG9zdGhvZy1qc1wiO2Z1bmN0aW9uIFhyKHQsaSl7dmFye29yZ2FuaXphdGlvbjplLHByb2plY3RJZDpyLHByZWZpeDpzLHNldmVyaXR5QWxsb3dMaXN0Om49W1wiZXJyb3JcIl19PXZvaWQgMD09PWk/e306aTtyZXR1cm4gaT0+e3ZhciBvLGEsbCx1LGg7aWYoIShcIipcIj09PW58fG4uaW5jbHVkZXMoaS5sZXZlbCkpfHwhdC5fX2xvYWRlZClyZXR1cm4gaTtpLnRhZ3N8fChpLnRhZ3M9e30pO3ZhciBkPXQucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcInVpXCIsXCIvcHJvamVjdC9cIit0LmNvbmZpZy50b2tlbitcIi9wZXJzb24vXCIrdC5nZXRfZGlzdGluY3RfaWQoKSk7aS50YWdzW1wiUG9zdEhvZyBQZXJzb24gVVJMXCJdPWQsdC5zZXNzaW9uUmVjb3JkaW5nU3RhcnRlZCgpJiYoaS50YWdzW1wiUG9zdEhvZyBSZWNvcmRpbmcgVVJMXCJdPXQuZ2V0X3Nlc3Npb25fcmVwbGF5X3VybCh7d2l0aFRpbWVzdGFtcDohMH0pKTt2YXIgdj0obnVsbD09KG89aS5leGNlcHRpb24pP3ZvaWQgMDpvLnZhbHVlcyl8fFtdLGM9di5tYXAoKHQ9PkIoe30sdCx7c3RhY2t0cmFjZTp0LnN0YWNrdHJhY2U/Qih7fSx0LnN0YWNrdHJhY2Use3R5cGU6XCJyYXdcIixmcmFtZXM6KHQuc3RhY2t0cmFjZS5mcmFtZXN8fFtdKS5tYXAoKHQ9PkIoe30sdCx7cGxhdGZvcm06XCJ3ZWI6amF2YXNjcmlwdFwifSkpKX0pOnZvaWQgMH0pKSksZj17JGV4Y2VwdGlvbl9tZXNzYWdlOihudWxsPT0oYT12WzBdKT92b2lkIDA6YS52YWx1ZSl8fGkubWVzc2FnZSwkZXhjZXB0aW9uX3R5cGU6bnVsbD09KGw9dlswXSk/dm9pZCAwOmwudHlwZSwkZXhjZXB0aW9uX3BlcnNvblVSTDpkLCRleGNlcHRpb25fbGV2ZWw6aS5sZXZlbCwkZXhjZXB0aW9uX2xpc3Q6Yywkc2VudHJ5X2V2ZW50X2lkOmkuZXZlbnRfaWQsJHNlbnRyeV9leGNlcHRpb246aS5leGNlcHRpb24sJHNlbnRyeV9leGNlcHRpb25fbWVzc2FnZToobnVsbD09KHU9dlswXSk/dm9pZCAwOnUudmFsdWUpfHxpLm1lc3NhZ2UsJHNlbnRyeV9leGNlcHRpb25fdHlwZTpudWxsPT0oaD12WzBdKT92b2lkIDA6aC50eXBlLCRzZW50cnlfdGFnczppLnRhZ3N9O3JldHVybiBlJiZyJiYoZi4kc2VudHJ5X3VybD0oc3x8XCJodHRwczovL3NlbnRyeS5pby9vcmdhbml6YXRpb25zL1wiKStlK1wiL2lzc3Vlcy8/cHJvamVjdD1cIityK1wiJnF1ZXJ5PVwiK2kuZXZlbnRfaWQpLHQuZXhjZXB0aW9ucy5zZW5kRXhjZXB0aW9uRXZlbnQoZiksaX19Y2xhc3MgUXJ7Y29uc3RydWN0b3IodCxpLGUscixzKXt0aGlzLm5hbWU9WXIsdGhpcy5zZXR1cE9uY2U9ZnVuY3Rpb24obil7bihYcih0LHtvcmdhbml6YXRpb246aSxwcm9qZWN0SWQ6ZSxwcmVmaXg6cixzZXZlcml0eUFsbG93TGlzdDpzfSkpfX19dmFyIFpyLHRzPW51bGwhPWkmJmkubG9jYXRpb24/a2koaS5sb2NhdGlvbi5oYXNoLFwiX19wb3N0aG9nXCIpfHxraShsb2NhdGlvbi5oYXNoLFwic3RhdGVcIik6bnVsbCxpcz1cIl9wb3N0SG9nVG9vbGJhclBhcmFtc1wiLGVzPXooXCJbVG9vbGJhcl1cIik7IWZ1bmN0aW9uKHQpe3RbdC5VTklOSVRJQUxJWkVEPTBdPVwiVU5JTklUSUFMSVpFRFwiLHRbdC5MT0FESU5HPTFdPVwiTE9BRElOR1wiLHRbdC5MT0FERUQ9Ml09XCJMT0FERURcIn0oWnJ8fChacj17fSkpO2NsYXNzIHJze2NvbnN0cnVjdG9yKHQpe3RoaXMuaW5zdGFuY2U9dH1BaSh0KXtjLnBoX3Rvb2xiYXJfc3RhdGU9dH1EaSgpe3ZhciB0O3JldHVybiBudWxsIT09KHQ9Yy5waF90b29sYmFyX3N0YXRlKSYmdm9pZCAwIT09dD90OlpyLlVOSU5JVElBTElaRUR9bWF5YmVMb2FkVG9vbGJhcih0LGUscil7dmFyIHMsbjtpZih2b2lkIDA9PT10JiYodD12b2lkIDApLHZvaWQgMD09PWUmJihlPXZvaWQgMCksdm9pZCAwPT09ciYmKHI9dm9pZCAwKSwhaXx8IWEpcmV0dXJuITE7dD1udWxsIT09KHM9dCkmJnZvaWQgMCE9PXM/czppLmxvY2F0aW9uLHI9bnVsbCE9PShuPXIpJiZ2b2lkIDAhPT1uP246aS5oaXN0b3J5O3RyeXtpZighZSl7dHJ5e2kubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0ZXN0XCIsXCJ0ZXN0XCIpLGkubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJ0ZXN0XCIpfWNhdGNoKHQpe3JldHVybiExfWU9bnVsbD09aT92b2lkIDA6aS5sb2NhbFN0b3JhZ2V9dmFyIG8sbD10c3x8a2kodC5oYXNoLFwiX19wb3N0aG9nXCIpfHxraSh0Lmhhc2gsXCJzdGF0ZVwiKSx1PWw/WCgoKCk9PkpTT04ucGFyc2UoYXRvYihkZWNvZGVVUklDb21wb25lbnQobCkpKSkpfHxYKCgoKT0+SlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQobCkpKSk6bnVsbDtyZXR1cm4gdSYmXCJwaF9hdXRob3JpemVcIj09PXUuYWN0aW9uPygobz11KS5zb3VyY2U9XCJ1cmxcIixvJiZPYmplY3Qua2V5cyhvKS5sZW5ndGg+MCYmKHUuZGVzaXJlZEhhc2g/dC5oYXNoPXUuZGVzaXJlZEhhc2g6cj9yLnJlcGxhY2VTdGF0ZShyLnN0YXRlLFwiXCIsdC5wYXRobmFtZSt0LnNlYXJjaCk6dC5oYXNoPVwiXCIpKTooKG89SlNPTi5wYXJzZShlLmdldEl0ZW0oaXMpfHxcInt9XCIpKS5zb3VyY2U9XCJsb2NhbHN0b3JhZ2VcIixkZWxldGUgby51c2VySW50ZW50KSwhKCFvLnRva2VufHx0aGlzLmluc3RhbmNlLmNvbmZpZy50b2tlbiE9PW8udG9rZW4pJiYodGhpcy5sb2FkVG9vbGJhcihvKSwhMCl9Y2F0Y2godCl7cmV0dXJuITF9fWppKHQpe3ZhciBpPWMucGhfbG9hZF90b29sYmFyfHxjLnBoX2xvYWRfZWRpdG9yOyFDKGkpJiZFKGkpP2kodCx0aGlzLmluc3RhbmNlKTplcy53YXJuKFwiTm8gdG9vbGJhciBsb2FkIGZ1bmN0aW9uIGZvdW5kXCIpfWxvYWRUb29sYmFyKHQpe3ZhciBlPSEobnVsbD09YXx8IWEuZ2V0RWxlbWVudEJ5SWQoVXQpKTtpZighaXx8ZSlyZXR1cm4hMTt2YXIgcj1cImN1c3RvbVwiPT09dGhpcy5pbnN0YW5jZS5yZXF1ZXN0Um91dGVyLnJlZ2lvbiYmdGhpcy5pbnN0YW5jZS5jb25maWcuYWR2YW5jZWRfZGlzYWJsZV90b29sYmFyX21ldHJpY3Mscz1CKHt0b2tlbjp0aGlzLmluc3RhbmNlLmNvbmZpZy50b2tlbn0sdCx7YXBpVVJMOnRoaXMuaW5zdGFuY2UucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcInVpXCIpfSxyP3tpbnN0cnVtZW50OiExfTp7fSk7aWYoaS5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShpcyxKU09OLnN0cmluZ2lmeShCKHt9LHMse3NvdXJjZTp2b2lkIDB9KSkpLHRoaXMuRGkoKT09PVpyLkxPQURFRCl0aGlzLmppKHMpO2Vsc2UgaWYodGhpcy5EaSgpPT09WnIuVU5JTklUSUFMSVpFRCl7dmFyIG47dGhpcy5BaShaci5MT0FESU5HKSxudWxsPT0obj1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PW4ubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8bi5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuaW5zdGFuY2UsXCJ0b29sYmFyXCIsKHQ9PntpZih0KXJldHVybiBlcy5lcnJvcihcIltUb29sYmFyXSBGYWlsZWQgdG8gbG9hZFwiLHQpLHZvaWQgdGhpcy5BaShaci5VTklOSVRJQUxJWkVEKTt0aGlzLkFpKFpyLkxPQURFRCksdGhpcy5qaShzKX0pKSxzdChpLFwidHVyYm9saW5rczpsb2FkXCIsKCgpPT57dGhpcy5BaShaci5VTklOSVRJQUxJWkVEKSx0aGlzLmxvYWRUb29sYmFyKHMpfSkpfXJldHVybiEwfUxpKHQpe3JldHVybiB0aGlzLmxvYWRUb29sYmFyKHQpfW1heWJlTG9hZEVkaXRvcih0LGksZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXZvaWQgMCksdm9pZCAwPT09aSYmKGk9dm9pZCAwKSx2b2lkIDA9PT1lJiYoZT12b2lkIDApLHRoaXMubWF5YmVMb2FkVG9vbGJhcih0LGksZSl9fXZhciBzcz16KFwiW1RyYWNpbmdIZWFkZXJzXVwiKTtjbGFzcyBuc3tjb25zdHJ1Y3Rvcih0KXt0aGlzLk5pPXZvaWQgMCx0aGlzLnppPXZvaWQgMCx0aGlzLks9KCk9Pnt2YXIgdCxpLGUscjtSKHRoaXMuTmkpJiYobnVsbD09KHQ9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT0oaT10LnRyYWNpbmdIZWFkZXJzUGF0Y2hGbnMpfHxpLl9wYXRjaFhIUih0aGlzLk4uc2Vzc2lvbk1hbmFnZXIpKTtSKHRoaXMuemkpJiYobnVsbD09KGU9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT0ocj1lLnRyYWNpbmdIZWFkZXJzUGF0Y2hGbnMpfHxyLl9wYXRjaEZldGNoKHRoaXMuTi5zZXNzaW9uTWFuYWdlcikpfSx0aGlzLk49dH1KKHQpe3ZhciBpLGU7bnVsbCE9KGk9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pJiZpLnRyYWNpbmdIZWFkZXJzUGF0Y2hGbnMmJnQoKSxudWxsPT0oZT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PWUubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuTixcInRyYWNpbmctaGVhZGVyc1wiLChpPT57aWYoaSlyZXR1cm4gc3MuZXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBzY3JpcHRcIixpKTt0KCl9KSl9c3RhcnRJZkVuYWJsZWRPclN0b3AoKXt2YXIgdCxpO3RoaXMuTi5jb25maWcuX19hZGRfdHJhY2luZ19oZWFkZXJzP3RoaXMuSih0aGlzLkspOihudWxsPT0odD10aGlzLk5pKXx8dC5jYWxsKHRoaXMpLG51bGw9PShpPXRoaXMuemkpfHxpLmNhbGwodGhpcyksdGhpcy5OaT12b2lkIDAsdGhpcy56aT12b2lkIDApfX12YXIgb3M9eihcIltXZWIgVml0YWxzXVwiKSxhcz05ZTU7Y2xhc3MgbHN7Y29uc3RydWN0b3IodCl7dmFyIGk7dGhpcy5VaT0hMSx0aGlzLmk9ITEsdGhpcy5NPXt1cmw6dm9pZCAwLG1ldHJpY3M6W10sZmlyc3RNZXRyaWNUaW1lc3RhbXA6dm9pZCAwfSx0aGlzLnFpPSgpPT57Y2xlYXJUaW1lb3V0KHRoaXMuQmkpLDAhPT10aGlzLk0ubWV0cmljcy5sZW5ndGgmJih0aGlzLk4uY2FwdHVyZShcIiR3ZWJfdml0YWxzXCIsdGhpcy5NLm1ldHJpY3MucmVkdWNlKCgodCxpKT0+Qih7fSx0LHtbXCIkd2ViX3ZpdGFsc19cIitpLm5hbWUrXCJfZXZlbnRcIl06Qih7fSxpKSxbXCIkd2ViX3ZpdGFsc19cIitpLm5hbWUrXCJfdmFsdWVcIl06aS52YWx1ZX0pKSx7fSkpLHRoaXMuTT17dXJsOnZvaWQgMCxtZXRyaWNzOltdLGZpcnN0TWV0cmljVGltZXN0YW1wOnZvaWQgMH0pfSx0aGlzLkhpPXQ9Pnt2YXIgaSxlPW51bGw9PShpPXRoaXMuTi5zZXNzaW9uTWFuYWdlcik/dm9pZCAwOmkuY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQoITApO2lmKFIoZSkpb3MuZXJyb3IoXCJDb3VsZCBub3QgcmVhZCBzZXNzaW9uIElELiBEcm9wcGluZyBtZXRyaWNzIVwiKTtlbHNle3RoaXMuTT10aGlzLk18fHt1cmw6dm9pZCAwLG1ldHJpY3M6W10sZmlyc3RNZXRyaWNUaW1lc3RhbXA6dm9pZCAwfTt2YXIgcj10aGlzLldpKCk7aWYoIVIocikpaWYoQyhudWxsPT10P3ZvaWQgMDp0Lm5hbWUpfHxDKG51bGw9PXQ/dm9pZCAwOnQudmFsdWUpKW9zLmVycm9yKFwiSW52YWxpZCBtZXRyaWMgcmVjZWl2ZWRcIix0KTtlbHNlIGlmKHRoaXMuR2kmJnQudmFsdWU+PXRoaXMuR2kpb3MuZXJyb3IoXCJJZ25vcmluZyBtZXRyaWMgd2l0aCB2YWx1ZSA+PSBcIit0aGlzLkdpLHQpO2Vsc2UgdGhpcy5NLnVybCE9PXImJih0aGlzLnFpKCksdGhpcy5CaT1zZXRUaW1lb3V0KHRoaXMucWksdGhpcy5mbHVzaFRvQ2FwdHVyZVRpbWVvdXRNcykpLFIodGhpcy5NLnVybCkmJih0aGlzLk0udXJsPXIpLHRoaXMuTS5maXJzdE1ldHJpY1RpbWVzdGFtcD1SKHRoaXMuTS5maXJzdE1ldHJpY1RpbWVzdGFtcCk/RGF0ZS5ub3coKTp0aGlzLk0uZmlyc3RNZXRyaWNUaW1lc3RhbXAsdC5hdHRyaWJ1dGlvbiYmdC5hdHRyaWJ1dGlvbi5pbnRlcmFjdGlvblRhcmdldEVsZW1lbnQmJih0LmF0dHJpYnV0aW9uLmludGVyYWN0aW9uVGFyZ2V0RWxlbWVudD12b2lkIDApLHRoaXMuTS5tZXRyaWNzLnB1c2goQih7fSx0LHskY3VycmVudF91cmw6ciwkc2Vzc2lvbl9pZDplLnNlc3Npb25JZCwkd2luZG93X2lkOmUud2luZG93SWQsdGltZXN0YW1wOkRhdGUubm93KCl9KSksdGhpcy5NLm1ldHJpY3MubGVuZ3RoPT09dGhpcy5hbGxvd2VkTWV0cmljcy5sZW5ndGgmJnRoaXMucWkoKX19LHRoaXMuSz0oKT0+e3ZhciB0LGksZSxyLHM9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX187UihzKXx8UihzLnBvc3RIb2dXZWJWaXRhbHNDYWxsYmFja3MpfHwoe29uTENQOnQsb25DTFM6aSxvbkZDUDplLG9uSU5QOnJ9PXMucG9zdEhvZ1dlYlZpdGFsc0NhbGxiYWNrcyksdCYmaSYmZSYmcj8odGhpcy5hbGxvd2VkTWV0cmljcy5pbmRleE9mKFwiTENQXCIpPi0xJiZ0KHRoaXMuSGkuYmluZCh0aGlzKSksdGhpcy5hbGxvd2VkTWV0cmljcy5pbmRleE9mKFwiQ0xTXCIpPi0xJiZpKHRoaXMuSGkuYmluZCh0aGlzKSksdGhpcy5hbGxvd2VkTWV0cmljcy5pbmRleE9mKFwiRkNQXCIpPi0xJiZlKHRoaXMuSGkuYmluZCh0aGlzKSksdGhpcy5hbGxvd2VkTWV0cmljcy5pbmRleE9mKFwiSU5QXCIpPi0xJiZyKHRoaXMuSGkuYmluZCh0aGlzKSksdGhpcy5pPSEwKTpvcy5lcnJvcihcIndlYiB2aXRhbHMgY2FsbGJhY2tzIG5vdCBsb2FkZWQgLSBub3Qgc3RhcnRpbmdcIil9LHRoaXMuTj10LHRoaXMuVWk9IShudWxsPT0oaT10aGlzLk4ucGVyc2lzdGVuY2UpfHwhaS5wcm9wc1tkdF0pLHRoaXMuc3RhcnRJZkVuYWJsZWQoKX1nZXQgYWxsb3dlZE1ldHJpY3MoKXt2YXIgdCxpLGU9SSh0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpP251bGw9PSh0PXRoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSk/dm9pZCAwOnQud2ViX3ZpdGFsc19hbGxvd2VkX21ldHJpY3M6dm9pZCAwO3JldHVybiBSKGUpPyhudWxsPT0oaT10aGlzLk4ucGVyc2lzdGVuY2UpP3ZvaWQgMDppLnByb3BzW2N0XSl8fFtcIkNMU1wiLFwiRkNQXCIsXCJJTlBcIixcIkxDUFwiXTplfWdldCBmbHVzaFRvQ2FwdHVyZVRpbWVvdXRNcygpe3JldHVybihJKHRoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSk/dGhpcy5OLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlLndlYl92aXRhbHNfZGVsYXllZF9mbHVzaF9tczp2b2lkIDApfHw1ZTN9Z2V0IEdpKCl7dmFyIHQ9SSh0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpJiZGKHRoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZS5fX3dlYl92aXRhbHNfbWF4X3ZhbHVlKT90aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UuX193ZWJfdml0YWxzX21heF92YWx1ZTphcztyZXR1cm4gMDx0JiZ0PD02ZTQ/YXM6dH1nZXQgaXNFbmFibGVkKCl7dmFyIHQ9bnVsbD09bD92b2lkIDA6bC5wcm90b2NvbDtpZihcImh0dHA6XCIhPT10JiZcImh0dHBzOlwiIT09dClyZXR1cm4gb3MuaW5mbyhcIldlYiBWaXRhbHMgYXJlIGRpc2FibGVkIG9uIG5vbi1odHRwL2h0dHBzIHByb3RvY29sc1wiKSwhMTt2YXIgaT1JKHRoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZSk/dGhpcy5OLmNvbmZpZy5jYXB0dXJlX3BlcmZvcm1hbmNlLndlYl92aXRhbHM6QSh0aGlzLk4uY29uZmlnLmNhcHR1cmVfcGVyZm9ybWFuY2UpP3RoaXMuTi5jb25maWcuY2FwdHVyZV9wZXJmb3JtYW5jZTp2b2lkIDA7cmV0dXJuIEEoaSk/aTp0aGlzLlVpfXN0YXJ0SWZFbmFibGVkKCl7dGhpcy5pc0VuYWJsZWQmJiF0aGlzLmkmJihvcy5pbmZvKFwiZW5hYmxlZCwgc3RhcnRpbmcuLi5cIiksdGhpcy5KKHRoaXMuSykpfW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpPUkodC5jYXB0dXJlUGVyZm9ybWFuY2UpJiYhIXQuY2FwdHVyZVBlcmZvcm1hbmNlLndlYl92aXRhbHMsZT1JKHQuY2FwdHVyZVBlcmZvcm1hbmNlKT90LmNhcHR1cmVQZXJmb3JtYW5jZS53ZWJfdml0YWxzX2FsbG93ZWRfbWV0cmljczp2b2lkIDA7dGhpcy5OLnBlcnNpc3RlbmNlJiYodGhpcy5OLnBlcnNpc3RlbmNlLnJlZ2lzdGVyKHtbZHRdOml9KSx0aGlzLk4ucGVyc2lzdGVuY2UucmVnaXN0ZXIoe1tjdF06ZX0pKSx0aGlzLlVpPWksdGhpcy5zdGFydElmRW5hYmxlZCgpfUoodCl7dmFyIGksZTtudWxsIT0oaT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJmkucG9zdEhvZ1dlYlZpdGFsc0NhbGxiYWNrcyYmdCgpLG51bGw9PShlPWMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fKXx8bnVsbD09ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5fHxlLmxvYWRFeHRlcm5hbERlcGVuZGVuY3kodGhpcy5OLFwid2ViLXZpdGFsc1wiLChpPT57aT9vcy5lcnJvcihcImZhaWxlZCB0byBsb2FkIHNjcmlwdFwiLGkpOnQoKX0pKX1XaSgpe3ZhciB0PWk/aS5sb2NhdGlvbi5ocmVmOnZvaWQgMDtyZXR1cm4gdHx8b3MuZXJyb3IoXCJDb3VsZCBub3QgZGV0ZXJtaW5lIGN1cnJlbnQgVVJMXCIpLHR9fXZhciB1cz16KFwiW0hlYXRtYXBzXVwiKTtmdW5jdGlvbiBocyh0KXtyZXR1cm4gSSh0KSYmXCJjbGllbnRYXCJpbiB0JiZcImNsaWVudFlcImluIHQmJkYodC5jbGllbnRYKSYmRih0LmNsaWVudFkpfWNsYXNzIGRze2NvbnN0cnVjdG9yKHQpe3ZhciBpO3RoaXMucmFnZWNsaWNrcz1uZXcgbWksdGhpcy5VaT0hMSx0aGlzLmk9ITEsdGhpcy5KaT1udWxsLHRoaXMuaW5zdGFuY2U9dCx0aGlzLlVpPSEobnVsbD09KGk9dGhpcy5pbnN0YW5jZS5wZXJzaXN0ZW5jZSl8fCFpLnByb3BzW3V0XSl9Z2V0IGZsdXNoSW50ZXJ2YWxNaWxsaXNlY29uZHMoKXt2YXIgdD01ZTM7cmV0dXJuIEkodGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9oZWF0bWFwcykmJnRoaXMuaW5zdGFuY2UuY29uZmlnLmNhcHR1cmVfaGVhdG1hcHMuZmx1c2hfaW50ZXJ2YWxfbWlsbGlzZWNvbmRzJiYodD10aGlzLmluc3RhbmNlLmNvbmZpZy5jYXB0dXJlX2hlYXRtYXBzLmZsdXNoX2ludGVydmFsX21pbGxpc2Vjb25kcyksdH1nZXQgaXNFbmFibGVkKCl7cmV0dXJuIFIodGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9oZWF0bWFwcyk/Uih0aGlzLmluc3RhbmNlLmNvbmZpZy5lbmFibGVfaGVhdG1hcHMpP3RoaXMuVWk6dGhpcy5pbnN0YW5jZS5jb25maWcuZW5hYmxlX2hlYXRtYXBzOiExIT09dGhpcy5pbnN0YW5jZS5jb25maWcuY2FwdHVyZV9oZWF0bWFwc31zdGFydElmRW5hYmxlZCgpe2lmKHRoaXMuaXNFbmFibGVkKXtpZih0aGlzLmkpcmV0dXJuO3VzLmluZm8oXCJzdGFydGluZy4uLlwiKSx0aGlzLlZpKCksdGhpcy5KaT1zZXRJbnRlcnZhbCh0aGlzLktpLmJpbmQodGhpcyksdGhpcy5mbHVzaEludGVydmFsTWlsbGlzZWNvbmRzKX1lbHNle3ZhciB0LGk7Y2xlYXJJbnRlcnZhbChudWxsIT09KHQ9dGhpcy5KaSkmJnZvaWQgMCE9PXQ/dDp2b2lkIDApLG51bGw9PShpPXRoaXMuWWkpfHxpLnN0b3AoKSx0aGlzLmdldEFuZENsZWFyQnVmZmVyKCl9fW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpPSEhdC5oZWF0bWFwczt0aGlzLmluc3RhbmNlLnBlcnNpc3RlbmNlJiZ0aGlzLmluc3RhbmNlLnBlcnNpc3RlbmNlLnJlZ2lzdGVyKHtbdXRdOml9KSx0aGlzLlVpPWksdGhpcy5zdGFydElmRW5hYmxlZCgpfWdldEFuZENsZWFyQnVmZmVyKCl7dmFyIHQ9dGhpcy5NO3JldHVybiB0aGlzLk09dm9pZCAwLHR9WGkodCl7dGhpcy5RaSh0Lm9yaWdpbmFsRXZlbnQsXCJkZWFkY2xpY2tcIil9VmkoKXtpJiZhJiYoc3QoaSxcImJlZm9yZXVubG9hZFwiLHRoaXMuS2kuYmluZCh0aGlzKSksc3QoYSxcImNsaWNrXCIsKHQ9PnRoaXMuUWkodHx8KG51bGw9PWk/dm9pZCAwOmkuZXZlbnQpKSkse2NhcHR1cmU6ITB9KSxzdChhLFwibW91c2Vtb3ZlXCIsKHQ9PnRoaXMuWmkodHx8KG51bGw9PWk/dm9pZCAwOmkuZXZlbnQpKSkse2NhcHR1cmU6ITB9KSx0aGlzLllpPW5ldyByZSh0aGlzLmluc3RhbmNlLGllLHRoaXMuWGkuYmluZCh0aGlzKSksdGhpcy5ZaS5zdGFydElmRW5hYmxlZCgpLHRoaXMuaT0hMCl9dGUodCxlKXt2YXIgcj10aGlzLmluc3RhbmNlLnNjcm9sbE1hbmFnZXIuc2Nyb2xsWSgpLHM9dGhpcy5pbnN0YW5jZS5zY3JvbGxNYW5hZ2VyLnNjcm9sbFgoKSxuPXRoaXMuaW5zdGFuY2Uuc2Nyb2xsTWFuYWdlci5zY3JvbGxFbGVtZW50KCksbz1mdW5jdGlvbih0LGUscil7Zm9yKHZhciBzPXQ7cyYmV3QocykmJiFHdChzLFwiYm9keVwiKTspe2lmKHM9PT1yKXJldHVybiExO2lmKG0oZSxudWxsPT1pP3ZvaWQgMDppLmdldENvbXB1dGVkU3R5bGUocykucG9zaXRpb24pKXJldHVybiEwO3M9ZWkocyl9cmV0dXJuITF9KHRpKHQpLFtcImZpeGVkXCIsXCJzdGlja3lcIl0sbik7cmV0dXJue3g6dC5jbGllbnRYKyhvPzA6cykseTp0LmNsaWVudFkrKG8/MDpyKSx0YXJnZXRfZml4ZWQ6byx0eXBlOmV9fVFpKHQsaSl7dmFyIGU7aWYodm9pZCAwPT09aSYmKGk9XCJjbGlja1wiKSwhSHQodC50YXJnZXQpJiZocyh0KSl7dmFyIHI9dGhpcy50ZSh0LGkpO251bGwhPShlPXRoaXMucmFnZWNsaWNrcykmJmUuaXNSYWdlQ2xpY2sodC5jbGllbnRYLHQuY2xpZW50WSwobmV3IERhdGUpLmdldFRpbWUoKSkmJnRoaXMuaWUoQih7fSxyLHt0eXBlOlwicmFnZWNsaWNrXCJ9KSksdGhpcy5pZShyKX19WmkodCl7IUh0KHQudGFyZ2V0KSYmaHModCkmJihjbGVhclRpbWVvdXQodGhpcy5lZSksdGhpcy5lZT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuaWUodGhpcy50ZSh0LFwibW91c2Vtb3ZlXCIpKX0pLDUwMCkpfWllKHQpe2lmKGkpe3ZhciBlPWkubG9jYXRpb24uaHJlZjt0aGlzLk09dGhpcy5NfHx7fSx0aGlzLk1bZV18fCh0aGlzLk1bZV09W10pLHRoaXMuTVtlXS5wdXNoKHQpfX1LaSgpe3RoaXMuTSYmIVAodGhpcy5NKSYmdGhpcy5pbnN0YW5jZS5jYXB0dXJlKFwiJCRoZWF0bWFwXCIseyRoZWF0bWFwX2RhdGE6dGhpcy5nZXRBbmRDbGVhckJ1ZmZlcigpfSl9fWNsYXNzIHZze2NvbnN0cnVjdG9yKHQpe3RoaXMuTj10fWRvUGFnZVZpZXcodCxlKXt2YXIgcixzPXRoaXMucmUodCxlKTtyZXR1cm4gdGhpcy5zZT17cGF0aG5hbWU6bnVsbCE9PShyPW51bGw9PWk/dm9pZCAwOmkubG9jYXRpb24ucGF0aG5hbWUpJiZ2b2lkIDAhPT1yP3I6XCJcIixwYWdlVmlld0lkOmUsdGltZXN0YW1wOnR9LHRoaXMuTi5zY3JvbGxNYW5hZ2VyLnJlc2V0Q29udGV4dCgpLHN9ZG9QYWdlTGVhdmUodCl7dmFyIGk7cmV0dXJuIHRoaXMucmUodCxudWxsPT0oaT10aGlzLnNlKT92b2lkIDA6aS5wYWdlVmlld0lkKX1kb0V2ZW50KCl7dmFyIHQ7cmV0dXJueyRwYWdldmlld19pZDpudWxsPT0odD10aGlzLnNlKT92b2lkIDA6dC5wYWdlVmlld0lkfX1yZSh0LGkpe3ZhciBlPXRoaXMuc2U7aWYoIWUpcmV0dXJueyRwYWdldmlld19pZDppfTt2YXIgcj17JHBhZ2V2aWV3X2lkOmksJHByZXZfcGFnZXZpZXdfaWQ6ZS5wYWdlVmlld0lkfSxzPXRoaXMuTi5zY3JvbGxNYW5hZ2VyLmdldENvbnRleHQoKTtpZihzJiYhdGhpcy5OLmNvbmZpZy5kaXNhYmxlX3Njcm9sbF9wcm9wZXJ0aWVzKXt2YXJ7bWF4U2Nyb2xsSGVpZ2h0Om4sbGFzdFNjcm9sbFk6byxtYXhTY3JvbGxZOmEsbWF4Q29udGVudEhlaWdodDpsLGxhc3RDb250ZW50WTp1LG1heENvbnRlbnRZOmh9PXM7aWYoIShSKG4pfHxSKG8pfHxSKGEpfHxSKGwpfHxSKHUpfHxSKGgpKSl7bj1NYXRoLmNlaWwobiksbz1NYXRoLmNlaWwobyksYT1NYXRoLmNlaWwoYSksbD1NYXRoLmNlaWwobCksdT1NYXRoLmNlaWwodSksaD1NYXRoLmNlaWwoaCk7dmFyIGQ9bjw9MT8xOlhlKG8vbiwwLDEpLHY9bjw9MT8xOlhlKGEvbiwwLDEpLGM9bDw9MT8xOlhlKHUvbCwwLDEpLGY9bDw9MT8xOlhlKGgvbCwwLDEpO3I9VihyLHskcHJldl9wYWdldmlld19sYXN0X3Njcm9sbDpvLCRwcmV2X3BhZ2V2aWV3X2xhc3Rfc2Nyb2xsX3BlcmNlbnRhZ2U6ZCwkcHJldl9wYWdldmlld19tYXhfc2Nyb2xsOmEsJHByZXZfcGFnZXZpZXdfbWF4X3Njcm9sbF9wZXJjZW50YWdlOnYsJHByZXZfcGFnZXZpZXdfbGFzdF9jb250ZW50OnUsJHByZXZfcGFnZXZpZXdfbGFzdF9jb250ZW50X3BlcmNlbnRhZ2U6YywkcHJldl9wYWdldmlld19tYXhfY29udGVudDpoLCRwcmV2X3BhZ2V2aWV3X21heF9jb250ZW50X3BlcmNlbnRhZ2U6Zn0pfX1yZXR1cm4gZS5wYXRobmFtZSYmKHIuJHByZXZfcGFnZXZpZXdfcGF0aG5hbWU9ZS5wYXRobmFtZSksZS50aW1lc3RhbXAmJihyLiRwcmV2X3BhZ2V2aWV3X2R1cmF0aW9uPSh0LmdldFRpbWUoKS1lLnRpbWVzdGFtcC5nZXRUaW1lKCkpLzFlMykscn19Y2xhc3MgY3N7Y29uc3RydWN0b3IodCl7dGhpcy5OPXR9c2VuZEV4Y2VwdGlvbkV2ZW50KHQpe3RoaXMuTi5jYXB0dXJlKFwiJGV4Y2VwdGlvblwiLHQse19ub1RydW5jYXRlOiEwLF9iYXRjaEtleTpcImV4Y2VwdGlvbkV2ZW50XCJ9KX19dmFyIGZzPVwiTW9iaWxlXCIscHM9XCJpT1NcIixncz1cIkFuZHJvaWRcIixfcz1cIlRhYmxldFwiLG1zPWdzK1wiIFwiK19zLGJzPVwiaVBhZFwiLHdzPVwiQXBwbGVcIix5cz13cytcIiBXYXRjaFwiLFNzPVwiU2FmYXJpXCIsJHM9XCJCbGFja0JlcnJ5XCIsa3M9XCJTYW1zdW5nXCIseHM9a3MrXCJCcm93c2VyXCIsRXM9a3MrXCIgSW50ZXJuZXRcIixJcz1cIkNocm9tZVwiLFBzPUlzK1wiIE9TXCIsUnM9SXMrXCIgXCIrcHMsVHM9XCJJbnRlcm5ldCBFeHBsb3JlclwiLE1zPVRzK1wiIFwiK2ZzLE9zPVwiT3BlcmFcIixDcz1PcytcIiBNaW5pXCIsRnM9XCJFZGdlXCIsQXM9XCJNaWNyb3NvZnQgXCIrRnMsRHM9XCJGaXJlZm94XCIsanM9RHMrXCIgXCIrcHMsTHM9XCJOaW50ZW5kb1wiLE5zPVwiUGxheVN0YXRpb25cIix6cz1cIlhib3hcIixVcz1ncytcIiBcIitmcyxxcz1mcytcIiBcIitTcyxCcz1cIldpbmRvd3NcIixIcz1CcytcIiBQaG9uZVwiLFdzPVwiTm9raWFcIixHcz1cIk91eWFcIixKcz1cIkdlbmVyaWNcIixWcz1KcytcIiBcIitmcy50b0xvd2VyQ2FzZSgpLEtzPUpzK1wiIFwiK19zLnRvTG93ZXJDYXNlKCksWXM9XCJLb25xdWVyb3JcIixYcz1cIihcXFxcZCsoXFxcXC5cXFxcZCspPylcIixRcz1uZXcgUmVnRXhwKFwiVmVyc2lvbi9cIitYcyksWnM9bmV3IFJlZ0V4cCh6cyxcImlcIiksdG49bmV3IFJlZ0V4cChOcytcIiBcXFxcdytcIixcImlcIiksZW49bmV3IFJlZ0V4cChMcytcIiBcXFxcdytcIixcImlcIikscm49bmV3IFJlZ0V4cCgkcytcInxQbGF5Qm9va3xCQjEwXCIsXCJpXCIpLHNuPXtcIk5UMy41MVwiOlwiTlQgMy4xMVwiLFwiTlQ0LjBcIjpcIk5UIDQuMFwiLFwiNS4wXCI6XCIyMDAwXCIsNS4xOlwiWFBcIiw1LjI6XCJYUFwiLFwiNi4wXCI6XCJWaXN0YVwiLDYuMTpcIjdcIiw2LjI6XCI4XCIsNi4zOlwiOC4xXCIsNi40OlwiMTBcIixcIjEwLjBcIjpcIjEwXCJ9O3ZhciBubj0odCxpKT0+aSYmbShpLHdzKXx8ZnVuY3Rpb24odCl7cmV0dXJuIG0odCxTcykmJiFtKHQsSXMpJiYhbSh0LGdzKX0odCksb249ZnVuY3Rpb24odCxpKXtyZXR1cm4gaT1pfHxcIlwiLG0odCxcIiBPUFIvXCIpJiZtKHQsXCJNaW5pXCIpP0NzOm0odCxcIiBPUFIvXCIpP09zOnJuLnRlc3QodCk/JHM6bSh0LFwiSUVcIitmcyl8fG0odCxcIldQRGVza3RvcFwiKT9NczptKHQseHMpP0VzOm0odCxGcyl8fG0odCxcIkVkZy9cIik/QXM6bSh0LFwiRkJJT1NcIik/XCJGYWNlYm9vayBcIitmczptKHQsXCJVQ1dFQlwiKXx8bSh0LFwiVUNCcm93c2VyXCIpP1wiVUMgQnJvd3NlclwiOm0odCxcIkNyaU9TXCIpP1JzOm0odCxcIkNyTW9cIil8fG0odCxJcyk/SXM6bSh0LGdzKSYmbSh0LFNzKT9VczptKHQsXCJGeGlPU1wiKT9qczptKHQudG9Mb3dlckNhc2UoKSxZcy50b0xvd2VyQ2FzZSgpKT9Zczpubih0LGkpP20odCxmcyk/cXM6U3M6bSh0LERzKT9EczptKHQsXCJNU0lFXCIpfHxtKHQsXCJUcmlkZW50L1wiKT9UczptKHQsXCJHZWNrb1wiKT9EczpcIlwifSxhbj17W01zXTpbbmV3IFJlZ0V4cChcInJ2OlwiK1hzKV0sW0FzXTpbbmV3IFJlZ0V4cChGcytcIj9cXFxcL1wiK1hzKV0sW0lzXTpbbmV3IFJlZ0V4cChcIihcIitJcytcInxDck1vKVxcXFwvXCIrWHMpXSxbUnNdOltuZXcgUmVnRXhwKFwiQ3JpT1NcXFxcL1wiK1hzKV0sXCJVQyBCcm93c2VyXCI6W25ldyBSZWdFeHAoXCIoVUNCcm93c2VyfFVDV0VCKVxcXFwvXCIrWHMpXSxbU3NdOltRc10sW3FzXTpbUXNdLFtPc106W25ldyBSZWdFeHAoXCIoT3BlcmF8T1BSKVxcXFwvXCIrWHMpXSxbRHNdOltuZXcgUmVnRXhwKERzK1wiXFxcXC9cIitYcyldLFtqc106W25ldyBSZWdFeHAoXCJGeGlPU1xcXFwvXCIrWHMpXSxbWXNdOltuZXcgUmVnRXhwKFwiS29ucXVlcm9yWzovXT9cIitYcyxcImlcIildLFskc106W25ldyBSZWdFeHAoJHMrXCIgXCIrWHMpLFFzXSxbVXNdOltuZXcgUmVnRXhwKFwiYW5kcm9pZFxcXFxzXCIrWHMsXCJpXCIpXSxbRXNdOltuZXcgUmVnRXhwKHhzK1wiXFxcXC9cIitYcyldLFtUc106W25ldyBSZWdFeHAoXCIocnY6fE1TSUUgKVwiK1hzKV0sTW96aWxsYTpbbmV3IFJlZ0V4cChcInJ2OlwiK1hzKV19LGxuPWZ1bmN0aW9uKHQsaSl7dmFyIGU9b24odCxpKSxyPWFuW2VdO2lmKFIocikpcmV0dXJuIG51bGw7Zm9yKHZhciBzPTA7czxyLmxlbmd0aDtzKyspe3ZhciBuPXJbc10sbz10Lm1hdGNoKG4pO2lmKG8pcmV0dXJuIHBhcnNlRmxvYXQob1tvLmxlbmd0aC0yXSl9cmV0dXJuIG51bGx9LHVuPVtbbmV3IFJlZ0V4cCh6cytcIjsgXCIrenMrXCIgKC4qPylbKTtdXCIsXCJpXCIpLHQ9Plt6cyx0JiZ0WzFdfHxcIlwiXV0sW25ldyBSZWdFeHAoTHMsXCJpXCIpLFtMcyxcIlwiXV0sW25ldyBSZWdFeHAoTnMsXCJpXCIpLFtOcyxcIlwiXV0sW3JuLFskcyxcIlwiXV0sW25ldyBSZWdFeHAoQnMsXCJpXCIpLCh0LGkpPT57aWYoL1Bob25lLy50ZXN0KGkpfHwvV1BEZXNrdG9wLy50ZXN0KGkpKXJldHVybltIcyxcIlwiXTtpZihuZXcgUmVnRXhwKGZzKS50ZXN0KGkpJiYhL0lFTW9iaWxlXFxiLy50ZXN0KGkpKXJldHVybltCcytcIiBcIitmcyxcIlwiXTt2YXIgZT0vV2luZG93cyBOVCAoWzAtOS5dKykvaS5leGVjKGkpO2lmKGUmJmVbMV0pe3ZhciByPWVbMV0scz1zbltyXXx8XCJcIjtyZXR1cm4vYXJtL2kudGVzdChpKSYmKHM9XCJSVFwiKSxbQnMsc119cmV0dXJuW0JzLFwiXCJdfV0sWy8oKGlQaG9uZXxpUGFkfGlQb2QpLio/T1MgKFxcZCspXyhcXGQrKV8/KFxcZCspP3xpUGhvbmUpLyx0PT57aWYodCYmdFszXSl7dmFyIGk9W3RbM10sdFs0XSx0WzVdfHxcIjBcIl07cmV0dXJuW3BzLGkuam9pbihcIi5cIildfXJldHVybltwcyxcIlwiXX1dLFsvKHdhdGNoLipcXC8oXFxkK1xcLlxcZCtcXC5cXGQrKXx3YXRjaCBvcywoXFxkK1xcLlxcZCspLCkvaSx0PT57dmFyIGk9XCJcIjtyZXR1cm4gdCYmdC5sZW5ndGg+PTMmJihpPVIodFsyXSk/dFszXTp0WzJdKSxbXCJ3YXRjaE9TXCIsaV19XSxbbmV3IFJlZ0V4cChcIihcIitncytcIiAoXFxcXGQrKVxcXFwuKFxcXFxkKylcXFxcLj8oXFxcXGQrKT98XCIrZ3MrXCIpXCIsXCJpXCIpLHQ9PntpZih0JiZ0WzJdKXt2YXIgaT1bdFsyXSx0WzNdLHRbNF18fFwiMFwiXTtyZXR1cm5bZ3MsaS5qb2luKFwiLlwiKV19cmV0dXJuW2dzLFwiXCJdfV0sWy9NYWMgT1MgWCAoXFxkKylbXy5dKFxcZCspW18uXT8oXFxkKyk/L2ksdD0+e3ZhciBpPVtcIk1hYyBPUyBYXCIsXCJcIl07aWYodCYmdFsxXSl7dmFyIGU9W3RbMV0sdFsyXSx0WzNdfHxcIjBcIl07aVsxXT1lLmpvaW4oXCIuXCIpfXJldHVybiBpfV0sWy9NYWMvaSxbXCJNYWMgT1MgWFwiLFwiXCJdXSxbL0NyT1MvLFtQcyxcIlwiXV0sWy9MaW51eHxkZWJpYW4vaSxbXCJMaW51eFwiLFwiXCJdXV0saG49ZnVuY3Rpb24odCl7cmV0dXJuIGVuLnRlc3QodCk/THM6dG4udGVzdCh0KT9Oczpacy50ZXN0KHQpP3pzOm5ldyBSZWdFeHAoR3MsXCJpXCIpLnRlc3QodCk/R3M6bmV3IFJlZ0V4cChcIihcIitIcytcInxXUERlc2t0b3ApXCIsXCJpXCIpLnRlc3QodCk/SHM6L2lQYWQvLnRlc3QodCk/YnM6L2lQb2QvLnRlc3QodCk/XCJpUG9kIFRvdWNoXCI6L2lQaG9uZS8udGVzdCh0KT9cImlQaG9uZVwiOi8od2F0Y2gpKD86ID9vc1ssL118XFxkLFxcZFxcLylbXFxkLl0rL2kudGVzdCh0KT95czpybi50ZXN0KHQpPyRzOi8oa29ibylcXHMoZXJlYWRlcnx0b3VjaCkvaS50ZXN0KHQpP1wiS29ib1wiOm5ldyBSZWdFeHAoV3MsXCJpXCIpLnRlc3QodCk/V3M6LyhrZlthLXpdezJ9d2l8YWVvW2Mtcl17Mn0pKCBidWl8XFwpKS9pLnRlc3QodCl8fC8oa2ZbYS16XSspKCBidWl8XFwpKS4rc2lsa1xcLy9pLnRlc3QodCk/XCJLaW5kbGUgRmlyZVwiOi8oQW5kcm9pZHxaVEUpL2kudGVzdCh0KT8hbmV3IFJlZ0V4cChmcykudGVzdCh0KXx8Lyg5MTM4QnxUQjc4MkJ8TmV4dXMgWzk3XXxwaXhlbCBjfEhVQVdFSVNIVHxCVFZ8bm9ibGUgbm9va3xzbWFydCB1bHRyYSA2KS9pLnRlc3QodCk/L3BpeGVsW1xcZGF4bCBdezEsNn0vaS50ZXN0KHQpJiYhL3BpeGVsIGMvaS50ZXN0KHQpfHwvKGh1YXdlaW1lZC1hbDAwfHRhaC18QVBBfFNNLUc5MnxpOTgwfHp0ZXxVMzA0QUEpL2kudGVzdCh0KXx8L2xteTQ3di9pLnRlc3QodCkmJiEvUVRBUVozL2kudGVzdCh0KT9nczptczpnczpuZXcgUmVnRXhwKFwiKHBkYXxcIitmcytcIilcIixcImlcIikudGVzdCh0KT9WczpuZXcgUmVnRXhwKF9zLFwiaVwiKS50ZXN0KHQpJiYhbmV3IFJlZ0V4cChfcytcIiBwY1wiLFwiaVwiKS50ZXN0KHQpP0tzOlwiXCJ9LGRuPVwiaHR0cHM/Oi8vKC4qKVwiLHZuPVtcImdjbGlkXCIsXCJnY2xzcmNcIixcImRjbGlkXCIsXCJnYnJhaWRcIixcIndicmFpZFwiLFwiZmJjbGlkXCIsXCJtc2Nsa2lkXCIsXCJ0d2NsaWRcIixcImxpX2ZhdF9pZFwiLFwiaWdzaGlkXCIsXCJ0dGNsaWRcIixcInJkdF9jaWRcIixcImVwaWtcIixcInFjbGlkXCIsXCJzY2NpZFwiLFwiaXJjbGlkXCIsXCJfa3hcIl0sY249SyhbXCJ1dG1fc291cmNlXCIsXCJ1dG1fbWVkaXVtXCIsXCJ1dG1fY2FtcGFpZ25cIixcInV0bV9jb250ZW50XCIsXCJ1dG1fdGVybVwiLFwiZ2FkX3NvdXJjZVwiLFwibWNfY2lkXCJdLHZuKSxmbj1cIjxtYXNrZWQ+XCI7ZnVuY3Rpb24gcG4odCxpLGUpe2lmKCFhKXJldHVybnt9O3ZhciByPWk/SyhbXSx2bixlfHxbXSk6W107cmV0dXJuIGduKCRpKGEuVVJMLHIsZm4pLHQpfWZ1bmN0aW9uIGduKHQsaSl7dmFyIGU9Y24uY29uY2F0KGl8fFtdKSxyPXt9O3JldHVybiBKKGUsKGZ1bmN0aW9uKGkpe3ZhciBlPVNpKHQsaSk7cltpXT1lfHxudWxsfSkpLHJ9ZnVuY3Rpb24gX24odCl7dmFyIGk9ZnVuY3Rpb24odCl7cmV0dXJuIHQ/MD09PXQuc2VhcmNoKGRuK1wiZ29vZ2xlLihbXi8/XSopXCIpP1wiZ29vZ2xlXCI6MD09PXQuc2VhcmNoKGRuK1wiYmluZy5jb21cIik/XCJiaW5nXCI6MD09PXQuc2VhcmNoKGRuK1wieWFob28uY29tXCIpP1wieWFob29cIjowPT09dC5zZWFyY2goZG4rXCJkdWNrZHVja2dvLmNvbVwiKT9cImR1Y2tkdWNrZ29cIjpudWxsOm51bGx9KHQpLGU9XCJ5YWhvb1wiIT1pP1wicVwiOlwicFwiLHI9e307aWYoIU8oaSkpe3IuJHNlYXJjaF9lbmdpbmU9aTt2YXIgcz1hP1NpKGEucmVmZXJyZXIsZSk6XCJcIjtzLmxlbmd0aCYmKHIucGhfa2V5d29yZD1zKX1yZXR1cm4gcn1mdW5jdGlvbiBtbigpe3JldHVybiBuYXZpZ2F0b3IubGFuZ3VhZ2V8fG5hdmlnYXRvci51c2VyTGFuZ3VhZ2V9ZnVuY3Rpb24gYm4oKXtyZXR1cm4obnVsbD09YT92b2lkIDA6YS5yZWZlcnJlcil8fFwiJGRpcmVjdFwifWZ1bmN0aW9uIHduKHQsaSl7dmFyIGU9dD9LKFtdLHZuLGl8fFtdKTpbXSxyPW51bGw9PWw/dm9pZCAwOmwuaHJlZi5zdWJzdHJpbmcoMCwxZTMpO3JldHVybntyOmJuKCkuc3Vic3RyaW5nKDAsMWUzKSx1OnI/JGkocixlLGZuKTp2b2lkIDB9fWZ1bmN0aW9uIHluKHQpe3ZhciBpLHtyOmUsdTpyfT10LHM9eyRyZWZlcnJlcjplLCRyZWZlcnJpbmdfZG9tYWluOm51bGw9PWU/dm9pZCAwOlwiJGRpcmVjdFwiPT1lP1wiJGRpcmVjdFwiOm51bGw9PShpPXdpKGUpKT92b2lkIDA6aS5ob3N0fTtpZihyKXtzLiRjdXJyZW50X3VybD1yO3ZhciBuPXdpKHIpO3MuJGhvc3Q9bnVsbD09bj92b2lkIDA6bi5ob3N0LHMuJHBhdGhuYW1lPW51bGw9PW4/dm9pZCAwOm4ucGF0aG5hbWU7dmFyIG89Z24ocik7VihzLG8pfWlmKGUpe3ZhciBhPV9uKGUpO1YocyxhKX1yZXR1cm4gc31mdW5jdGlvbiBTbigpe3RyeXtyZXR1cm4gSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lfWNhdGNoKHQpe3JldHVybn19ZnVuY3Rpb24gJG4oKXt0cnl7cmV0dXJuKG5ldyBEYXRlKS5nZXRUaW1lem9uZU9mZnNldCgpfWNhdGNoKHQpe3JldHVybn19ZnVuY3Rpb24ga24odCxlKXtpZighdilyZXR1cm57fTt2YXIgcixzLG4sbz10P0soW10sdm4sZXx8W10pOltdLFthLHVdPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaT0wO2k8dW4ubGVuZ3RoO2krKyl7dmFyW2Uscl09dW5baV0scz1lLmV4ZWModCksbj1zJiYoRShyKT9yKHMsdCk6cik7aWYobilyZXR1cm4gbn1yZXR1cm5bXCJcIixcIlwiXX0odik7cmV0dXJuIFYoWih7JG9zOmEsJG9zX3ZlcnNpb246dSwkYnJvd3Nlcjpvbih2LG5hdmlnYXRvci52ZW5kb3IpLCRkZXZpY2U6aG4odiksJGRldmljZV90eXBlOihzPXYsbj1obihzKSxuPT09YnN8fG49PT1tc3x8XCJLb2JvXCI9PT1ufHxcIktpbmRsZSBGaXJlXCI9PT1ufHxuPT09S3M/X3M6bj09PUxzfHxuPT09enN8fG49PT1Oc3x8bj09PUdzP1wiQ29uc29sZVwiOm49PT15cz9cIldlYXJhYmxlXCI6bj9mczpcIkRlc2t0b3BcIiksJHRpbWV6b25lOlNuKCksJHRpbWV6b25lX29mZnNldDokbigpfSkseyRjdXJyZW50X3VybDokaShudWxsPT1sP3ZvaWQgMDpsLmhyZWYsbyxmbiksJGhvc3Q6bnVsbD09bD92b2lkIDA6bC5ob3N0LCRwYXRobmFtZTpudWxsPT1sP3ZvaWQgMDpsLnBhdGhuYW1lLCRyYXdfdXNlcl9hZ2VudDp2Lmxlbmd0aD4xZTM/di5zdWJzdHJpbmcoMCw5OTcpK1wiLi4uXCI6diwkYnJvd3Nlcl92ZXJzaW9uOmxuKHYsbmF2aWdhdG9yLnZlbmRvciksJGJyb3dzZXJfbGFuZ3VhZ2U6bW4oKSwkYnJvd3Nlcl9sYW5ndWFnZV9wcmVmaXg6KHI9bW4oKSxcInN0cmluZ1wiPT10eXBlb2Ygcj9yLnNwbGl0KFwiLVwiKVswXTp2b2lkIDApLCRzY3JlZW5faGVpZ2h0Om51bGw9PWk/dm9pZCAwOmkuc2NyZWVuLmhlaWdodCwkc2NyZWVuX3dpZHRoOm51bGw9PWk/dm9pZCAwOmkuc2NyZWVuLndpZHRoLCR2aWV3cG9ydF9oZWlnaHQ6bnVsbD09aT92b2lkIDA6aS5pbm5lckhlaWdodCwkdmlld3BvcnRfd2lkdGg6bnVsbD09aT92b2lkIDA6aS5pbm5lcldpZHRoLCRsaWI6XCJ3ZWJcIiwkbGliX3ZlcnNpb246Zi5MSUJfVkVSU0lPTiwkaW5zZXJ0X2lkOk1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLDEwKStNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwxMCksJHRpbWU6RGF0ZS5ub3coKS8xZTN9KX12YXIgeG4sRW49eihcIltGZWF0dXJlRmxhZ3NdXCIpLEluPVwiJGFjdGl2ZV9mZWF0dXJlX2ZsYWdzXCIsUG49XCIkb3ZlcnJpZGVfZmVhdHVyZV9mbGFnc1wiLFJuPVwiJGZlYXR1cmVfZmxhZ19wYXlsb2Fkc1wiLFRuPVwiJG92ZXJyaWRlX2ZlYXR1cmVfZmxhZ19wYXlsb2Fkc1wiLE1uPVwiJGZlYXR1cmVfZmxhZ19yZXF1ZXN0X2lkXCIsT249dD0+e3ZhciBpPXt9O2Zvcih2YXJbZSxyXW9mIFkodHx8e30pKXImJihpW2VdPXIpO3JldHVybiBpfSxDbj10PT57dmFyIGk9dC5mbGFncztyZXR1cm4gaT8odC5mZWF0dXJlRmxhZ3M9T2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGkpLm1hcCgodD0+e3ZhciBlO3JldHVyblt0LG51bGwhPT0oZT1pW3RdLnZhcmlhbnQpJiZ2b2lkIDAhPT1lP2U6aVt0XS5lbmFibGVkXX0pKSksdC5mZWF0dXJlRmxhZ1BheWxvYWRzPU9iamVjdC5mcm9tRW50cmllcyhPYmplY3Qua2V5cyhpKS5maWx0ZXIoKHQ9PmlbdF0uZW5hYmxlZCkpLmZpbHRlcigodD0+e3ZhciBlO3JldHVybiBudWxsPT0oZT1pW3RdLm1ldGFkYXRhKT92b2lkIDA6ZS5wYXlsb2FkfSkpLm1hcCgodD0+e3ZhciBlO3JldHVyblt0LG51bGw9PShlPWlbdF0ubWV0YWRhdGEpP3ZvaWQgMDplLnBheWxvYWRdfSkpKSk6RW4ud2FybihcIlVzaW5nIGFuIG9sZGVyIHZlcnNpb24gb2YgdGhlIGZlYXR1cmUgZmxhZ3MgZW5kcG9pbnQuIFBsZWFzZSB1cGdyYWRlIHlvdXIgUG9zdEhvZyBzZXJ2ZXIgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uXCIpLHR9OyFmdW5jdGlvbih0KXt0LkZlYXR1cmVGbGFncz1cImZlYXR1cmVfZmxhZ3NcIix0LlJlY29yZGluZ3M9XCJyZWNvcmRpbmdzXCJ9KHhufHwoeG49e30pKTtjbGFzcyBGbntjb25zdHJ1Y3Rvcih0KXt0aGlzLm5lPSExLHRoaXMub2U9ITEsdGhpcy5hZT0hMSx0aGlzLmxlPSExLHRoaXMudWU9ITEsdGhpcy5oZT0hMSx0aGlzLmRlPSExLHRoaXMuTj10LHRoaXMuZmVhdHVyZUZsYWdFdmVudEhhbmRsZXJzPVtdfWRlY2lkZSgpe2lmKHRoaXMuTi5jb25maWcuX19wcmV2aWV3X3JlbW90ZV9jb25maWcpdGhpcy5oZT0hMDtlbHNle3ZhciB0PSF0aGlzLnZlJiYodGhpcy5OLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3N8fHRoaXMuTi5jb25maWcuYWR2YW5jZWRfZGlzYWJsZV9mZWF0dXJlX2ZsYWdzX29uX2ZpcnN0X2xvYWQpO3RoaXMuY2Uoe2Rpc2FibGVGbGFnczp0fSl9fWdldCBoYXNMb2FkZWRGbGFncygpe3JldHVybiB0aGlzLm9lfWdldEZsYWdzKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZ2V0RmxhZ1ZhcmlhbnRzKCkpfWdldEZsYWdzV2l0aERldGFpbHMoKXt2YXIgdD10aGlzLk4uZ2V0X3Byb3BlcnR5KFB0KSxpPXRoaXMuTi5nZXRfcHJvcGVydHkoUG4pLGU9dGhpcy5OLmdldF9wcm9wZXJ0eShUbik7aWYoIWUmJiFpKXJldHVybiB0fHx7fTt2YXIgcj1WKHt9LHR8fHt9KSxzPVsuLi5uZXcgU2V0KFsuLi5PYmplY3Qua2V5cyhlfHx7fSksLi4uT2JqZWN0LmtleXMoaXx8e30pXSldO2Zvcih2YXIgbiBvZiBzKXt2YXIgbyxhLGw9cltuXSx1PW51bGw9PWk/dm9pZCAwOmlbbl0saD1SKHUpP251bGwhPT0obz1udWxsPT1sP3ZvaWQgMDpsLmVuYWJsZWQpJiZ2b2lkIDAhPT1vJiZvOiEhdSxkPVIodSk/bC52YXJpYW50Olwic3RyaW5nXCI9PXR5cGVvZiB1P3U6dm9pZCAwLHY9bnVsbD09ZT92b2lkIDA6ZVtuXSxjPUIoe30sbCx7ZW5hYmxlZDpoLHZhcmlhbnQ6aD9udWxsIT1kP2Q6bnVsbD09bD92b2lkIDA6bC52YXJpYW50OnZvaWQgMH0pO2lmKGghPT0obnVsbD09bD92b2lkIDA6bC5lbmFibGVkKSYmKGMub3JpZ2luYWxfZW5hYmxlZD1udWxsPT1sP3ZvaWQgMDpsLmVuYWJsZWQpLGQhPT0obnVsbD09bD92b2lkIDA6bC52YXJpYW50KSYmKGMub3JpZ2luYWxfdmFyaWFudD1udWxsPT1sP3ZvaWQgMDpsLnZhcmlhbnQpLHYpYy5tZXRhZGF0YT1CKHt9LG51bGw9PWw/dm9pZCAwOmwubWV0YWRhdGEse3BheWxvYWQ6dixvcmlnaW5hbF9wYXlsb2FkOm51bGw9PWx8fG51bGw9PShhPWwubWV0YWRhdGEpP3ZvaWQgMDphLnBheWxvYWR9KTtyW25dPWN9cmV0dXJuIHRoaXMubmV8fChFbi53YXJuKFwiIE92ZXJyaWRpbmcgZmVhdHVyZSBmbGFnIGRldGFpbHMhXCIse2ZsYWdEZXRhaWxzOnQsb3ZlcnJpZGRlblBheWxvYWRzOmUsZmluYWxEZXRhaWxzOnJ9KSx0aGlzLm5lPSEwKSxyfWdldEZsYWdWYXJpYW50cygpe3ZhciB0PXRoaXMuTi5nZXRfcHJvcGVydHkoRXQpLGk9dGhpcy5OLmdldF9wcm9wZXJ0eShQbik7aWYoIWkpcmV0dXJuIHR8fHt9O2Zvcih2YXIgZT1WKHt9LHQpLHI9T2JqZWN0LmtleXMoaSkscz0wO3M8ci5sZW5ndGg7cysrKWVbcltzXV09aVtyW3NdXTtyZXR1cm4gdGhpcy5uZXx8KEVuLndhcm4oXCIgT3ZlcnJpZGluZyBmZWF0dXJlIGZsYWdzIVwiLHtlbmFibGVkRmxhZ3M6dCxvdmVycmlkZGVuRmxhZ3M6aSxmaW5hbEZsYWdzOmV9KSx0aGlzLm5lPSEwKSxlfWdldEZsYWdQYXlsb2Fkcygpe3ZhciB0PXRoaXMuTi5nZXRfcHJvcGVydHkoUm4pLGk9dGhpcy5OLmdldF9wcm9wZXJ0eShUbik7aWYoIWkpcmV0dXJuIHR8fHt9O2Zvcih2YXIgZT1WKHt9LHR8fHt9KSxyPU9iamVjdC5rZXlzKGkpLHM9MDtzPHIubGVuZ3RoO3MrKyllW3Jbc11dPWlbcltzXV07cmV0dXJuIHRoaXMubmV8fChFbi53YXJuKFwiIE92ZXJyaWRpbmcgZmVhdHVyZSBmbGFnIHBheWxvYWRzIVwiLHtmbGFnUGF5bG9hZHM6dCxvdmVycmlkZGVuUGF5bG9hZHM6aSxmaW5hbFBheWxvYWRzOmV9KSx0aGlzLm5lPSEwKSxlfXJlbG9hZEZlYXR1cmVGbGFncygpe3RoaXMubGV8fHRoaXMuTi5jb25maWcuYWR2YW5jZWRfZGlzYWJsZV9mZWF0dXJlX2ZsYWdzfHx0aGlzLnZlfHwodGhpcy52ZT1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuY2UoKX0pLDUpKX1mZSgpe2NsZWFyVGltZW91dCh0aGlzLnZlKSx0aGlzLnZlPXZvaWQgMH1lbnN1cmVGbGFnc0xvYWRlZCgpe3RoaXMub2V8fHRoaXMuYWV8fHRoaXMudmV8fHRoaXMucmVsb2FkRmVhdHVyZUZsYWdzKCl9c2V0QW5vbnltb3VzRGlzdGluY3RJZCh0KXt0aGlzLiRhbm9uX2Rpc3RpbmN0X2lkPXR9c2V0UmVsb2FkaW5nUGF1c2VkKHQpe3RoaXMubGU9dH1jZShpKXt2YXIgZTtpZih0aGlzLmZlKCksIXRoaXMuTi5jb25maWcuYWR2YW5jZWRfZGlzYWJsZV9kZWNpZGUpaWYodGhpcy5hZSl0aGlzLnVlPSEwO2Vsc2V7dmFyIHI9e3Rva2VuOnRoaXMuTi5jb25maWcudG9rZW4sZGlzdGluY3RfaWQ6dGhpcy5OLmdldF9kaXN0aW5jdF9pZCgpLGdyb3Vwczp0aGlzLk4uZ2V0R3JvdXBzKCksJGFub25fZGlzdGluY3RfaWQ6dGhpcy4kYW5vbl9kaXN0aW5jdF9pZCxwZXJzb25fcHJvcGVydGllczpCKHt9LChudWxsPT0oZT10aGlzLk4ucGVyc2lzdGVuY2UpP3ZvaWQgMDplLmdldF9pbml0aWFsX3Byb3BzKCkpfHx7fSx0aGlzLk4uZ2V0X3Byb3BlcnR5KFJ0KXx8e30pLGdyb3VwX3Byb3BlcnRpZXM6dGhpcy5OLmdldF9wcm9wZXJ0eShUdCl9OyhudWxsIT1pJiZpLmRpc2FibGVGbGFnc3x8dGhpcy5OLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3MpJiYoci5kaXNhYmxlX2ZsYWdzPSEwKTt2YXIgcz10aGlzLk4uY29uZmlnLl9fcHJldmlld19mbGFnc192MiYmdGhpcy5OLmNvbmZpZy5fX3ByZXZpZXdfcmVtb3RlX2NvbmZpZztzJiYoci50aW1lem9uZT1TbigpKSx0aGlzLmFlPSEwLHRoaXMuTi5wZSh7bWV0aG9kOlwiUE9TVFwiLHVybDp0aGlzLk4ucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcImFwaVwiLHM/XCIvZmxhZ3MvP3Y9MlwiOlwiL2RlY2lkZS8/dj00XCIpLGRhdGE6cixjb21wcmVzc2lvbjp0aGlzLk4uY29uZmlnLmRpc2FibGVfY29tcHJlc3Npb24/dm9pZCAwOnQuQmFzZTY0LHRpbWVvdXQ6dGhpcy5OLmNvbmZpZy5mZWF0dXJlX2ZsYWdfcmVxdWVzdF90aW1lb3V0X21zLGNhbGxiYWNrOnQ9Pnt2YXIgaSxlLHMsbj0hMDsoMjAwPT09dC5zdGF0dXNDb2RlJiYodGhpcy51ZXx8KHRoaXMuJGFub25fZGlzdGluY3RfaWQ9dm9pZCAwKSxuPSExKSx0aGlzLmFlPSExLHRoaXMuaGUpfHwodGhpcy5oZT0hMCx0aGlzLk4uZ2UobnVsbCE9PShzPXQuanNvbikmJnZvaWQgMCE9PXM/czp7fSkpO3IuZGlzYWJsZV9mbGFncyYmIXRoaXMudWV8fCh0aGlzLmRlPSFuLHQuanNvbiYmbnVsbCE9KGk9dC5qc29uLnF1b3RhTGltaXRlZCkmJmkuaW5jbHVkZXMoeG4uRmVhdHVyZUZsYWdzKT9Fbi53YXJuKFwiWW91IGhhdmUgaGl0IHlvdXIgZmVhdHVyZSBmbGFncyBxdW90YSBsaW1pdCwgYW5kIHdpbGwgbm90IGJlIGFibGUgdG8gbG9hZCBmZWF0dXJlIGZsYWdzIHVudGlsIHRoZSBxdW90YSBpcyByZXNldC4gIFBsZWFzZSB2aXNpdCBodHRwczovL3Bvc3Rob2cuY29tL2RvY3MvYmlsbGluZy9saW1pdHMtYWxlcnRzIHRvIGxlYXJuIG1vcmUuXCIpOih0aGlzLnJlY2VpdmVkRmVhdHVyZUZsYWdzKG51bGwhPT0oZT10Lmpzb24pJiZ2b2lkIDAhPT1lP2U6e30sbiksdGhpcy51ZSYmKHRoaXMudWU9ITEsdGhpcy5jZSgpKSkpfX0pfX1nZXRGZWF0dXJlRmxhZyh0LGkpe2lmKHZvaWQgMD09PWkmJihpPXt9KSx0aGlzLm9lfHx0aGlzLmdldEZsYWdzKCkmJnRoaXMuZ2V0RmxhZ3MoKS5sZW5ndGg+MCl7dmFyIGU9dGhpcy5nZXRGbGFnVmFyaWFudHMoKVt0XSxyPVwiXCIrZSxzPXRoaXMuTi5nZXRfcHJvcGVydHkoTW4pfHx2b2lkIDAsbj10aGlzLk4uZ2V0X3Byb3BlcnR5KEN0KXx8e307aWYoKGkuc2VuZF9ldmVudHx8IShcInNlbmRfZXZlbnRcImluIGkpKSYmKCEodCBpbiBuKXx8IW5bdF0uaW5jbHVkZXMocikpKXt2YXIgbyxhLGwsdSxoLGQsdixjLGYscCxnO3goblt0XSk/blt0XS5wdXNoKHIpOm5bdF09W3JdLG51bGw9PShvPXRoaXMuTi5wZXJzaXN0ZW5jZSl8fG8ucmVnaXN0ZXIoe1tDdF06bn0pO3ZhciBfPXRoaXMuZ2V0RmVhdHVyZUZsYWdEZXRhaWxzKHQpLG09eyRmZWF0dXJlX2ZsYWc6dCwkZmVhdHVyZV9mbGFnX3Jlc3BvbnNlOmUsJGZlYXR1cmVfZmxhZ19wYXlsb2FkOnRoaXMuZ2V0RmVhdHVyZUZsYWdQYXlsb2FkKHQpfHxudWxsLCRmZWF0dXJlX2ZsYWdfcmVxdWVzdF9pZDpzLCRmZWF0dXJlX2ZsYWdfYm9vdHN0cmFwcGVkX3Jlc3BvbnNlOihudWxsPT0oYT10aGlzLk4uY29uZmlnLmJvb3RzdHJhcCl8fG51bGw9PShsPWEuZmVhdHVyZUZsYWdzKT92b2lkIDA6bFt0XSl8fG51bGwsJGZlYXR1cmVfZmxhZ19ib290c3RyYXBwZWRfcGF5bG9hZDoobnVsbD09KHU9dGhpcy5OLmNvbmZpZy5ib290c3RyYXApfHxudWxsPT0oaD11LmZlYXR1cmVGbGFnUGF5bG9hZHMpP3ZvaWQgMDpoW3RdKXx8bnVsbCwkdXNlZF9ib290c3RyYXBfdmFsdWU6IXRoaXMuZGV9O1IobnVsbD09X3x8bnVsbD09KGQ9Xy5tZXRhZGF0YSk/dm9pZCAwOmQudmVyc2lvbil8fChtLiRmZWF0dXJlX2ZsYWdfdmVyc2lvbj1fLm1ldGFkYXRhLnZlcnNpb24pO3ZhciBiLHc9bnVsbCE9PSh2PW51bGw9PV98fG51bGw9PShjPV8ucmVhc29uKT92b2lkIDA6Yy5kZXNjcmlwdGlvbikmJnZvaWQgMCE9PXY/djpudWxsPT1ffHxudWxsPT0oZj1fLnJlYXNvbik/dm9pZCAwOmYuY29kZTtpZih3JiYobS4kZmVhdHVyZV9mbGFnX3JlYXNvbj13KSxudWxsIT1fJiZudWxsIT0ocD1fLm1ldGFkYXRhKSYmcC5pZCYmKG0uJGZlYXR1cmVfZmxhZ19pZD1fLm1ldGFkYXRhLmlkKSxSKG51bGw9PV8/dm9pZCAwOl8ub3JpZ2luYWxfdmFyaWFudCkmJlIobnVsbD09Xz92b2lkIDA6Xy5vcmlnaW5hbF9lbmFibGVkKXx8KG0uJGZlYXR1cmVfZmxhZ19vcmlnaW5hbF9yZXNwb25zZT1SKF8ub3JpZ2luYWxfdmFyaWFudCk/Xy5vcmlnaW5hbF9lbmFibGVkOl8ub3JpZ2luYWxfdmFyaWFudCksbnVsbCE9XyYmbnVsbCE9KGc9Xy5tZXRhZGF0YSkmJmcub3JpZ2luYWxfcGF5bG9hZCltLiRmZWF0dXJlX2ZsYWdfb3JpZ2luYWxfcGF5bG9hZD1udWxsPT1ffHxudWxsPT0oYj1fLm1ldGFkYXRhKT92b2lkIDA6Yi5vcmlnaW5hbF9wYXlsb2FkO3RoaXMuTi5jYXB0dXJlKFwiJGZlYXR1cmVfZmxhZ19jYWxsZWRcIixtKX1yZXR1cm4gZX1Fbi53YXJuKCdnZXRGZWF0dXJlRmxhZyBmb3Iga2V5IFwiJyt0K1wiXFxcIiBmYWlsZWQuIEZlYXR1cmUgZmxhZ3MgZGlkbid0IGxvYWQgaW4gdGltZS5cIil9Z2V0RmVhdHVyZUZsYWdEZXRhaWxzKHQpe3JldHVybiB0aGlzLmdldEZsYWdzV2l0aERldGFpbHMoKVt0XX1nZXRGZWF0dXJlRmxhZ1BheWxvYWQodCl7cmV0dXJuIHRoaXMuZ2V0RmxhZ1BheWxvYWRzKClbdF19Z2V0UmVtb3RlQ29uZmlnUGF5bG9hZChpLGUpe3ZhciByPXRoaXMuTi5jb25maWcudG9rZW47dGhpcy5OLnBlKHttZXRob2Q6XCJQT1NUXCIsdXJsOnRoaXMuTi5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsXCIvZGVjaWRlLz92PTRcIiksZGF0YTp7ZGlzdGluY3RfaWQ6dGhpcy5OLmdldF9kaXN0aW5jdF9pZCgpLHRva2VuOnJ9LGNvbXByZXNzaW9uOnRoaXMuTi5jb25maWcuZGlzYWJsZV9jb21wcmVzc2lvbj92b2lkIDA6dC5CYXNlNjQsdGltZW91dDp0aGlzLk4uY29uZmlnLmZlYXR1cmVfZmxhZ19yZXF1ZXN0X3RpbWVvdXRfbXMsY2FsbGJhY2s6dD0+e3ZhciByLHM9bnVsbD09KHI9dC5qc29uKT92b2lkIDA6ci5mZWF0dXJlRmxhZ1BheWxvYWRzO2UoKG51bGw9PXM/dm9pZCAwOnNbaV0pfHx2b2lkIDApfX0pfWlzRmVhdHVyZUVuYWJsZWQodCxpKXtpZih2b2lkIDA9PT1pJiYoaT17fSksdGhpcy5vZXx8dGhpcy5nZXRGbGFncygpJiZ0aGlzLmdldEZsYWdzKCkubGVuZ3RoPjApcmV0dXJuISF0aGlzLmdldEZlYXR1cmVGbGFnKHQsaSk7RW4ud2FybignaXNGZWF0dXJlRW5hYmxlZCBmb3Iga2V5IFwiJyt0K1wiXFxcIiBmYWlsZWQuIEZlYXR1cmUgZmxhZ3MgZGlkbid0IGxvYWQgaW4gdGltZS5cIil9YWRkRmVhdHVyZUZsYWdzSGFuZGxlcih0KXt0aGlzLmZlYXR1cmVGbGFnRXZlbnRIYW5kbGVycy5wdXNoKHQpfXJlbW92ZUZlYXR1cmVGbGFnc0hhbmRsZXIodCl7dGhpcy5mZWF0dXJlRmxhZ0V2ZW50SGFuZGxlcnM9dGhpcy5mZWF0dXJlRmxhZ0V2ZW50SGFuZGxlcnMuZmlsdGVyKChpPT5pIT09dCkpfXJlY2VpdmVkRmVhdHVyZUZsYWdzKHQsaSl7aWYodGhpcy5OLnBlcnNpc3RlbmNlKXt0aGlzLm9lPSEwO3ZhciBlPXRoaXMuZ2V0RmxhZ1ZhcmlhbnRzKCkscj10aGlzLmdldEZsYWdQYXlsb2FkcygpLHM9dGhpcy5nZXRGbGFnc1dpdGhEZXRhaWxzKCk7IWZ1bmN0aW9uKHQsaSxlLHIscyl7dm9pZCAwPT09ZSYmKGU9e30pLHZvaWQgMD09PXImJihyPXt9KSx2b2lkIDA9PT1zJiYocz17fSk7dmFyIG49Q24odCksbz1uLmZsYWdzLGE9bi5mZWF0dXJlRmxhZ3MsbD1uLmZlYXR1cmVGbGFnUGF5bG9hZHM7aWYoYSl7dmFyIHU9dC5yZXF1ZXN0SWQ7aWYoeChhKSl7RW4ud2FybihcInYxIG9mIHRoZSBmZWF0dXJlIGZsYWdzIGVuZHBvaW50IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdGhlIGxhdGVzdCB2ZXJzaW9uLlwiKTt2YXIgaD17fTtpZihhKWZvcih2YXIgZD0wO2Q8YS5sZW5ndGg7ZCsrKWhbYVtkXV09ITA7aSYmaS5yZWdpc3Rlcih7W0luXTphLFtFdF06aH0pfWVsc2V7dmFyIHY9YSxjPWwsZj1vO3QuZXJyb3JzV2hpbGVDb21wdXRpbmdGbGFncyYmKHY9Qih7fSxlLHYpLGM9Qih7fSxyLGMpLGY9Qih7fSxzLGYpKSxpJiZpLnJlZ2lzdGVyKEIoe1tJbl06T2JqZWN0LmtleXMoT24odikpLFtFdF06dnx8e30sW1JuXTpjfHx7fSxbUHRdOmZ8fHt9fSx1P3tbTW5dOnV9Ont9KSl9fX0odCx0aGlzLk4ucGVyc2lzdGVuY2UsZSxyLHMpLHRoaXMuX2UoaSl9fW92ZXJyaWRlKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLEVuLndhcm4oXCJvdmVycmlkZSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG92ZXJyaWRlRmVhdHVyZUZsYWdzIGluc3RlYWQuXCIpLHRoaXMub3ZlcnJpZGVGZWF0dXJlRmxhZ3Moe2ZsYWdzOnQsc3VwcHJlc3NXYXJuaW5nOml9KX1vdmVycmlkZUZlYXR1cmVGbGFncyh0KXtpZighdGhpcy5OLl9fbG9hZGVkfHwhdGhpcy5OLnBlcnNpc3RlbmNlKXJldHVybiBFbi51bmluaXRpYWxpemVkV2FybmluZyhcInBvc3Rob2cuZmVhdHVyZUZsYWdzLm92ZXJyaWRlRmVhdHVyZUZsYWdzXCIpO2lmKCExPT09dClyZXR1cm4gdGhpcy5OLnBlcnNpc3RlbmNlLnVucmVnaXN0ZXIoUG4pLHRoaXMuTi5wZXJzaXN0ZW5jZS51bnJlZ2lzdGVyKFRuKSx2b2lkIHRoaXMuX2UoKTtpZih0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmKFwiZmxhZ3NcImluIHR8fFwicGF5bG9hZHNcImluIHQpKXt2YXIgaSxlPXQ7aWYodGhpcy5uZT1Cb29sZWFuKG51bGwhPT0oaT1lLnN1cHByZXNzV2FybmluZykmJnZvaWQgMCE9PWkmJmkpLFwiZmxhZ3NcImluIGUpaWYoITE9PT1lLmZsYWdzKXRoaXMuTi5wZXJzaXN0ZW5jZS51bnJlZ2lzdGVyKFBuKTtlbHNlIGlmKGUuZmxhZ3MpaWYoeChlLmZsYWdzKSl7Zm9yKHZhciByPXt9LHM9MDtzPGUuZmxhZ3MubGVuZ3RoO3MrKylyW2UuZmxhZ3Nbc11dPSEwO3RoaXMuTi5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W1BuXTpyfSl9ZWxzZSB0aGlzLk4ucGVyc2lzdGVuY2UucmVnaXN0ZXIoe1tQbl06ZS5mbGFnc30pO3JldHVyblwicGF5bG9hZHNcImluIGUmJighMT09PWUucGF5bG9hZHM/dGhpcy5OLnBlcnNpc3RlbmNlLnVucmVnaXN0ZXIoVG4pOmUucGF5bG9hZHMmJnRoaXMuTi5wZXJzaXN0ZW5jZS5yZWdpc3Rlcih7W1RuXTplLnBheWxvYWRzfSkpLHZvaWQgdGhpcy5fZSgpfXRoaXMuX2UoKX1vbkZlYXR1cmVGbGFncyh0KXtpZih0aGlzLmFkZEZlYXR1cmVGbGFnc0hhbmRsZXIodCksdGhpcy5vZSl7dmFye2ZsYWdzOmksZmxhZ1ZhcmlhbnRzOmV9PXRoaXMubWUoKTt0KGksZSl9cmV0dXJuKCk9PnRoaXMucmVtb3ZlRmVhdHVyZUZsYWdzSGFuZGxlcih0KX11cGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVFbnJvbGxtZW50KHQsaSl7dmFyIGUscj0odGhpcy5OLmdldF9wcm9wZXJ0eShJdCl8fFtdKS5maW5kKChpPT5pLmZsYWdLZXk9PT10KSkscz17W1wiJGZlYXR1cmVfZW5yb2xsbWVudC9cIit0XTppfSxuPXskZmVhdHVyZV9mbGFnOnQsJGZlYXR1cmVfZW5yb2xsbWVudDppLCRzZXQ6c307ciYmKG4uJGVhcmx5X2FjY2Vzc19mZWF0dXJlX25hbWU9ci5uYW1lKSx0aGlzLk4uY2FwdHVyZShcIiRmZWF0dXJlX2Vucm9sbG1lbnRfdXBkYXRlXCIsbiksdGhpcy5zZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3MocywhMSk7dmFyIG89Qih7fSx0aGlzLmdldEZsYWdWYXJpYW50cygpLHtbdF06aX0pO251bGw9PShlPXRoaXMuTi5wZXJzaXN0ZW5jZSl8fGUucmVnaXN0ZXIoe1tJbl06T2JqZWN0LmtleXMoT24obykpLFtFdF06b30pLHRoaXMuX2UoKX1nZXRFYXJseUFjY2Vzc0ZlYXR1cmVzKHQsaSxlKXt2b2lkIDA9PT1pJiYoaT0hMSk7dmFyIHI9dGhpcy5OLmdldF9wcm9wZXJ0eShJdCkscz1lP1wiJlwiK2UubWFwKCh0PT5cInN0YWdlPVwiK3QpKS5qb2luKFwiJlwiKTpcIlwiO2lmKHImJiFpKXJldHVybiB0KHIpO3RoaXMuTi5wZSh7dXJsOnRoaXMuTi5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsXCIvYXBpL2Vhcmx5X2FjY2Vzc19mZWF0dXJlcy8/dG9rZW49XCIrdGhpcy5OLmNvbmZpZy50b2tlbitzKSxtZXRob2Q6XCJHRVRcIixjYWxsYmFjazppPT57dmFyIGU7aWYoaS5qc29uKXt2YXIgcj1pLmpzb24uZWFybHlBY2Nlc3NGZWF0dXJlcztyZXR1cm4gbnVsbD09KGU9dGhpcy5OLnBlcnNpc3RlbmNlKXx8ZS5yZWdpc3Rlcih7W0l0XTpyfSksdChyKX19fSl9bWUoKXt2YXIgdD10aGlzLmdldEZsYWdzKCksaT10aGlzLmdldEZsYWdWYXJpYW50cygpO3JldHVybntmbGFnczp0LmZpbHRlcigodD0+aVt0XSkpLGZsYWdWYXJpYW50czpPYmplY3Qua2V5cyhpKS5maWx0ZXIoKHQ9PmlbdF0pKS5yZWR1Y2UoKCh0LGUpPT4odFtlXT1pW2VdLHQpKSx7fSl9fV9lKHQpe3ZhcntmbGFnczppLGZsYWdWYXJpYW50czplfT10aGlzLm1lKCk7dGhpcy5mZWF0dXJlRmxhZ0V2ZW50SGFuZGxlcnMuZm9yRWFjaCgocj0+cihpLGUse2Vycm9yc0xvYWRpbmc6dH0pKSl9c2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITApO3ZhciBlPXRoaXMuTi5nZXRfcHJvcGVydHkoUnQpfHx7fTt0aGlzLk4ucmVnaXN0ZXIoe1tSdF06Qih7fSxlLHQpfSksaSYmdGhpcy5OLnJlbG9hZEZlYXR1cmVGbGFncygpfXJlc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKCl7dGhpcy5OLnVucmVnaXN0ZXIoUnQpfXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITApO3ZhciBlPXRoaXMuTi5nZXRfcHJvcGVydHkoVHQpfHx7fTswIT09T2JqZWN0LmtleXMoZSkubGVuZ3RoJiZPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChpPT57ZVtpXT1CKHt9LGVbaV0sdFtpXSksZGVsZXRlIHRbaV19KSksdGhpcy5OLnJlZ2lzdGVyKHtbVHRdOkIoe30sZSx0KX0pLGkmJnRoaXMuTi5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1yZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQpe2lmKHQpe3ZhciBpPXRoaXMuTi5nZXRfcHJvcGVydHkoVHQpfHx7fTt0aGlzLk4ucmVnaXN0ZXIoe1tUdF06Qih7fSxpLHtbdF06e319KX0pfWVsc2UgdGhpcy5OLnVucmVnaXN0ZXIoVHQpfX12YXIgQW49W1wiY29va2llXCIsXCJsb2NhbHN0b3JhZ2VcIixcImxvY2Fsc3RvcmFnZStjb29raWVcIixcInNlc3Npb25zdG9yYWdlXCIsXCJtZW1vcnlcIl07Y2xhc3MgRG57Y29uc3RydWN0b3IodCl7dGhpcy5TPXQsdGhpcy5wcm9wcz17fSx0aGlzLmJlPSExLHRoaXMud2U9KHQ9Pnt2YXIgaT1cIlwiO3JldHVybiB0LnRva2VuJiYoaT10LnRva2VuLnJlcGxhY2UoL1xcKy9nLFwiUExcIikucmVwbGFjZSgvXFwvL2csXCJTTFwiKS5yZXBsYWNlKC89L2csXCJFUVwiKSksdC5wZXJzaXN0ZW5jZV9uYW1lP1wicGhfXCIrdC5wZXJzaXN0ZW5jZV9uYW1lOlwicGhfXCIraStcIl9wb3N0aG9nXCJ9KSh0KSx0aGlzLkI9dGhpcy55ZSh0KSx0aGlzLmxvYWQoKSx0LmRlYnVnJiZOLmluZm8oXCJQZXJzaXN0ZW5jZSBsb2FkZWRcIix0LnBlcnNpc3RlbmNlLEIoe30sdGhpcy5wcm9wcykpLHRoaXMudXBkYXRlX2NvbmZpZyh0LHQpLHRoaXMuc2F2ZSgpfXllKHQpey0xPT09QW4uaW5kZXhPZih0LnBlcnNpc3RlbmNlLnRvTG93ZXJDYXNlKCkpJiYoTi5jcml0aWNhbChcIlVua25vd24gcGVyc2lzdGVuY2UgdHlwZSBcIit0LnBlcnNpc3RlbmNlK1wiOyBmYWxsaW5nIGJhY2sgdG8gbG9jYWxTdG9yYWdlK2Nvb2tpZVwiKSx0LnBlcnNpc3RlbmNlPVwibG9jYWxTdG9yYWdlK2Nvb2tpZVwiKTt2YXIgaT10LnBlcnNpc3RlbmNlLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJsb2NhbHN0b3JhZ2VcIj09PWkmJkdpLkMoKT9HaTpcImxvY2Fsc3RvcmFnZStjb29raWVcIj09PWkmJlZpLkMoKT9WaTpcInNlc3Npb25zdG9yYWdlXCI9PT1pJiZRaS5DKCk/UWk6XCJtZW1vcnlcIj09PWk/WWk6XCJjb29raWVcIj09PWk/SGk6VmkuQygpP1ZpOkhpfXByb3BlcnRpZXMoKXt2YXIgdD17fTtyZXR1cm4gSih0aGlzLnByb3BzLChmdW5jdGlvbihpLGUpe2lmKGU9PT1FdCYmSShpKSlmb3IodmFyIHI9T2JqZWN0LmtleXMoaSkscz0wO3M8ci5sZW5ndGg7cysrKXRbXCIkZmVhdHVyZS9cIityW3NdXT1pW3Jbc11dO2Vsc2UgYT1lLGw9ITEsKE8obz1CdCk/bDpuJiZvLmluZGV4T2Y9PT1uPy0xIT1vLmluZGV4T2YoYSk6KEoobywoZnVuY3Rpb24odCl7aWYobHx8KGw9dD09PWEpKXJldHVybiBXfSkpLGwpKXx8KHRbZV09aSk7dmFyIG8sYSxsfSkpLHR9bG9hZCgpe2lmKCF0aGlzLlNlKXt2YXIgdD10aGlzLkIuRCh0aGlzLndlKTt0JiYodGhpcy5wcm9wcz1WKHt9LHQpKX19c2F2ZSgpe3RoaXMuU2V8fHRoaXMuQi5qKHRoaXMud2UsdGhpcy5wcm9wcyx0aGlzLiRlLHRoaXMua2UsdGhpcy54ZSx0aGlzLlMuZGVidWcpfXJlbW92ZSgpe3RoaXMuQi5MKHRoaXMud2UsITEpLHRoaXMuQi5MKHRoaXMud2UsITApfWNsZWFyKCl7dGhpcy5yZW1vdmUoKSx0aGlzLnByb3BzPXt9fXJlZ2lzdGVyX29uY2UodCxpLGUpe2lmKEkodCkpe1IoaSkmJihpPVwiTm9uZVwiKSx0aGlzLiRlPVIoZSk/dGhpcy5FZTplO3ZhciByPSExO2lmKEoodCwoKHQsZSk9Pnt0aGlzLnByb3BzLmhhc093blByb3BlcnR5KGUpJiZ0aGlzLnByb3BzW2VdIT09aXx8KHRoaXMucHJvcHNbZV09dCxyPSEwKX0pKSxyKXJldHVybiB0aGlzLnNhdmUoKSwhMH1yZXR1cm4hMX1yZWdpc3Rlcih0LGkpe2lmKEkodCkpe3RoaXMuJGU9UihpKT90aGlzLkVlOmk7dmFyIGU9ITE7aWYoSih0LCgoaSxyKT0+e3QuaGFzT3duUHJvcGVydHkocikmJnRoaXMucHJvcHNbcl0hPT1pJiYodGhpcy5wcm9wc1tyXT1pLGU9ITApfSkpLGUpcmV0dXJuIHRoaXMuc2F2ZSgpLCEwfXJldHVybiExfXVucmVnaXN0ZXIodCl7dCBpbiB0aGlzLnByb3BzJiYoZGVsZXRlIHRoaXMucHJvcHNbdF0sdGhpcy5zYXZlKCkpfXVwZGF0ZV9jYW1wYWlnbl9wYXJhbXMoKXtpZighdGhpcy5iZSl7dmFyIHQ9cG4odGhpcy5TLmN1c3RvbV9jYW1wYWlnbl9wYXJhbXMsdGhpcy5TLm1hc2tfcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzLHRoaXMuUy5jdXN0b21fcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzKTtQKFoodCkpfHx0aGlzLnJlZ2lzdGVyKHQpLHRoaXMuYmU9ITB9fXVwZGF0ZV9zZWFyY2hfa2V5d29yZCgpe3ZhciB0O3RoaXMucmVnaXN0ZXIoKHQ9bnVsbD09YT92b2lkIDA6YS5yZWZlcnJlcik/X24odCk6e30pfXVwZGF0ZV9yZWZlcnJlcl9pbmZvKCl7dmFyIHQ7dGhpcy5yZWdpc3Rlcl9vbmNlKHskcmVmZXJyZXI6Ym4oKSwkcmVmZXJyaW5nX2RvbWFpbjpudWxsIT1hJiZhLnJlZmVycmVyJiYobnVsbD09KHQ9d2koYS5yZWZlcnJlcikpP3ZvaWQgMDp0Lmhvc3QpfHxcIiRkaXJlY3RcIn0sdm9pZCAwKX1zZXRfaW5pdGlhbF9wZXJzb25faW5mbygpe3RoaXMucHJvcHNbanRdfHx0aGlzLnByb3BzW0x0XXx8dGhpcy5yZWdpc3Rlcl9vbmNlKHtbTnRdOnduKHRoaXMuUy5tYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyx0aGlzLlMuY3VzdG9tX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyl9LHZvaWQgMCl9Z2V0X2luaXRpYWxfcHJvcHMoKXt2YXIgdD17fTtKKFtMdCxqdF0sKGk9Pnt2YXIgZT10aGlzLnByb3BzW2ldO2UmJkooZSwoZnVuY3Rpb24oaSxlKXt0W1wiJGluaXRpYWxfXCIrdyhlKV09aX0pKX0pKTt2YXIgaSxlLHI9dGhpcy5wcm9wc1tOdF07aWYocil7dmFyIHM9KGk9eW4ociksZT17fSxKKGksKGZ1bmN0aW9uKHQsaSl7ZVtcIiRpbml0aWFsX1wiK3coaSldPXR9KSksZSk7Vih0LHMpfXJldHVybiB0fXNhZmVfbWVyZ2UodCl7cmV0dXJuIEoodGhpcy5wcm9wcywoZnVuY3Rpb24oaSxlKXtlIGluIHR8fCh0W2VdPWkpfSkpLHR9dXBkYXRlX2NvbmZpZyh0LGkpe2lmKHRoaXMuRWU9dGhpcy4kZT10LmNvb2tpZV9leHBpcmF0aW9uLHRoaXMuc2V0X2Rpc2FibGVkKHQuZGlzYWJsZV9wZXJzaXN0ZW5jZSksdGhpcy5zZXRfY3Jvc3Nfc3ViZG9tYWluKHQuY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSksdGhpcy5zZXRfc2VjdXJlKHQuc2VjdXJlX2Nvb2tpZSksdC5wZXJzaXN0ZW5jZSE9PWkucGVyc2lzdGVuY2Upe3ZhciBlPXRoaXMueWUodCkscj10aGlzLnByb3BzO3RoaXMuY2xlYXIoKSx0aGlzLkI9ZSx0aGlzLnByb3BzPXIsdGhpcy5zYXZlKCl9fXNldF9kaXNhYmxlZCh0KXt0aGlzLlNlPXQsdGhpcy5TZT90aGlzLnJlbW92ZSgpOnRoaXMuc2F2ZSgpfXNldF9jcm9zc19zdWJkb21haW4odCl7dCE9PXRoaXMua2UmJih0aGlzLmtlPXQsdGhpcy5yZW1vdmUoKSx0aGlzLnNhdmUoKSl9c2V0X3NlY3VyZSh0KXt0IT09dGhpcy54ZSYmKHRoaXMueGU9dCx0aGlzLnJlbW92ZSgpLHRoaXMuc2F2ZSgpKX1zZXRfZXZlbnRfdGltZXIodCxpKXt2YXIgZT10aGlzLnByb3BzW2F0XXx8e307ZVt0XT1pLHRoaXMucHJvcHNbYXRdPWUsdGhpcy5zYXZlKCl9cmVtb3ZlX2V2ZW50X3RpbWVyKHQpe3ZhciBpPSh0aGlzLnByb3BzW2F0XXx8e30pW3RdO3JldHVybiBSKGkpfHwoZGVsZXRlIHRoaXMucHJvcHNbYXRdW3RdLHRoaXMuc2F2ZSgpKSxpfWdldF9wcm9wZXJ0eSh0KXtyZXR1cm4gdGhpcy5wcm9wc1t0XX1zZXRfcHJvcGVydHkodCxpKXt0aGlzLnByb3BzW3RdPWksdGhpcy5zYXZlKCl9fWNsYXNzIGpue2NvbnN0cnVjdG9yKCl7dGhpcy5JZT17fSx0aGlzLkllPXt9fW9uKHQsaSl7cmV0dXJuIHRoaXMuSWVbdF18fCh0aGlzLkllW3RdPVtdKSx0aGlzLkllW3RdLnB1c2goaSksKCk9Pnt0aGlzLkllW3RdPXRoaXMuSWVbdF0uZmlsdGVyKCh0PT50IT09aSkpfX1lbWl0KHQsaSl7Zm9yKHZhciBlIG9mIHRoaXMuSWVbdF18fFtdKWUoaSk7Zm9yKHZhciByIG9mIHRoaXMuSWVbXCIqXCJdfHxbXSlyKHQsaSl9fXZhciBMbj1mdW5jdGlvbih0LGkpe2lmKCFmdW5jdGlvbih0KXt0cnl7bmV3IFJlZ0V4cCh0KX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMH0oaSkpcmV0dXJuITE7dHJ5e3JldHVybiBuZXcgUmVnRXhwKGkpLnRlc3QodCl9Y2F0Y2godCl7cmV0dXJuITF9fTtjbGFzcyBObntjb25zdHJ1Y3Rvcih0KXt0aGlzLlBlPW5ldyBqbix0aGlzLlJlPSh0LGkpPT50aGlzLlRlKHQsaSkmJnRoaXMuTWUodCxpKSYmdGhpcy5PZSh0LGkpLHRoaXMuVGU9KHQsaSk9Pm51bGw9PWl8fCFpLmV2ZW50fHwobnVsbD09dD92b2lkIDA6dC5ldmVudCk9PT0obnVsbD09aT92b2lkIDA6aS5ldmVudCksdGhpcy5OPXQsdGhpcy5DZT1uZXcgU2V0LHRoaXMuRmU9bmV3IFNldH1pbml0KCl7dmFyIHQ7aWYoIVIobnVsbD09KHQ9dGhpcy5OKT92b2lkIDA6dC5BZSkpe3ZhciBpO251bGw9PShpPXRoaXMuTil8fGkuQWUoKCh0LGkpPT57dGhpcy5vbih0LGkpfSkpfX1yZWdpc3Rlcih0KXt2YXIgaSxlO2lmKCFSKG51bGw9PShpPXRoaXMuTik/dm9pZCAwOmkuQWUpJiYodC5mb3JFYWNoKCh0PT57dmFyIGksZTtudWxsPT0oaT10aGlzLkZlKXx8aS5hZGQodCksbnVsbD09KGU9dC5zdGVwcyl8fGUuZm9yRWFjaCgodD0+e3ZhciBpO251bGw9PShpPXRoaXMuQ2UpfHxpLmFkZCgobnVsbD09dD92b2lkIDA6dC5ldmVudCl8fFwiXCIpfSkpfSkpLG51bGwhPShlPXRoaXMuTikmJmUuYXV0b2NhcHR1cmUpKXt2YXIgcixzPW5ldyBTZXQ7dC5mb3JFYWNoKCh0PT57dmFyIGk7bnVsbD09KGk9dC5zdGVwcyl8fGkuZm9yRWFjaCgodD0+e251bGwhPXQmJnQuc2VsZWN0b3ImJnMuYWRkKG51bGw9PXQ/dm9pZCAwOnQuc2VsZWN0b3IpfSkpfSkpLG51bGw9PShyPXRoaXMuTil8fHIuYXV0b2NhcHR1cmUuc2V0RWxlbWVudFNlbGVjdG9ycyhzKX19b24odCxpKXt2YXIgZTtudWxsIT1pJiYwIT10Lmxlbmd0aCYmKHRoaXMuQ2UuaGFzKHQpfHx0aGlzLkNlLmhhcyhudWxsPT1pP3ZvaWQgMDppLmV2ZW50KSkmJnRoaXMuRmUmJihudWxsPT0oZT10aGlzLkZlKT92b2lkIDA6ZS5zaXplKT4wJiZ0aGlzLkZlLmZvckVhY2goKHQ9Pnt0aGlzLkRlKGksdCkmJnRoaXMuUGUuZW1pdChcImFjdGlvbkNhcHR1cmVkXCIsdC5uYW1lKX0pKX1qZSh0KXt0aGlzLm9uQWN0aW9uKFwiYWN0aW9uQ2FwdHVyZWRcIiwoaT0+dChpKSkpfURlKHQsaSl7aWYobnVsbD09KG51bGw9PWk/dm9pZCAwOmkuc3RlcHMpKXJldHVybiExO2Zvcih2YXIgZSBvZiBpLnN0ZXBzKWlmKHRoaXMuUmUodCxlKSlyZXR1cm4hMDtyZXR1cm4hMX1vbkFjdGlvbih0LGkpe3JldHVybiB0aGlzLlBlLm9uKHQsaSl9TWUodCxpKXtpZihudWxsIT1pJiZpLnVybCl7dmFyIGUscj1udWxsPT10fHxudWxsPT0oZT10LnByb3BlcnRpZXMpP3ZvaWQgMDplLiRjdXJyZW50X3VybDtpZighcnx8XCJzdHJpbmdcIiE9dHlwZW9mIHIpcmV0dXJuITE7aWYoIU5uLkxlKHIsbnVsbD09aT92b2lkIDA6aS51cmwsKG51bGw9PWk/dm9pZCAwOmkudXJsX21hdGNoaW5nKXx8XCJjb250YWluc1wiKSlyZXR1cm4hMX1yZXR1cm4hMH1zdGF0aWMgTGUodCxlLHIpe3N3aXRjaChyKXtjYXNlXCJyZWdleFwiOnJldHVybiEhaSYmTG4odCxlKTtjYXNlXCJleGFjdFwiOnJldHVybiBlPT09dDtjYXNlXCJjb250YWluc1wiOnZhciBzPU5uLk5lKGUpLnJlcGxhY2UoL18vZyxcIi5cIikucmVwbGFjZSgvJS9nLFwiLipcIik7cmV0dXJuIExuKHQscyk7ZGVmYXVsdDpyZXR1cm4hMX19c3RhdGljIE5lKHQpe3JldHVybiB0LnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLFwiXFxcXCQmXCIpLnJlcGxhY2UoLy0vZyxcIlxcXFx4MmRcIil9T2UodCxpKXtpZigobnVsbCE9aSYmaS5ocmVmfHxudWxsIT1pJiZpLnRhZ19uYW1lfHxudWxsIT1pJiZpLnRleHQpJiYhdGhpcy56ZSh0KS5zb21lKCh0PT4hKG51bGwhPWkmJmkuaHJlZiYmIU5uLkxlKHQuaHJlZnx8XCJcIixudWxsPT1pP3ZvaWQgMDppLmhyZWYsKG51bGw9PWk/dm9pZCAwOmkuaHJlZl9tYXRjaGluZyl8fFwiZXhhY3RcIikpJiYoKG51bGw9PWl8fCFpLnRhZ19uYW1lfHx0LnRhZ19uYW1lPT09KG51bGw9PWk/dm9pZCAwOmkudGFnX25hbWUpKSYmIShudWxsIT1pJiZpLnRleHQmJiFObi5MZSh0LnRleHR8fFwiXCIsbnVsbD09aT92b2lkIDA6aS50ZXh0LChudWxsPT1pP3ZvaWQgMDppLnRleHRfbWF0Y2hpbmcpfHxcImV4YWN0XCIpJiYhTm4uTGUodC4kZWxfdGV4dHx8XCJcIixudWxsPT1pP3ZvaWQgMDppLnRleHQsKG51bGw9PWk/dm9pZCAwOmkudGV4dF9tYXRjaGluZyl8fFwiZXhhY3RcIikpKSkpKXJldHVybiExO2lmKG51bGwhPWkmJmkuc2VsZWN0b3Ipe3ZhciBlLHI9bnVsbD09dHx8bnVsbD09KGU9dC5wcm9wZXJ0aWVzKT92b2lkIDA6ZS4kZWxlbWVudF9zZWxlY3RvcnM7aWYoIXIpcmV0dXJuITE7aWYoIXIuaW5jbHVkZXMobnVsbD09aT92b2lkIDA6aS5zZWxlY3RvcikpcmV0dXJuITF9cmV0dXJuITB9emUodCl7cmV0dXJuIG51bGw9PShudWxsPT10P3ZvaWQgMDp0LnByb3BlcnRpZXMuJGVsZW1lbnRzKT9bXTpudWxsPT10P3ZvaWQgMDp0LnByb3BlcnRpZXMuJGVsZW1lbnRzfX12YXIgem49eihcIltTdXJ2ZXlzXVwiKTtjbGFzcyBVbntjb25zdHJ1Y3Rvcih0KXt0aGlzLk49dCx0aGlzLlVlPW5ldyBNYXAsdGhpcy5xZT1uZXcgTWFwfXJlZ2lzdGVyKHQpe3ZhciBpO1IobnVsbD09KGk9dGhpcy5OKT92b2lkIDA6aS5BZSl8fCh0aGlzLkJlKHQpLHRoaXMuSGUodCkpfUhlKHQpe3ZhciBpPXQuZmlsdGVyKCh0PT57dmFyIGksZSxyLHM7cmV0dXJuKG51bGw9PShpPXQuY29uZGl0aW9ucyk/dm9pZCAwOmkuYWN0aW9ucykmJihudWxsPT0oZT10LmNvbmRpdGlvbnMpfHxudWxsPT0ocj1lLmFjdGlvbnMpfHxudWxsPT0ocz1yLnZhbHVlcyk/dm9pZCAwOnMubGVuZ3RoKT4wfSkpO2lmKDAhPT1pLmxlbmd0aCl7aWYobnVsbD09dGhpcy5XZSl7dGhpcy5XZT1uZXcgTm4odGhpcy5OKSx0aGlzLldlLmluaXQoKTt0aGlzLldlLmplKCh0PT57dGhpcy5vbkFjdGlvbih0KX0pKX1pLmZvckVhY2goKHQ9Pnt2YXIgaSxlLHIscyxuLG8sYSxsLHUsaDt0LmNvbmRpdGlvbnMmJm51bGwhPShpPXQuY29uZGl0aW9ucykmJmkuYWN0aW9ucyYmbnVsbCE9KGU9dC5jb25kaXRpb25zKSYmbnVsbCE9KHI9ZS5hY3Rpb25zKSYmci52YWx1ZXMmJihudWxsPT0ocz10LmNvbmRpdGlvbnMpfHxudWxsPT0obj1zLmFjdGlvbnMpfHxudWxsPT0obz1uLnZhbHVlcyk/dm9pZCAwOm8ubGVuZ3RoKT4wJiYobnVsbD09KGE9dGhpcy5XZSl8fGEucmVnaXN0ZXIodC5jb25kaXRpb25zLmFjdGlvbnMudmFsdWVzKSxudWxsPT0obD10LmNvbmRpdGlvbnMpfHxudWxsPT0odT1sLmFjdGlvbnMpfHxudWxsPT0oaD11LnZhbHVlcyl8fGguZm9yRWFjaCgoaT0+e2lmKGkmJmkubmFtZSl7dmFyIGU9dGhpcy5xZS5nZXQoaS5uYW1lKTtlJiZlLnB1c2godC5pZCksdGhpcy5xZS5zZXQoaS5uYW1lLGV8fFt0LmlkXSl9fSkpKX0pKX19QmUodCl7dmFyIGk7aWYoMCE9PXQuZmlsdGVyKCh0PT57dmFyIGksZSxyLHM7cmV0dXJuKG51bGw9PShpPXQuY29uZGl0aW9ucyk/dm9pZCAwOmkuZXZlbnRzKSYmKG51bGw9PShlPXQuY29uZGl0aW9ucyl8fG51bGw9PShyPWUuZXZlbnRzKXx8bnVsbD09KHM9ci52YWx1ZXMpP3ZvaWQgMDpzLmxlbmd0aCk+MH0pKS5sZW5ndGgpe251bGw9PShpPXRoaXMuTil8fGkuQWUoKCh0LGkpPT57dGhpcy5vbkV2ZW50KHQsaSl9KSksdC5mb3JFYWNoKCh0PT57dmFyIGksZSxyO251bGw9PShpPXQuY29uZGl0aW9ucyl8fG51bGw9PShlPWkuZXZlbnRzKXx8bnVsbD09KHI9ZS52YWx1ZXMpfHxyLmZvckVhY2goKGk9PntpZihpJiZpLm5hbWUpe3ZhciBlPXRoaXMuVWUuZ2V0KGkubmFtZSk7ZSYmZS5wdXNoKHQuaWQpLHRoaXMuVWUuc2V0KGkubmFtZSxlfHxbdC5pZF0pfX0pKX0pKX19b25FdmVudCh0LGkpe3ZhciBlLHIscz0obnVsbD09KGU9dGhpcy5OKXx8bnVsbD09KHI9ZS5wZXJzaXN0ZW5jZSk/dm9pZCAwOnIucHJvcHNbT3RdKXx8W107aWYoXCJzdXJ2ZXkgc2hvd25cIj09PXQmJmkmJnMubGVuZ3RoPjApe3ZhciBuO3puLmluZm8oXCJzdXJ2ZXkgZXZlbnQgbWF0Y2hlZCwgcmVtb3Zpbmcgc3VydmV5IGZyb20gYWN0aXZhdGVkIHN1cnZleXNcIix7ZXZlbnQ6dCxldmVudFBheWxvYWQ6aSxleGlzdGluZ0FjdGl2YXRlZFN1cnZleXM6c30pO3ZhciBvPW51bGw9PWl8fG51bGw9PShuPWkucHJvcGVydGllcyk/dm9pZCAwOm4uJHN1cnZleV9pZDtpZihvKXt2YXIgYT1zLmluZGV4T2Yobyk7YT49MCYmKHMuc3BsaWNlKGEsMSksdGhpcy5HZShzKSl9fWVsc2UgdGhpcy5VZS5oYXModCkmJih6bi5pbmZvKFwic3VydmV5IGV2ZW50IG1hdGNoZWQsIHVwZGF0aW5nIGFjdGl2YXRlZCBzdXJ2ZXlzXCIse2V2ZW50OnQsc3VydmV5czp0aGlzLlVlLmdldCh0KX0pLHRoaXMuR2Uocy5jb25jYXQodGhpcy5VZS5nZXQodCl8fFtdKSkpfW9uQWN0aW9uKHQpe3ZhciBpLGUscj0obnVsbD09KGk9dGhpcy5OKXx8bnVsbD09KGU9aS5wZXJzaXN0ZW5jZSk/dm9pZCAwOmUucHJvcHNbT3RdKXx8W107dGhpcy5xZS5oYXModCkmJnRoaXMuR2Uoci5jb25jYXQodGhpcy5xZS5nZXQodCl8fFtdKSl9R2UodCl7dmFyIGksZTtudWxsPT0oaT10aGlzLk4pfHxudWxsPT0oZT1pLnBlcnNpc3RlbmNlKXx8ZS5yZWdpc3Rlcih7W090XTpbLi4ubmV3IFNldCh0KV19KX1nZXRTdXJ2ZXlzKCl7dmFyIHQsaSxlPW51bGw9PSh0PXRoaXMuTil8fG51bGw9PShpPXQucGVyc2lzdGVuY2UpP3ZvaWQgMDppLnByb3BzW090XTtyZXR1cm4gZXx8W119Z2V0RXZlbnRUb1N1cnZleXMoKXtyZXR1cm4gdGhpcy5VZX1KZSgpe3JldHVybiB0aGlzLldlfX1jbGFzcyBxbntjb25zdHJ1Y3Rvcih0KXt0aGlzLlZlPW51bGwsdGhpcy5LZT0hMSx0aGlzLlllPSExLHRoaXMuWGU9W10sdGhpcy5OPXQsdGhpcy5RZT1udWxsfW9uUmVtb3RlQ29uZmlnKHQpe3ZhciBpPXQuc3VydmV5cztpZihDKGkpKXJldHVybiB6bi53YXJuKFwiRGVjaWRlIG5vdCBsb2FkZWQgeWV0LiBOb3QgbG9hZGluZyBzdXJ2ZXlzLlwiKTt2YXIgZT14KGkpO3RoaXMuWmU9ZT9pLmxlbmd0aD4wOmksem4uaW5mbyhcImRlY2lkZSByZXNwb25zZSByZWNlaXZlZCwgaGFzU3VydmV5czogXCIrdGhpcy5aZSksdGhpcy5aZSYmdGhpcy5sb2FkSWZFbmFibGVkKCl9cmVzZXQoKXtsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImxhc3RTZWVuU3VydmV5RGF0ZVwiKTtmb3IodmFyIHQ9W10saT0wO2k8bG9jYWxTdG9yYWdlLmxlbmd0aDtpKyspe3ZhciBlPWxvY2FsU3RvcmFnZS5rZXkoaSk7bnVsbCE9ZSYmZS5zdGFydHNXaXRoKFwic2VlblN1cnZleV9cIikmJnQucHVzaChlKX10LmZvckVhY2goKHQ9PmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHQpKSl9bG9hZElmRW5hYmxlZCgpe2lmKCF0aGlzLlZlKWlmKHRoaXMuWWUpem4uaW5mbyhcIkFscmVhZHkgaW5pdGlhbGl6aW5nIHN1cnZleXMsIHNraXBwaW5nLi4uXCIpO2Vsc2UgaWYodGhpcy5OLmNvbmZpZy5kaXNhYmxlX3N1cnZleXMpem4uaW5mbyhcIkRpc2FibGVkLiBOb3QgbG9hZGluZyBzdXJ2ZXlzLlwiKTtlbHNlIGlmKHRoaXMuWmUpe3ZhciB0PW51bGw9PWM/dm9pZCAwOmMuX19Qb3N0aG9nRXh0ZW5zaW9uc19fO2lmKHQpe3RoaXMuWWU9ITA7dHJ5e3ZhciBpPXQuZ2VuZXJhdGVTdXJ2ZXlzO2lmKGkpcmV0dXJuIHZvaWQgdGhpcy50cihpKTt2YXIgZT10LmxvYWRFeHRlcm5hbERlcGVuZGVuY3k7aWYoIWUpcmV0dXJuIHZvaWQgdGhpcy5pcihcIlBvc3RIb2cgbG9hZEV4dGVybmFsRGVwZW5kZW5jeSBleHRlbnNpb24gbm90IGZvdW5kLlwiKTtlKHRoaXMuTixcInN1cnZleXNcIiwoaT0+e2l8fCF0LmdlbmVyYXRlU3VydmV5cz90aGlzLmlyKFwiQ291bGQgbm90IGxvYWQgc3VydmV5cyBzY3JpcHRcIixpKTp0aGlzLnRyKHQuZ2VuZXJhdGVTdXJ2ZXlzKX0pKX1jYXRjaCh0KXt0aHJvdyB0aGlzLmlyKFwiRXJyb3IgaW5pdGlhbGl6aW5nIHN1cnZleXNcIix0KSx0fWZpbmFsbHl7dGhpcy5ZZT0hMX19ZWxzZSB6bi5lcnJvcihcIlBvc3RIb2cgRXh0ZW5zaW9ucyBub3QgZm91bmQuXCIpfWVsc2Ugem4uaW5mbyhcIk5vIHN1cnZleXMgdG8gbG9hZC5cIil9dHIodCl7dGhpcy5WZT10KHRoaXMuTiksdGhpcy5RZT1uZXcgVW4odGhpcy5OKSx6bi5pbmZvKFwiU3VydmV5cyBsb2FkZWQgc3VjY2Vzc2Z1bGx5XCIpLHRoaXMuZXIoe2lzTG9hZGVkOiEwfSl9aXIodCxpKXt6bi5lcnJvcih0LGkpLHRoaXMuZXIoe2lzTG9hZGVkOiExLGVycm9yOnR9KX1vblN1cnZleXNMb2FkZWQodCl7cmV0dXJuIHRoaXMuWGUucHVzaCh0KSx0aGlzLlZlJiZ0aGlzLmVyKHtpc0xvYWRlZDohMH0pLCgpPT57dGhpcy5YZT10aGlzLlhlLmZpbHRlcigoaT0+aSE9PXQpKX19Z2V0U3VydmV5cyh0LGkpe2lmKHZvaWQgMD09PWkmJihpPSExKSx0aGlzLk4uY29uZmlnLmRpc2FibGVfc3VydmV5cylyZXR1cm4gem4uaW5mbyhcIkRpc2FibGVkLiBOb3QgbG9hZGluZyBzdXJ2ZXlzLlwiKSx0KFtdKTt2YXIgZT10aGlzLk4uZ2V0X3Byb3BlcnR5KE10KTtpZihlJiYhaSlyZXR1cm4gdChlLHtpc0xvYWRlZDohMH0pO2lmKHRoaXMuS2UpcmV0dXJuIHQoW10se2lzTG9hZGVkOiExLGVycm9yOlwiU3VydmV5cyBhcmUgYWxyZWFkeSBiZWluZyBsb2FkZWRcIn0pO3RyeXt0aGlzLktlPSEwLHRoaXMuTi5wZSh7dXJsOnRoaXMuTi5yZXF1ZXN0Um91dGVyLmVuZHBvaW50Rm9yKFwiYXBpXCIsXCIvYXBpL3N1cnZleXMvP3Rva2VuPVwiK3RoaXMuTi5jb25maWcudG9rZW4pLG1ldGhvZDpcIkdFVFwiLHRpbWVvdXQ6dGhpcy5OLmNvbmZpZy5zdXJ2ZXlzX3JlcXVlc3RfdGltZW91dF9tcyxjYWxsYmFjazppPT57dmFyIGU7dGhpcy5LZT0hMTt2YXIgcj1pLnN0YXR1c0NvZGU7aWYoMjAwIT09cnx8IWkuanNvbil7dmFyIHM9XCJTdXJ2ZXlzIEFQSSBjb3VsZCBub3QgYmUgbG9hZGVkLCBzdGF0dXM6IFwiK3I7cmV0dXJuIHpuLmVycm9yKHMpLHQoW10se2lzTG9hZGVkOiExLGVycm9yOnN9KX12YXIgbixvPWkuanNvbi5zdXJ2ZXlzfHxbXSxhPW8uZmlsdGVyKCh0PT5mdW5jdGlvbih0KXtyZXR1cm4hKCF0LnN0YXJ0X2RhdGV8fHQuZW5kX2RhdGUpfSh0KSYmKGZ1bmN0aW9uKHQpe3ZhciBpLGUscjtyZXR1cm4hKG51bGw9PShpPXQuY29uZGl0aW9ucyl8fG51bGw9PShlPWkuZXZlbnRzKXx8bnVsbD09KHI9ZS52YWx1ZXMpfHwhci5sZW5ndGgpfSh0KXx8ZnVuY3Rpb24odCl7dmFyIGksZSxyO3JldHVybiEobnVsbD09KGk9dC5jb25kaXRpb25zKXx8bnVsbD09KGU9aS5hY3Rpb25zKXx8bnVsbD09KHI9ZS52YWx1ZXMpfHwhci5sZW5ndGgpfSh0KSkpKTthLmxlbmd0aD4wJiYobnVsbD09KG49dGhpcy5RZSl8fG4ucmVnaXN0ZXIoYSkpO3JldHVybiBudWxsPT0oZT10aGlzLk4ucGVyc2lzdGVuY2UpfHxlLnJlZ2lzdGVyKHtbTXRdOm99KSx0KG8se2lzTG9hZGVkOiEwfSl9fSl9Y2F0Y2godCl7dGhyb3cgdGhpcy5LZT0hMSx0fX1lcih0KXtmb3IodmFyIGkgb2YgdGhpcy5YZSl0cnl7dC5pc0xvYWRlZD90aGlzLmdldFN1cnZleXMoaSk6aShbXSx0KX1jYXRjaCh0KXt6bi5lcnJvcihcIkVycm9yIGluIHN1cnZleSBjYWxsYmFja1wiLHQpfX1nZXRBY3RpdmVNYXRjaGluZ1N1cnZleXModCxpKXtpZih2b2lkIDA9PT1pJiYoaT0hMSksIUModGhpcy5WZSkpcmV0dXJuIHRoaXMuVmUuZ2V0QWN0aXZlTWF0Y2hpbmdTdXJ2ZXlzKHQsaSk7em4ud2FybihcImluaXQgd2FzIG5vdCBjYWxsZWRcIil9cnIodCl7dmFyIGk9bnVsbDtyZXR1cm4gdGhpcy5nZXRTdXJ2ZXlzKChlPT57dmFyIHI7aT1udWxsIT09KHI9ZS5maW5kKChpPT5pLmlkPT09dCkpKSYmdm9pZCAwIT09cj9yOm51bGx9KSksaX1zcih0KXtpZihDKHRoaXMuVmUpKXJldHVybntlbGlnaWJsZTohMSxyZWFzb246XCJTREsgaXMgbm90IGVuYWJsZWQgb3Igc3VydmV5IGZ1bmN0aW9uYWxpdHkgaXMgbm90IHlldCBsb2FkZWRcIn07dmFyIGk9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dGhpcy5ycih0KTp0O3JldHVybiBpP3RoaXMuVmUuY2hlY2tTdXJ2ZXlFbGlnaWJpbGl0eShpKTp7ZWxpZ2libGU6ITEscmVhc29uOlwiU3VydmV5IG5vdCBmb3VuZFwifX1jYW5SZW5kZXJTdXJ2ZXkodCl7aWYoIUModGhpcy5WZSkpcmV0dXJuIHpuLndhcm4oXCJpbml0IHdhcyBub3QgY2FsbGVkXCIpLHt2aXNpYmxlOiExLGRpc2FibGVkUmVhc29uOlwiU0RLIGlzIG5vdCBlbmFibGVkIG9yIHN1cnZleSBmdW5jdGlvbmFsaXR5IGlzIG5vdCB5ZXQgbG9hZGVkXCJ9O3ZhciBpPXRoaXMuc3IodCk7cmV0dXJue3Zpc2libGU6aS5lbGlnaWJsZSxkaXNhYmxlZFJlYXNvbjppLnJlYXNvbn19Y2FuUmVuZGVyU3VydmV5QXN5bmModCxpKXtyZXR1cm4gQyh0aGlzLlZlKT8oem4ud2FybihcImluaXQgd2FzIG5vdCBjYWxsZWRcIiksUHJvbWlzZS5yZXNvbHZlKHt2aXNpYmxlOiExLGRpc2FibGVkUmVhc29uOlwiU0RLIGlzIG5vdCBlbmFibGVkIG9yIHN1cnZleSBmdW5jdGlvbmFsaXR5IGlzIG5vdCB5ZXQgbG9hZGVkXCJ9KSk6bmV3IFByb21pc2UoKGU9Pnt0aGlzLmdldFN1cnZleXMoKGk9Pnt2YXIgcixzPW51bGwhPT0ocj1pLmZpbmQoKGk9PmkuaWQ9PT10KSkpJiZ2b2lkIDAhPT1yP3I6bnVsbDtpZihzKXt2YXIgbj10aGlzLnNyKHMpO2Uoe3Zpc2libGU6bi5lbGlnaWJsZSxkaXNhYmxlZFJlYXNvbjpuLnJlYXNvbn0pfWVsc2UgZSh7dmlzaWJsZTohMSxkaXNhYmxlZFJlYXNvbjpcIlN1cnZleSBub3QgZm91bmRcIn0pfSksaSl9KSl9cmVuZGVyU3VydmV5KHQsaSl7aWYoQyh0aGlzLlZlKSl6bi53YXJuKFwiaW5pdCB3YXMgbm90IGNhbGxlZFwiKTtlbHNle3ZhciBlPXRoaXMucnIodCkscj1udWxsPT1hP3ZvaWQgMDphLnF1ZXJ5U2VsZWN0b3IoaSk7ZT9yP3RoaXMuVmUucmVuZGVyU3VydmV5KGUscik6em4ud2FybihcIlN1cnZleSBlbGVtZW50IG5vdCBmb3VuZFwiKTp6bi53YXJuKFwiU3VydmV5IG5vdCBmb3VuZFwiKX19fXZhciBCbj16KFwiW1JhdGVMaW1pdGVyXVwiKTtjbGFzcyBIbntjb25zdHJ1Y3Rvcih0KXt2YXIgaSxlO3RoaXMuc2VydmVyTGltaXRzPXt9LHRoaXMubGFzdEV2ZW50UmF0ZUxpbWl0ZWQ9ITEsdGhpcy5jaGVja0ZvckxpbWl0aW5nPXQ9Pnt2YXIgaT10LnRleHQ7aWYoaSYmaS5sZW5ndGgpdHJ5eyhKU09OLnBhcnNlKGkpLnF1b3RhX2xpbWl0ZWR8fFtdKS5mb3JFYWNoKCh0PT57Qm4uaW5mbygodHx8XCJldmVudHNcIikrXCIgaXMgcXVvdGEgbGltaXRlZC5cIiksdGhpcy5zZXJ2ZXJMaW1pdHNbdF09KG5ldyBEYXRlKS5nZXRUaW1lKCkrNmU0fSkpfWNhdGNoKHQpe3JldHVybiB2b2lkIEJuLndhcm4oJ2NvdWxkIG5vdCByYXRlIGxpbWl0IC0gY29udGludWluZy4gRXJyb3I6IFwiJysobnVsbD09dD92b2lkIDA6dC5tZXNzYWdlKSsnXCInLHt0ZXh0Oml9KX19LHRoaXMuaW5zdGFuY2U9dCx0aGlzLmNhcHR1cmVFdmVudHNQZXJTZWNvbmQ9KG51bGw9PShpPXQuY29uZmlnLnJhdGVfbGltaXRpbmcpP3ZvaWQgMDppLmV2ZW50c19wZXJfc2Vjb25kKXx8MTAsdGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdD1NYXRoLm1heCgobnVsbD09KGU9dC5jb25maWcucmF0ZV9saW1pdGluZyk/dm9pZCAwOmUuZXZlbnRzX2J1cnN0X2xpbWl0KXx8MTAqdGhpcy5jYXB0dXJlRXZlbnRzUGVyU2Vjb25kLHRoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCksdGhpcy5sYXN0RXZlbnRSYXRlTGltaXRlZD10aGlzLmNsaWVudFJhdGVMaW1pdENvbnRleHQoITApLmlzUmF0ZUxpbWl0ZWR9Y2xpZW50UmF0ZUxpbWl0Q29udGV4dCh0KXt2YXIgaSxlLHI7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciBzPShuZXcgRGF0ZSkuZ2V0VGltZSgpLG49bnVsbCE9PShpPW51bGw9PShlPXRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UpP3ZvaWQgMDplLmdldF9wcm9wZXJ0eShEdCkpJiZ2b2lkIDAhPT1pP2k6e3Rva2Vuczp0aGlzLmNhcHR1cmVFdmVudHNCdXJzdExpbWl0LGxhc3Q6c307bi50b2tlbnMrPShzLW4ubGFzdCkvMWUzKnRoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCxuLmxhc3Q9cyxuLnRva2Vucz50aGlzLmNhcHR1cmVFdmVudHNCdXJzdExpbWl0JiYobi50b2tlbnM9dGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdCk7dmFyIG89bi50b2tlbnM8MTtyZXR1cm4gb3x8dHx8KG4udG9rZW5zPU1hdGgubWF4KDAsbi50b2tlbnMtMSkpLCFvfHx0aGlzLmxhc3RFdmVudFJhdGVMaW1pdGVkfHx0fHx0aGlzLmluc3RhbmNlLmNhcHR1cmUoXCIkJGNsaWVudF9pbmdlc3Rpb25fd2FybmluZ1wiLHskJGNsaWVudF9pbmdlc3Rpb25fd2FybmluZ19tZXNzYWdlOlwicG9zdGhvZy1qcyBjbGllbnQgcmF0ZSBsaW1pdGVkLiBDb25maWcgaXMgc2V0IHRvIFwiK3RoaXMuY2FwdHVyZUV2ZW50c1BlclNlY29uZCtcIiBldmVudHMgcGVyIHNlY29uZCBhbmQgXCIrdGhpcy5jYXB0dXJlRXZlbnRzQnVyc3RMaW1pdCtcIiBldmVudHMgYnVyc3QgbGltaXQuXCJ9LHtza2lwX2NsaWVudF9yYXRlX2xpbWl0aW5nOiEwfSksdGhpcy5sYXN0RXZlbnRSYXRlTGltaXRlZD1vLG51bGw9PShyPXRoaXMuaW5zdGFuY2UucGVyc2lzdGVuY2UpfHxyLnNldF9wcm9wZXJ0eShEdCxuKSx7aXNSYXRlTGltaXRlZDpvLHJlbWFpbmluZ1Rva2VuczpuLnRva2Vuc319aXNTZXJ2ZXJSYXRlTGltaXRlZCh0KXt2YXIgaT10aGlzLnNlcnZlckxpbWl0c1t0fHxcImV2ZW50c1wiXXx8ITE7cmV0dXJuITEhPT1pJiYobmV3IERhdGUpLmdldFRpbWUoKTxpfX12YXIgV249eihcIltSZW1vdGVDb25maWddXCIpO2NsYXNzIEdue2NvbnN0cnVjdG9yKHQpe3RoaXMuTj10fWdldCByZW1vdGVDb25maWcoKXt2YXIgdCxpO3JldHVybiBudWxsPT0odD1jLl9QT1NUSE9HX1JFTU9URV9DT05GSUcpfHxudWxsPT0oaT10W3RoaXMuTi5jb25maWcudG9rZW5dKT92b2lkIDA6aS5jb25maWd9bnIodCl7dmFyIGksZTtudWxsIT0oaT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXykmJmkubG9hZEV4dGVybmFsRGVwZW5kZW5jeT9udWxsPT0oZT1jLl9fUG9zdGhvZ0V4dGVuc2lvbnNfXyl8fG51bGw9PWUubG9hZEV4dGVybmFsRGVwZW5kZW5jeXx8ZS5sb2FkRXh0ZXJuYWxEZXBlbmRlbmN5KHRoaXMuTixcInJlbW90ZS1jb25maWdcIiwoKCk9PnQodGhpcy5yZW1vdGVDb25maWcpKSk6KFduLmVycm9yKFwiUG9zdEhvZyBFeHRlbnNpb25zIG5vdCBmb3VuZC4gQ2Fubm90IGxvYWQgcmVtb3RlIGNvbmZpZy5cIiksdCgpKX1hcih0KXt0aGlzLk4ucGUoe21ldGhvZDpcIkdFVFwiLHVybDp0aGlzLk4ucmVxdWVzdFJvdXRlci5lbmRwb2ludEZvcihcImFzc2V0c1wiLFwiL2FycmF5L1wiK3RoaXMuTi5jb25maWcudG9rZW4rXCIvY29uZmlnXCIpLGNhbGxiYWNrOmk9Pnt0KGkuanNvbil9fSl9bG9hZCgpe3RyeXtpZih0aGlzLnJlbW90ZUNvbmZpZylyZXR1cm4gV24uaW5mbyhcIlVzaW5nIHByZWxvYWRlZCByZW1vdGUgY29uZmlnXCIsdGhpcy5yZW1vdGVDb25maWcpLHZvaWQgdGhpcy5nZSh0aGlzLnJlbW90ZUNvbmZpZyk7aWYodGhpcy5OLmNvbmZpZy5hZHZhbmNlZF9kaXNhYmxlX2RlY2lkZSlyZXR1cm4gdm9pZCBXbi53YXJuKFwiUmVtb3RlIGNvbmZpZyBpcyBkaXNhYmxlZC4gRmFsbGluZyBiYWNrIHRvIGxvY2FsIGNvbmZpZy5cIik7dGhpcy5ucigodD0+e2lmKCF0KXJldHVybiBXbi5pbmZvKFwiTm8gY29uZmlnIGZvdW5kIGFmdGVyIGxvYWRpbmcgcmVtb3RlIEpTIGNvbmZpZy4gRmFsbGluZyBiYWNrIHRvIEpTT04uXCIpLHZvaWQgdGhpcy5hcigodD0+e3RoaXMuZ2UodCl9KSk7dGhpcy5nZSh0KX0pKX1jYXRjaCh0KXtXbi5lcnJvcihcIkVycm9yIGxvYWRpbmcgcmVtb3RlIGNvbmZpZ1wiLHQpfX1nZSh0KXt0P3RoaXMuTi5jb25maWcuX19wcmV2aWV3X3JlbW90ZV9jb25maWc/KHRoaXMuTi5nZSh0KSwhMSE9PXQuaGFzRmVhdHVyZUZsYWdzJiZ0aGlzLk4uZmVhdHVyZUZsYWdzLmVuc3VyZUZsYWdzTG9hZGVkKCkpOlduLmluZm8oXCJfX3ByZXZpZXdfcmVtb3RlX2NvbmZpZyBpcyBkaXNhYmxlZC4gTG9nZ2luZyBjb25maWcgaW5zdGVhZFwiLHQpOlduLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHJlbW90ZSBjb25maWcgZnJvbSBQb3N0SG9nLlwiKX19dmFyIEpuPWZ1bmN0aW9uKHQpe3ZhciBpLGUscixzLG49XCJcIjtmb3IoaT1lPTAscj0odD0odCtcIlwiKS5yZXBsYWNlKC9cXHJcXG4vZyxcIlxcblwiKS5yZXBsYWNlKC9cXHIvZyxcIlxcblwiKSkubGVuZ3RoLHM9MDtzPHI7cysrKXt2YXIgbz10LmNoYXJDb2RlQXQocyksYT1udWxsO288MTI4P2UrKzphPW8+MTI3JiZvPDIwNDg/U3RyaW5nLmZyb21DaGFyQ29kZShvPj42fDE5Miw2MyZvfDEyOCk6U3RyaW5nLmZyb21DaGFyQ29kZShvPj4xMnwyMjQsbz4+NiY2M3wxMjgsNjMmb3wxMjgpLE8oYSl8fChlPmkmJihuKz10LnN1YnN0cmluZyhpLGUpKSxuKz1hLGk9ZT1zKzEpfXJldHVybiBlPmkmJihuKz10LnN1YnN0cmluZyhpLHQubGVuZ3RoKSksbn0sVm49ISFofHwhIXUsS249XCJ0ZXh0L3BsYWluXCIsWW49KHQsaSk9Pnt2YXJbZSxyXT10LnNwbGl0KFwiP1wiKSxzPUIoe30saSk7bnVsbD09cnx8ci5zcGxpdChcIiZcIikuZm9yRWFjaCgodD0+e3ZhcltpXT10LnNwbGl0KFwiPVwiKTtkZWxldGUgc1tpXX0pKTt2YXIgbj15aShzKTtyZXR1cm4gZStcIj9cIisobj1uPyhyP3IrXCImXCI6XCJcIikrbjpyKX0sWG49KHQsaSk9PkpTT04uc3RyaW5naWZ5KHQsKCh0LGkpPT5cImJpZ2ludFwiPT10eXBlb2YgaT9pLnRvU3RyaW5nKCk6aSksaSksUW49aT0+e3ZhcntkYXRhOmUsY29tcHJlc3Npb246cn09aTtpZihlKXtpZihyPT09dC5HWmlwSlMpe3ZhciBzPUFyKERyKFhuKGUpKSx7bXRpbWU6MH0pLG49bmV3IEJsb2IoW3NdLHt0eXBlOktufSk7cmV0dXJue2NvbnRlbnRUeXBlOktuLGJvZHk6bixlc3RpbWF0ZWRTaXplOm4uc2l6ZX19aWYocj09PXQuQmFzZTY0KXt2YXIgbz1mdW5jdGlvbih0KXt2YXIgaSxlLHIscyxuLG89XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLGE9MCxsPTAsdT1cIlwiLGg9W107aWYoIXQpcmV0dXJuIHQ7dD1Kbih0KTtkb3tpPShuPXQuY2hhckNvZGVBdChhKyspPDwxNnx0LmNoYXJDb2RlQXQoYSsrKTw8OHx0LmNoYXJDb2RlQXQoYSsrKSk+PjE4JjYzLGU9bj4+MTImNjMscj1uPj42JjYzLHM9NjMmbixoW2wrK109by5jaGFyQXQoaSkrby5jaGFyQXQoZSkrby5jaGFyQXQocikrby5jaGFyQXQocyl9d2hpbGUoYTx0Lmxlbmd0aCk7c3dpdGNoKHU9aC5qb2luKFwiXCIpLHQubGVuZ3RoJTMpe2Nhc2UgMTp1PXUuc2xpY2UoMCwtMikrXCI9PVwiO2JyZWFrO2Nhc2UgMjp1PXUuc2xpY2UoMCwtMSkrXCI9XCJ9cmV0dXJuIHV9KFhuKGUpKSxhPSh0PT5cImRhdGE9XCIrZW5jb2RlVVJJQ29tcG9uZW50KFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6WG4odCkpKShvKTtyZXR1cm57Y29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixib2R5OmEsZXN0aW1hdGVkU2l6ZTpuZXcgQmxvYihbYV0pLnNpemV9fXZhciBsPVhuKGUpO3JldHVybntjb250ZW50VHlwZTpcImFwcGxpY2F0aW9uL2pzb25cIixib2R5OmwsZXN0aW1hdGVkU2l6ZTpuZXcgQmxvYihbbF0pLnNpemV9fX0sWm49W107dSYmWm4ucHVzaCh7dHJhbnNwb3J0OlwiZmV0Y2hcIixtZXRob2Q6dD0+e3ZhciBpLGUse2NvbnRlbnRUeXBlOnIsYm9keTpzLGVzdGltYXRlZFNpemU6bn09bnVsbCE9PShpPVFuKHQpKSYmdm9pZCAwIT09aT9pOnt9LG89bmV3IEhlYWRlcnM7Sih0LmhlYWRlcnMsKGZ1bmN0aW9uKHQsaSl7by5hcHBlbmQoaSx0KX0pKSxyJiZvLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLHIpO3ZhciBhPXQudXJsLGw9bnVsbDtpZihkKXt2YXIgaD1uZXcgZDtsPXtzaWduYWw6aC5zaWduYWwsdGltZW91dDpzZXRUaW1lb3V0KCgoKT0+aC5hYm9ydCgpKSx0LnRpbWVvdXQpfX11KGEsQih7bWV0aG9kOihudWxsPT10P3ZvaWQgMDp0Lm1ldGhvZCl8fFwiR0VUXCIsaGVhZGVyczpvLGtlZXBhbGl2ZTpcIlBPU1RcIj09PXQubWV0aG9kJiYobnx8MCk8NTI0MjguOCxib2R5OnMsc2lnbmFsOm51bGw9PShlPWwpP3ZvaWQgMDplLnNpZ25hbH0sdC5mZXRjaE9wdGlvbnMpKS50aGVuKChpPT5pLnRleHQoKS50aGVuKChlPT57dmFyIHI9e3N0YXR1c0NvZGU6aS5zdGF0dXMsdGV4dDplfTtpZigyMDA9PT1pLnN0YXR1cyl0cnl7ci5qc29uPUpTT04ucGFyc2UoZSl9Y2F0Y2godCl7Ti5lcnJvcih0KX1udWxsPT10LmNhbGxiYWNrfHx0LmNhbGxiYWNrKHIpfSkpKSkuY2F0Y2goKGk9PntOLmVycm9yKGkpLG51bGw9PXQuY2FsbGJhY2t8fHQuY2FsbGJhY2soe3N0YXR1c0NvZGU6MCx0ZXh0Oml9KX0pKS5maW5hbGx5KCgoKT0+bD9jbGVhclRpbWVvdXQobC50aW1lb3V0KTpudWxsKSl9fSksaCYmWm4ucHVzaCh7dHJhbnNwb3J0OlwiWEhSXCIsbWV0aG9kOnQ9Pnt2YXIgaSxlPW5ldyBoO2Uub3Blbih0Lm1ldGhvZHx8XCJHRVRcIix0LnVybCwhMCk7dmFye2NvbnRlbnRUeXBlOnIsYm9keTpzfT1udWxsIT09KGk9UW4odCkpJiZ2b2lkIDAhPT1pP2k6e307Sih0LmhlYWRlcnMsKGZ1bmN0aW9uKHQsaSl7ZS5zZXRSZXF1ZXN0SGVhZGVyKGksdCl9KSksciYmZS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsciksdC50aW1lb3V0JiYoZS50aW1lb3V0PXQudGltZW91dCksZS53aXRoQ3JlZGVudGlhbHM9ITAsZS5vbnJlYWR5c3RhdGVjaGFuZ2U9KCk9PntpZig0PT09ZS5yZWFkeVN0YXRlKXt2YXIgaT17c3RhdHVzQ29kZTplLnN0YXR1cyx0ZXh0OmUucmVzcG9uc2VUZXh0fTtpZigyMDA9PT1lLnN0YXR1cyl0cnl7aS5qc29uPUpTT04ucGFyc2UoZS5yZXNwb25zZVRleHQpfWNhdGNoKHQpe31udWxsPT10LmNhbGxiYWNrfHx0LmNhbGxiYWNrKGkpfX0sZS5zZW5kKHMpfX0pLG51bGwhPW8mJm8uc2VuZEJlYWNvbiYmWm4ucHVzaCh7dHJhbnNwb3J0Olwic2VuZEJlYWNvblwiLG1ldGhvZDp0PT57dmFyIGk9WW4odC51cmwse2JlYWNvbjpcIjFcIn0pO3RyeXt2YXIgZSx7Y29udGVudFR5cGU6cixib2R5OnN9PW51bGwhPT0oZT1Rbih0KSkmJnZvaWQgMCE9PWU/ZTp7fSxuPVwic3RyaW5nXCI9PXR5cGVvZiBzP25ldyBCbG9iKFtzXSx7dHlwZTpyfSk6cztvLnNlbmRCZWFjb24oaSxuKX1jYXRjaCh0KXt9fX0pO3ZhciB0bz0zZTM7Y2xhc3MgaW97Y29uc3RydWN0b3IodCxpKXt0aGlzLmxyPSEwLHRoaXMudXI9W10sdGhpcy5ocj1YZSgobnVsbD09aT92b2lkIDA6aS5mbHVzaF9pbnRlcnZhbF9tcyl8fHRvLDI1MCw1ZTMsXCJmbHVzaCBpbnRlcnZhbFwiLHRvKSx0aGlzLmRyPXR9ZW5xdWV1ZSh0KXt0aGlzLnVyLnB1c2godCksdGhpcy52cnx8dGhpcy5jcigpfXVubG9hZCgpe3RoaXMucHIoKTt2YXIgdD10aGlzLnVyLmxlbmd0aD4wP3RoaXMuZ3IoKTp7fSxpPU9iamVjdC52YWx1ZXModCk7Wy4uLmkuZmlsdGVyKCh0PT4wPT09dC51cmwuaW5kZXhPZihcIi9lXCIpKSksLi4uaS5maWx0ZXIoKHQ9PjAhPT10LnVybC5pbmRleE9mKFwiL2VcIikpKV0ubWFwKCh0PT57dGhpcy5kcihCKHt9LHQse3RyYW5zcG9ydDpcInNlbmRCZWFjb25cIn0pKX0pKX1lbmFibGUoKXt0aGlzLmxyPSExLHRoaXMuY3IoKX1jcigpe3ZhciB0PXRoaXM7dGhpcy5scnx8KHRoaXMudnI9c2V0VGltZW91dCgoKCk9PntpZih0aGlzLnByKCksdGhpcy51ci5sZW5ndGg+MCl7dmFyIGk9dGhpcy5ncigpLGU9ZnVuY3Rpb24oZSl7dmFyIHI9aVtlXSxzPShuZXcgRGF0ZSkuZ2V0VGltZSgpO3IuZGF0YSYmeChyLmRhdGEpJiZKKHIuZGF0YSwodD0+e3Qub2Zmc2V0PU1hdGguYWJzKHQudGltZXN0YW1wLXMpLGRlbGV0ZSB0LnRpbWVzdGFtcH0pKSx0LmRyKHIpfTtmb3IodmFyIHIgaW4gaSllKHIpfX0pLHRoaXMuaHIpKX1wcigpe2NsZWFyVGltZW91dCh0aGlzLnZyKSx0aGlzLnZyPXZvaWQgMH1ncigpe3ZhciB0PXt9O3JldHVybiBKKHRoaXMudXIsKGk9Pnt2YXIgZSxyPWkscz0ocj9yLmJhdGNoS2V5Om51bGwpfHxyLnVybDtSKHRbc10pJiYodFtzXT1CKHt9LHIse2RhdGE6W119KSksbnVsbD09KGU9dFtzXS5kYXRhKXx8ZS5wdXNoKHIuZGF0YSl9KSksdGhpcy51cj1bXSx0fX12YXIgZW89W1wicmV0cmllc1BlcmZvcm1lZFNvRmFyXCJdO2NsYXNzIHJve2NvbnN0cnVjdG9yKHQpe3RoaXMuX3I9ITEsdGhpcy5tcj0zZTMsdGhpcy51cj1bXSx0aGlzLk49dCx0aGlzLnVyPVtdLHRoaXMuYnI9ITAsIVIoaSkmJlwib25MaW5lXCJpbiBpLm5hdmlnYXRvciYmKHRoaXMuYnI9aS5uYXZpZ2F0b3Iub25MaW5lLHN0KGksXCJvbmxpbmVcIiwoKCk9Pnt0aGlzLmJyPSEwLHRoaXMuS2koKX0pKSxzdChpLFwib2ZmbGluZVwiLCgoKT0+e3RoaXMuYnI9ITF9KSkpfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy51ci5sZW5ndGh9cmV0cmlhYmxlUmVxdWVzdCh0KXt2YXJ7cmV0cmllc1BlcmZvcm1lZFNvRmFyOml9PXQsZT1IKHQsZW8pO0YoaSkmJmk+MCYmKGUudXJsPVluKGUudXJsLHtyZXRyeV9jb3VudDppfSkpLHRoaXMuTi5wZShCKHt9LGUse2NhbGxiYWNrOnQ9PnsyMDAhPT10LnN0YXR1c0NvZGUmJih0LnN0YXR1c0NvZGU8NDAwfHx0LnN0YXR1c0NvZGU+PTUwMCkmJihudWxsIT1pP2k6MCk8MTA/dGhpcy53cihCKHtyZXRyaWVzUGVyZm9ybWVkU29GYXI6aX0sZSkpOm51bGw9PWUuY2FsbGJhY2t8fGUuY2FsbGJhY2sodCl9fSkpfXdyKHQpe3ZhciBpPXQucmV0cmllc1BlcmZvcm1lZFNvRmFyfHwwO3QucmV0cmllc1BlcmZvcm1lZFNvRmFyPWkrMTt2YXIgZT1mdW5jdGlvbih0KXt2YXIgaT0zZTMqTWF0aC5wb3coMix0KSxlPWkvMixyPU1hdGgubWluKDE4ZTUsaSkscz0oTWF0aC5yYW5kb20oKS0uNSkqKHItZSk7cmV0dXJuIE1hdGguY2VpbChyK3MpfShpKSxyPURhdGUubm93KCkrZTt0aGlzLnVyLnB1c2goe3JldHJ5QXQ6cixyZXF1ZXN0T3B0aW9uczp0fSk7dmFyIHM9XCJFbnF1ZXVlZCBmYWlsZWQgcmVxdWVzdCBmb3IgcmV0cnkgaW4gXCIrZTtuYXZpZ2F0b3Iub25MaW5lfHwocys9XCIgKEJyb3dzZXIgaXMgb2ZmbGluZSlcIiksTi53YXJuKHMpLHRoaXMuX3J8fCh0aGlzLl9yPSEwLHRoaXMueXIoKSl9eXIoKXt0aGlzLlNyJiZjbGVhclRpbWVvdXQodGhpcy5TciksdGhpcy5Tcj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMuYnImJnRoaXMudXIubGVuZ3RoPjAmJnRoaXMuS2koKSx0aGlzLnlyKCl9KSx0aGlzLm1yKX1LaSgpe3ZhciB0PURhdGUubm93KCksaT1bXSxlPXRoaXMudXIuZmlsdGVyKChlPT5lLnJldHJ5QXQ8dHx8KGkucHVzaChlKSwhMSkpKTtpZih0aGlzLnVyPWksZS5sZW5ndGg+MClmb3IodmFye3JlcXVlc3RPcHRpb25zOnJ9b2YgZSl0aGlzLnJldHJpYWJsZVJlcXVlc3Qocil9dW5sb2FkKCl7Zm9yKHZhcntyZXF1ZXN0T3B0aW9uczp0fW9mKHRoaXMuU3ImJihjbGVhclRpbWVvdXQodGhpcy5TciksdGhpcy5Tcj12b2lkIDApLHRoaXMudXIpKXRyeXt0aGlzLk4ucGUoQih7fSx0LHt0cmFuc3BvcnQ6XCJzZW5kQmVhY29uXCJ9KSl9Y2F0Y2godCl7Ti5lcnJvcih0KX10aGlzLnVyPVtdfX1jbGFzcyBzb3tjb25zdHJ1Y3Rvcih0KXt0aGlzLiRyPSgpPT57dmFyIHQsaSxlLHI7dGhpcy5rcnx8KHRoaXMua3I9e30pO3ZhciBzPXRoaXMuc2Nyb2xsRWxlbWVudCgpLG49dGhpcy5zY3JvbGxZKCksbz1zP01hdGgubWF4KDAscy5zY3JvbGxIZWlnaHQtcy5jbGllbnRIZWlnaHQpOjAsYT1uKygobnVsbD09cz92b2lkIDA6cy5jbGllbnRIZWlnaHQpfHwwKSxsPShudWxsPT1zP3ZvaWQgMDpzLnNjcm9sbEhlaWdodCl8fDA7dGhpcy5rci5sYXN0U2Nyb2xsWT1NYXRoLmNlaWwobiksdGhpcy5rci5tYXhTY3JvbGxZPU1hdGgubWF4KG4sbnVsbCE9PSh0PXRoaXMua3IubWF4U2Nyb2xsWSkmJnZvaWQgMCE9PXQ/dDowKSx0aGlzLmtyLm1heFNjcm9sbEhlaWdodD1NYXRoLm1heChvLG51bGwhPT0oaT10aGlzLmtyLm1heFNjcm9sbEhlaWdodCkmJnZvaWQgMCE9PWk/aTowKSx0aGlzLmtyLmxhc3RDb250ZW50WT1hLHRoaXMua3IubWF4Q29udGVudFk9TWF0aC5tYXgoYSxudWxsIT09KGU9dGhpcy5rci5tYXhDb250ZW50WSkmJnZvaWQgMCE9PWU/ZTowKSx0aGlzLmtyLm1heENvbnRlbnRIZWlnaHQ9TWF0aC5tYXgobCxudWxsIT09KHI9dGhpcy5rci5tYXhDb250ZW50SGVpZ2h0KSYmdm9pZCAwIT09cj9yOjApfSx0aGlzLk49dH1nZXRDb250ZXh0KCl7cmV0dXJuIHRoaXMua3J9cmVzZXRDb250ZXh0KCl7dmFyIHQ9dGhpcy5rcjtyZXR1cm4gc2V0VGltZW91dCh0aGlzLiRyLDApLHR9c3RhcnRNZWFzdXJpbmdTY3JvbGxQb3NpdGlvbigpe3N0KGksXCJzY3JvbGxcIix0aGlzLiRyLHtjYXB0dXJlOiEwfSksc3QoaSxcInNjcm9sbGVuZFwiLHRoaXMuJHIse2NhcHR1cmU6ITB9KSxzdChpLFwicmVzaXplXCIsdGhpcy4kcil9c2Nyb2xsRWxlbWVudCgpe2lmKCF0aGlzLk4uY29uZmlnLnNjcm9sbF9yb290X3NlbGVjdG9yKXJldHVybiBudWxsPT1pP3ZvaWQgMDppLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDt2YXIgdD14KHRoaXMuTi5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3IpP3RoaXMuTi5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3I6W3RoaXMuTi5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3JdO2Zvcih2YXIgZSBvZiB0KXt2YXIgcj1udWxsPT1pP3ZvaWQgMDppLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSk7aWYocilyZXR1cm4gcn19c2Nyb2xsWSgpe2lmKHRoaXMuTi5jb25maWcuc2Nyb2xsX3Jvb3Rfc2VsZWN0b3Ipe3ZhciB0PXRoaXMuc2Nyb2xsRWxlbWVudCgpO3JldHVybiB0JiZ0LnNjcm9sbFRvcHx8MH1yZXR1cm4gaSYmKGkuc2Nyb2xsWXx8aS5wYWdlWU9mZnNldHx8aS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wKXx8MH1zY3JvbGxYKCl7aWYodGhpcy5OLmNvbmZpZy5zY3JvbGxfcm9vdF9zZWxlY3Rvcil7dmFyIHQ9dGhpcy5zY3JvbGxFbGVtZW50KCk7cmV0dXJuIHQmJnQuc2Nyb2xsTGVmdHx8MH1yZXR1cm4gaSYmKGkuc2Nyb2xsWHx8aS5wYWdlWE9mZnNldHx8aS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCl8fDB9fXZhciBubz10PT53bihudWxsPT10P3ZvaWQgMDp0LmNvbmZpZy5tYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyxudWxsPT10P3ZvaWQgMDp0LmNvbmZpZy5jdXN0b21fcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzKTtjbGFzcyBvb3tjb25zdHJ1Y3Rvcih0LGksZSxyKXt0aGlzLkVyPXQ9Pnt2YXIgaT10aGlzLklyKCk7aWYoIWl8fGkuc2Vzc2lvbklkIT09dCl7dmFyIGU9e3Nlc3Npb25JZDp0LHByb3BzOnRoaXMuUHIodGhpcy5OKX07dGhpcy5Sci5yZWdpc3Rlcih7W0F0XTplfSl9fSx0aGlzLk49dCx0aGlzLlRyPWksdGhpcy5Scj1lLHRoaXMuUHI9cnx8bm8sdGhpcy5Uci5vblNlc3Npb25JZCh0aGlzLkVyKX1Jcigpe3JldHVybiB0aGlzLlJyLnByb3BzW0F0XX1nZXRTZXRPbmNlUHJvcHMoKXt2YXIgdCxpPW51bGw9PSh0PXRoaXMuSXIoKSk/dm9pZCAwOnQucHJvcHM7cmV0dXJuIGk/XCJyXCJpbiBpP3luKGkpOnskcmVmZXJyaW5nX2RvbWFpbjppLnJlZmVycmluZ0RvbWFpbiwkcGF0aG5hbWU6aS5pbml0aWFsUGF0aE5hbWUsdXRtX3NvdXJjZTppLnV0bV9zb3VyY2UsdXRtX2NhbXBhaWduOmkudXRtX2NhbXBhaWduLHV0bV9tZWRpdW06aS51dG1fbWVkaXVtLHV0bV9jb250ZW50OmkudXRtX2NvbnRlbnQsdXRtX3Rlcm06aS51dG1fdGVybX06e319Z2V0U2Vzc2lvblByb3BzKCl7dmFyIHQ9e307cmV0dXJuIEooWih0aGlzLmdldFNldE9uY2VQcm9wcygpKSwoKGksZSk9PntcIiRjdXJyZW50X3VybFwiPT09ZSYmKGU9XCJ1cmxcIiksdFtcIiRzZXNzaW9uX2VudHJ5X1wiK3coZSldPWl9KSksdH19dmFyIGFvPXooXCJbU2Vzc2lvbklkXVwiKTtjbGFzcyBsb3tjb25zdHJ1Y3Rvcih0LGksZSl7dmFyIHI7aWYodGhpcy5Ncj1bXSwhdC5wZXJzaXN0ZW5jZSl0aHJvdyBuZXcgRXJyb3IoXCJTZXNzaW9uSWRNYW5hZ2VyIHJlcXVpcmVzIGEgUG9zdEhvZ1BlcnNpc3RlbmNlIGluc3RhbmNlXCIpO2lmKHQuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRocm93IG5ldyBFcnJvcihcIlNlc3Npb25JZE1hbmFnZXIgY2Fubm90IGJlIHVzZWQgd2l0aCBfX3ByZXZpZXdfZXhwZXJpbWVudGFsX2Nvb2tpZWxlc3NfbW9kZVwiKTt0aGlzLlM9dC5jb25maWcsdGhpcy5Scj10LnBlcnNpc3RlbmNlLHRoaXMucmk9dm9pZCAwLHRoaXMuanQ9dm9pZCAwLHRoaXMuX3Nlc3Npb25TdGFydFRpbWVzdGFtcD1udWxsLHRoaXMuX3Nlc3Npb25BY3Rpdml0eVRpbWVzdGFtcD1udWxsLHRoaXMuT3I9aXx8amksdGhpcy5Dcj1lfHxqaTt2YXIgcz10aGlzLlMucGVyc2lzdGVuY2VfbmFtZXx8dGhpcy5TLnRva2VuLG49dGhpcy5TLnNlc3Npb25faWRsZV90aW1lb3V0X3NlY29uZHN8fDE4MDA7aWYodGhpcy5fc2Vzc2lvblRpbWVvdXRNcz0xZTMqWGUobiw2MCwzNmUzLFwic2Vzc2lvbl9pZGxlX3RpbWVvdXRfc2Vjb25kc1wiLDE4MDApLHQucmVnaXN0ZXIoeyRjb25maWd1cmVkX3Nlc3Npb25fdGltZW91dF9tczp0aGlzLl9zZXNzaW9uVGltZW91dE1zfSksdGhpcy5GcigpLHRoaXMuQXI9XCJwaF9cIitzK1wiX3dpbmRvd19pZFwiLHRoaXMuRHI9XCJwaF9cIitzK1wiX3ByaW1hcnlfd2luZG93X2V4aXN0c1wiLHRoaXMuanIoKSl7dmFyIG89UWkuRCh0aGlzLkFyKSxhPVFpLkQodGhpcy5Ecik7byYmIWE/dGhpcy5yaT1vOlFpLkwodGhpcy5BciksUWkuaih0aGlzLkRyLCEwKX1pZihudWxsIT0ocj10aGlzLlMuYm9vdHN0cmFwKSYmci5zZXNzaW9uSUQpdHJ5e3ZhciBsPSh0PT57dmFyIGk9dC5yZXBsYWNlKC8tL2csXCJcIik7aWYoMzIhPT1pLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSB2YWxpZCBVVUlEXCIpO2lmKFwiN1wiIT09aVsxMl0pdGhyb3cgbmV3IEVycm9yKFwiTm90IGEgVVVJRHY3XCIpO3JldHVybiBwYXJzZUludChpLnN1YnN0cmluZygwLDEyKSwxNil9KSh0aGlzLlMuYm9vdHN0cmFwLnNlc3Npb25JRCk7dGhpcy5Mcih0aGlzLlMuYm9vdHN0cmFwLnNlc3Npb25JRCwobmV3IERhdGUpLmdldFRpbWUoKSxsKX1jYXRjaCh0KXthby5lcnJvcihcIkludmFsaWQgc2Vzc2lvbklEIGluIGJvb3RzdHJhcFwiLHQpfXRoaXMuTnIoKX1nZXQgc2Vzc2lvblRpbWVvdXRNcygpe3JldHVybiB0aGlzLl9zZXNzaW9uVGltZW91dE1zfW9uU2Vzc2lvbklkKHQpe3JldHVybiBSKHRoaXMuTXIpJiYodGhpcy5Ncj1bXSksdGhpcy5Nci5wdXNoKHQpLHRoaXMuanQmJnQodGhpcy5qdCx0aGlzLnJpKSwoKT0+e3RoaXMuTXI9dGhpcy5Nci5maWx0ZXIoKGk9PmkhPT10KSl9fWpyKCl7cmV0dXJuXCJtZW1vcnlcIiE9PXRoaXMuUy5wZXJzaXN0ZW5jZSYmIXRoaXMuUnIuU2UmJlFpLkMoKX16cih0KXt0IT09dGhpcy5yaSYmKHRoaXMucmk9dCx0aGlzLmpyKCkmJlFpLmoodGhpcy5Bcix0KSl9VXIoKXtyZXR1cm4gdGhpcy5yaT90aGlzLnJpOnRoaXMuanIoKT9RaS5EKHRoaXMuQXIpOm51bGx9THIodCxpLGUpe3Q9PT10aGlzLmp0JiZpPT09dGhpcy5fc2Vzc2lvbkFjdGl2aXR5VGltZXN0YW1wJiZlPT09dGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wfHwodGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wPWUsdGhpcy5fc2Vzc2lvbkFjdGl2aXR5VGltZXN0YW1wPWksdGhpcy5qdD10LHRoaXMuUnIucmVnaXN0ZXIoe1tTdF06W2ksdCxlXX0pKX1xcigpe2lmKHRoaXMuanQmJnRoaXMuX3Nlc3Npb25BY3Rpdml0eVRpbWVzdGFtcCYmdGhpcy5fc2Vzc2lvblN0YXJ0VGltZXN0YW1wKXJldHVyblt0aGlzLl9zZXNzaW9uQWN0aXZpdHlUaW1lc3RhbXAsdGhpcy5qdCx0aGlzLl9zZXNzaW9uU3RhcnRUaW1lc3RhbXBdO3ZhciB0PXRoaXMuUnIucHJvcHNbU3RdO3JldHVybiB4KHQpJiYyPT09dC5sZW5ndGgmJnQucHVzaCh0WzBdKSx0fHxbMCxudWxsLDBdfXJlc2V0U2Vzc2lvbklkKCl7dGhpcy5McihudWxsLG51bGwsbnVsbCl9TnIoKXtzdChpLFwiYmVmb3JldW5sb2FkXCIsKCgpPT57dGhpcy5qcigpJiZRaS5MKHRoaXMuRHIpfSkse2NhcHR1cmU6ITF9KX1jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCh0LGkpe2lmKHZvaWQgMD09PXQmJih0PSExKSx2b2lkIDA9PT1pJiYoaT1udWxsKSx0aGlzLlMuX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUpdGhyb3cgbmV3IEVycm9yKFwiY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgaW4gX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGVcIik7dmFyIGU9aXx8KG5ldyBEYXRlKS5nZXRUaW1lKCksW3IscyxuXT10aGlzLnFyKCksbz10aGlzLlVyKCksYT1GKG4pJiZuPjAmJk1hdGguYWJzKGUtbik+ODY0ZTUsbD0hMSx1PSFzLGg9IXQmJk1hdGguYWJzKGUtcik+dGhpcy5zZXNzaW9uVGltZW91dE1zO3V8fGh8fGE/KHM9dGhpcy5PcigpLG89dGhpcy5DcigpLGFvLmluZm8oXCJuZXcgc2Vzc2lvbiBJRCBnZW5lcmF0ZWRcIix7c2Vzc2lvbklkOnMsd2luZG93SWQ6byxjaGFuZ2VSZWFzb246e25vU2Vzc2lvbklkOnUsYWN0aXZpdHlUaW1lb3V0Omgsc2Vzc2lvblBhc3RNYXhpbXVtTGVuZ3RoOmF9fSksbj1lLGw9ITApOm98fChvPXRoaXMuQ3IoKSxsPSEwKTt2YXIgZD0wPT09cnx8IXR8fGE/ZTpyLHY9MD09PW4/KG5ldyBEYXRlKS5nZXRUaW1lKCk6bjtyZXR1cm4gdGhpcy56cihvKSx0aGlzLkxyKHMsZCx2KSx0fHx0aGlzLkZyKCksbCYmdGhpcy5Nci5mb3JFYWNoKCh0PT50KHMsbyxsP3tub1Nlc3Npb25JZDp1LGFjdGl2aXR5VGltZW91dDpoLHNlc3Npb25QYXN0TWF4aW11bUxlbmd0aDphfTp2b2lkIDApKSkse3Nlc3Npb25JZDpzLHdpbmRvd0lkOm8sc2Vzc2lvblN0YXJ0VGltZXN0YW1wOnYsY2hhbmdlUmVhc29uOmw/e25vU2Vzc2lvbklkOnUsYWN0aXZpdHlUaW1lb3V0Omgsc2Vzc2lvblBhc3RNYXhpbXVtTGVuZ3RoOmF9OnZvaWQgMCxsYXN0QWN0aXZpdHlUaW1lc3RhbXA6cn19RnIoKXtjbGVhclRpbWVvdXQodGhpcy5CciksdGhpcy5Ccj1zZXRUaW1lb3V0KCgoKT0+e3RoaXMucmVzZXRTZXNzaW9uSWQoKX0pLDEuMSp0aGlzLnNlc3Npb25UaW1lb3V0TXMpfX12YXIgdW89W1wiJHNldF9vbmNlXCIsXCIkc2V0XCJdLGhvPXooXCJbU2l0ZUFwcHNdXCIpO2NsYXNzIHZve2NvbnN0cnVjdG9yKHQpe3RoaXMuTj10LHRoaXMuSHI9W10sdGhpcy5hcHBzPXt9fWdldCBpc0VuYWJsZWQoKXtyZXR1cm4hIXRoaXMuTi5jb25maWcub3B0X2luX3NpdGVfYXBwc31Xcih0LGkpe2lmKGkpe3ZhciBlPXRoaXMuZ2xvYmFsc0ZvckV2ZW50KGkpO3RoaXMuSHIucHVzaChlKSx0aGlzLkhyLmxlbmd0aD4xZTMmJih0aGlzLkhyPXRoaXMuSHIuc2xpY2UoMTApKX19Z2V0IHNpdGVBcHBMb2FkZXJzKCl7dmFyIHQsaTtyZXR1cm4gbnVsbD09KHQ9Yy5fUE9TVEhPR19SRU1PVEVfQ09ORklHKXx8bnVsbD09KGk9dFt0aGlzLk4uY29uZmlnLnRva2VuXSk/dm9pZCAwOmkuc2l0ZUFwcHN9aW5pdCgpe2lmKHRoaXMuaXNFbmFibGVkKXt2YXIgdD10aGlzLk4uQWUodGhpcy5Xci5iaW5kKHRoaXMpKTt0aGlzLkdyPSgpPT57dCgpLHRoaXMuSHI9W10sdGhpcy5Hcj12b2lkIDB9fX1nbG9iYWxzRm9yRXZlbnQodCl7dmFyIGksZSxyLHMsbixvLGE7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiRXZlbnQgcGF5bG9hZCBpcyByZXF1aXJlZFwiKTt2YXIgbD17fSx1PXRoaXMuTi5nZXRfcHJvcGVydHkoXCIkZ3JvdXBzXCIpfHxbXSxoPXRoaXMuTi5nZXRfcHJvcGVydHkoXCIkc3RvcmVkX2dyb3VwX3Byb3BlcnRpZXNcIil8fHt9O2Zvcih2YXJbZCx2XW9mIE9iamVjdC5lbnRyaWVzKGgpKWxbZF09e2lkOnVbZF0sdHlwZTpkLHByb3BlcnRpZXM6dn07dmFyeyRzZXRfb25jZTpjLCRzZXQ6Zn09dDtyZXR1cm57ZXZlbnQ6Qih7fSxIKHQsdW8pLHtwcm9wZXJ0aWVzOkIoe30sdC5wcm9wZXJ0aWVzLGY/eyRzZXQ6Qih7fSxudWxsIT09KGk9bnVsbD09KGU9dC5wcm9wZXJ0aWVzKT92b2lkIDA6ZS4kc2V0KSYmdm9pZCAwIT09aT9pOnt9LGYpfTp7fSxjP3skc2V0X29uY2U6Qih7fSxudWxsIT09KHI9bnVsbD09KHM9dC5wcm9wZXJ0aWVzKT92b2lkIDA6cy4kc2V0X29uY2UpJiZ2b2lkIDAhPT1yP3I6e30sYyl9Ont9KSxlbGVtZW50c19jaGFpbjpudWxsIT09KG49bnVsbD09KG89dC5wcm9wZXJ0aWVzKT92b2lkIDA6by4kZWxlbWVudHNfY2hhaW4pJiZ2b2lkIDAhPT1uP246XCJcIixkaXN0aW5jdF9pZDpudWxsPT0oYT10LnByb3BlcnRpZXMpP3ZvaWQgMDphLmRpc3RpbmN0X2lkfSkscGVyc29uOntwcm9wZXJ0aWVzOnRoaXMuTi5nZXRfcHJvcGVydHkoXCIkc3RvcmVkX3BlcnNvbl9wcm9wZXJ0aWVzXCIpfSxncm91cHM6bH19c2V0dXBTaXRlQXBwKHQpe3ZhciBpPXRoaXMuYXBwc1t0LmlkXSxlPSgpPT57dmFyIGU7KCFpLmVycm9yZWQmJnRoaXMuSHIubGVuZ3RoJiYoaG8uaW5mbyhcIlByb2Nlc3NpbmcgXCIrdGhpcy5Ici5sZW5ndGgrXCIgZXZlbnRzIGZvciBzaXRlIGFwcCB3aXRoIGlkIFwiK3QuaWQpLHRoaXMuSHIuZm9yRWFjaCgodD0+bnVsbD09aS5wcm9jZXNzRXZlbnQ/dm9pZCAwOmkucHJvY2Vzc0V2ZW50KHQpKSksaS5wcm9jZXNzZWRCdWZmZXI9ITApLE9iamVjdC52YWx1ZXModGhpcy5hcHBzKS5ldmVyeSgodD0+dC5wcm9jZXNzZWRCdWZmZXJ8fHQuZXJyb3JlZCkpKSYmKG51bGw9PShlPXRoaXMuR3IpfHxlLmNhbGwodGhpcykpfSxyPSExLHM9cz0+e2kuZXJyb3JlZD0hcyxpLmxvYWRlZD0hMCxoby5pbmZvKFwiU2l0ZSBhcHAgd2l0aCBpZCBcIit0LmlkK1wiIFwiKyhzP1wibG9hZGVkXCI6XCJlcnJvcmVkXCIpKSxyJiZlKCl9O3RyeXt2YXJ7cHJvY2Vzc0V2ZW50Om59PXQuaW5pdCh7cG9zdGhvZzp0aGlzLk4sY2FsbGJhY2s6dD0+e3ModCl9fSk7biYmKGkucHJvY2Vzc0V2ZW50PW4pLHI9ITB9Y2F0Y2goaSl7aG8uZXJyb3IoXCJFcnJvciB3aGlsZSBpbml0aWFsaXppbmcgUG9zdEhvZyBhcHAgd2l0aCBjb25maWcgaWQgXCIrdC5pZCxpKSxzKCExKX1pZihyJiZpLmxvYWRlZCl0cnl7ZSgpfWNhdGNoKGUpe2hvLmVycm9yKFwiRXJyb3Igd2hpbGUgcHJvY2Vzc2luZyBidWZmZXJlZCBldmVudHMgUG9zdEhvZyBhcHAgd2l0aCBjb25maWcgaWQgXCIrdC5pZCxlKSxpLmVycm9yZWQ9ITB9fUpyKCl7dmFyIHQ9dGhpcy5zaXRlQXBwTG9hZGVyc3x8W107Zm9yKHZhciBpIG9mIHQpdGhpcy5hcHBzW2kuaWRdPXtpZDppLmlkLGxvYWRlZDohMSxlcnJvcmVkOiExLHByb2Nlc3NlZEJ1ZmZlcjohMX07Zm9yKHZhciBlIG9mIHQpdGhpcy5zZXR1cFNpdGVBcHAoZSl9VnIodCl7aWYoMCE9PU9iamVjdC5rZXlzKHRoaXMuYXBwcykubGVuZ3RoKXt2YXIgaT10aGlzLmdsb2JhbHNGb3JFdmVudCh0KTtmb3IodmFyIGUgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmFwcHMpKXRyeXtudWxsPT1lLnByb2Nlc3NFdmVudHx8ZS5wcm9jZXNzRXZlbnQoaSl9Y2F0Y2goaSl7aG8uZXJyb3IoXCJFcnJvciB3aGlsZSBwcm9jZXNzaW5nIGV2ZW50IFwiK3QuZXZlbnQrXCIgZm9yIHNpdGUgYXBwIFwiK2UuaWQsaSl9fX1vblJlbW90ZUNvbmZpZyh0KXt2YXIgaSxlLHIscz10aGlzO2lmKG51bGwhPShpPXRoaXMuc2l0ZUFwcExvYWRlcnMpJiZpLmxlbmd0aClyZXR1cm4gdGhpcy5pc0VuYWJsZWQ/KHRoaXMuSnIoKSx2b2lkIHRoaXMuTi5vbihcImV2ZW50Q2FwdHVyZWRcIiwodD0+dGhpcy5Wcih0KSkpKTp2b2lkIGhvLmVycm9yKCdQb3N0SG9nIHNpdGUgYXBwcyBhcmUgZGlzYWJsZWQuIEVuYWJsZSB0aGUgXCJvcHRfaW5fc2l0ZV9hcHBzXCIgY29uZmlnIHRvIHByb2NlZWQuJyk7aWYobnVsbD09KGU9dGhpcy5Hcil8fGUuY2FsbCh0aGlzKSxudWxsIT0ocj10LnNpdGVBcHBzKSYmci5sZW5ndGgpaWYodGhpcy5pc0VuYWJsZWQpe3ZhciBuPWZ1bmN0aW9uKHQsaSl7dmFyIGU7Y1tcIl9fJCRwaF9zaXRlX2FwcF9cIit0XT1zLk4sbnVsbD09KGU9Yy5fX1Bvc3Rob2dFeHRlbnNpb25zX18pfHxudWxsPT1lLmxvYWRTaXRlQXBwfHxlLmxvYWRTaXRlQXBwKHMuTixpLChpPT57aWYoaSlyZXR1cm4gaG8uZXJyb3IoXCJFcnJvciB3aGlsZSBpbml0aWFsaXppbmcgUG9zdEhvZyBhcHAgd2l0aCBjb25maWcgaWQgXCIrdCxpKX0pKX07Zm9yKHZhcntpZDpvLHVybDphfW9mIHQuc2l0ZUFwcHMpbihvLGEpfWVsc2UgaG8uZXJyb3IoJ1Bvc3RIb2cgc2l0ZSBhcHBzIGFyZSBkaXNhYmxlZC4gRW5hYmxlIHRoZSBcIm9wdF9pbl9zaXRlX2FwcHNcIiBjb25maWcgdG8gcHJvY2VlZC4nKX19dmFyIGNvLGZvPVtcImFtYXpvbmJvdFwiLFwiYW1hem9ucHJvZHVjdGJvdFwiLFwiYXBwLmh5cGVmYWN0b3JzLmNvbVwiLFwiYXBwbGVib3RcIixcImFyY2hpdmUub3JnX2JvdFwiLFwiYXdhcmlvYm90XCIsXCJiYWNrbGlua3NleHRlbmRlZGJvdFwiLFwiYmFpZHVzcGlkZXJcIixcImJpbmdib3RcIixcImJpbmdwcmV2aWV3XCIsXCJjaHJvbWUtbGlnaHRob3VzZVwiLFwiZGF0YWZvcnNlb2JvdFwiLFwiZGVlcHNjYW5cIixcImR1Y2tkdWNrYm90XCIsXCJmYWNlYm9va2V4dGVybmFsXCIsXCJmYWNlYm9va2NhdGFsb2dcIixcImh0dHA6Ly95YW5kZXguY29tL2JvdHNcIixcImh1YnNwb3RcIixcImlhX2FyY2hpdmVyXCIsXCJsaW5rZWRpbmJvdFwiLFwibWV0YS1leHRlcm5hbGFnZW50XCIsXCJtajEyYm90XCIsXCJtc25ib3RcIixcIm5lc3N1c1wiLFwicGV0YWxib3RcIixcInBpbnRlcmVzdFwiLFwicHJlcmVuZGVyXCIsXCJyb2dlcmJvdFwiLFwic2NyZWFtaW5nIGZyb2dcIixcInNlYm90LXdhXCIsXCJzaXRlYnVsYlwiLFwic2xhY2tib3RcIixcInNsdXJwXCIsXCJ0cmVuZGljdGlvbmJvdFwiLFwidHVybml0aW5cIixcInR3aXR0ZXJib3RcIixcInZlcmNlbGJvdFwiLFwieWFob28hIHNsdXJwXCIsXCJ5YW5kZXhib3RcIixcInpvb21ib3RcIixcImJvdC5odG1cIixcImJvdC5waHBcIixcIihib3Q7XCIsXCJib3QvXCIsXCJjcmF3bGVyXCIsXCJhaHJlZnNib3RcIixcImFocmVmc3NpdGVhdWRpdFwiLFwic2VtcnVzaGJvdFwiLFwic2l0ZWF1ZGl0Ym90XCIsXCJzcGxpdHNpZ25hbGJvdFwiLFwiZ3B0Ym90XCIsXCJvYWktc2VhcmNoYm90XCIsXCJjaGF0Z3B0LXVzZXJcIixcInBlcnBsZXhpdHlib3RcIixcImJldHRlciB1cHRpbWUgYm90XCIsXCJzZW50cnl1cHRpbWVib3RcIixcInVwdGltZXJvYm90XCIsXCJoZWFkbGVzc2Nocm9tZVwiLFwiY3lwcmVzc1wiLFwiZ29vZ2xlLWhvdGVsYWRzdmVyaWZpZXJcIixcImFkc2JvdC1nb29nbGVcIixcImFwaXMtZ29vZ2xlXCIsXCJkdXBsZXh3ZWItZ29vZ2xlXCIsXCJmZWVkZmV0Y2hlci1nb29nbGVcIixcImdvb2dsZSBmYXZpY29uXCIsXCJnb29nbGUgd2ViIHByZXZpZXdcIixcImdvb2dsZS1yZWFkLWFsb3VkXCIsXCJnb29nbGVib3RcIixcImdvb2dsZXdlYmxpZ2h0XCIsXCJtZWRpYXBhcnRuZXJzLWdvb2dsZVwiLFwic3RvcmVib3QtZ29vZ2xlXCIsXCJieXRlc3BpZGVyXCJdLHBvPWZ1bmN0aW9uKHQsaSl7aWYoIXQpcmV0dXJuITE7dmFyIGU9dC50b0xvd2VyQ2FzZSgpO3JldHVybiBmby5jb25jYXQoaXx8W10pLnNvbWUoKHQ9Pnt2YXIgaT10LnRvTG93ZXJDYXNlKCk7cmV0dXJuLTEhPT1lLmluZGV4T2YoaSl9KSl9LGdvPWZ1bmN0aW9uKHQsaSl7aWYoIXQpcmV0dXJuITE7dmFyIGU9dC51c2VyQWdlbnQ7aWYoZSYmcG8oZSxpKSlyZXR1cm4hMDt0cnl7dmFyIHI9bnVsbD09dD92b2lkIDA6dC51c2VyQWdlbnREYXRhO2lmKG51bGwhPXImJnIuYnJhbmRzJiZyLmJyYW5kcy5zb21lKCh0PT5wbyhudWxsPT10P3ZvaWQgMDp0LmJyYW5kLGkpKSkpcmV0dXJuITB9Y2F0Y2godCl7fXJldHVybiEhdC53ZWJkcml2ZXJ9O2Z1bmN0aW9uIF9vKHQsaSxlKXtyZXR1cm4gWG4oe2Rpc3RpbmN0X2lkOnQsdXNlclByb3BlcnRpZXNUb1NldDppLHVzZXJQcm9wZXJ0aWVzVG9TZXRPbmNlOmV9KX0hZnVuY3Rpb24odCl7dC5VUz1cInVzXCIsdC5FVT1cImV1XCIsdC5DVVNUT009XCJjdXN0b21cIn0oY298fChjbz17fSkpO3ZhciBtbz1cImkucG9zdGhvZy5jb21cIjtjbGFzcyBib3tjb25zdHJ1Y3Rvcih0KXt0aGlzLktyPXt9LHRoaXMuaW5zdGFuY2U9dH1nZXQgYXBpSG9zdCgpe3ZhciB0PXRoaXMuaW5zdGFuY2UuY29uZmlnLmFwaV9ob3N0LnRyaW0oKS5yZXBsYWNlKC9cXC8kLyxcIlwiKTtyZXR1cm5cImh0dHBzOi8vYXBwLnBvc3Rob2cuY29tXCI9PT10P1wiaHR0cHM6Ly91cy5pLnBvc3Rob2cuY29tXCI6dH1nZXQgdWlIb3N0KCl7dmFyIHQsaT1udWxsPT0odD10aGlzLmluc3RhbmNlLmNvbmZpZy51aV9ob3N0KT92b2lkIDA6dC5yZXBsYWNlKC9cXC8kLyxcIlwiKTtyZXR1cm4gaXx8KGk9dGhpcy5hcGlIb3N0LnJlcGxhY2UoXCIuXCIrbW8sXCIucG9zdGhvZy5jb21cIikpLFwiaHR0cHM6Ly9hcHAucG9zdGhvZy5jb21cIj09PWk/XCJodHRwczovL3VzLnBvc3Rob2cuY29tXCI6aX1nZXQgcmVnaW9uKCl7cmV0dXJuIHRoaXMuS3JbdGhpcy5hcGlIb3N0XXx8KC9odHRwczpcXC9cXC8oYXBwfHVzfHVzLWFzc2V0cykoXFwuaSk/XFwucG9zdGhvZ1xcLmNvbS9pLnRlc3QodGhpcy5hcGlIb3N0KT90aGlzLktyW3RoaXMuYXBpSG9zdF09Y28uVVM6L2h0dHBzOlxcL1xcLyhldXxldS1hc3NldHMpKFxcLmkpP1xcLnBvc3Rob2dcXC5jb20vaS50ZXN0KHRoaXMuYXBpSG9zdCk/dGhpcy5Lclt0aGlzLmFwaUhvc3RdPWNvLkVVOnRoaXMuS3JbdGhpcy5hcGlIb3N0XT1jby5DVVNUT00pLHRoaXMuS3JbdGhpcy5hcGlIb3N0XX1lbmRwb2ludEZvcih0LGkpe2lmKHZvaWQgMD09PWkmJihpPVwiXCIpLGkmJihpPVwiL1wiPT09aVswXT9pOlwiL1wiK2kpLFwidWlcIj09PXQpcmV0dXJuIHRoaXMudWlIb3N0K2k7aWYodGhpcy5yZWdpb249PT1jby5DVVNUT00pcmV0dXJuIHRoaXMuYXBpSG9zdCtpO3ZhciBlPW1vK2k7c3dpdGNoKHQpe2Nhc2VcImFzc2V0c1wiOnJldHVyblwiaHR0cHM6Ly9cIit0aGlzLnJlZ2lvbitcIi1hc3NldHMuXCIrZTtjYXNlXCJhcGlcIjpyZXR1cm5cImh0dHBzOi8vXCIrdGhpcy5yZWdpb24rXCIuXCIrZX19fXZhciB3bz17aWNvbnRhaW5zOih0LGUpPT4hIWkmJmUuaHJlZi50b0xvd2VyQ2FzZSgpLmluZGV4T2YodC50b0xvd2VyQ2FzZSgpKT4tMSxub3RfaWNvbnRhaW5zOih0LGUpPT4hIWkmJi0xPT09ZS5ocmVmLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0LnRvTG93ZXJDYXNlKCkpLHJlZ2V4Oih0LGUpPT4hIWkmJkxuKGUuaHJlZix0KSxub3RfcmVnZXg6KHQsZSk9PiEhaSYmIUxuKGUuaHJlZix0KSxleGFjdDoodCxpKT0+aS5ocmVmPT09dCxpc19ub3Q6KHQsaSk9PmkuaHJlZiE9PXR9O2NsYXNzIHlve2NvbnN0cnVjdG9yKHQpe3ZhciBpPXRoaXM7dGhpcy5nZXRXZWJFeHBlcmltZW50c0FuZEV2YWx1YXRlRGlzcGxheUxvZ2ljPWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PSExKSxpLmdldFdlYkV4cGVyaW1lbnRzKCh0PT57eW8uWXIoXCJyZXRyaWV2ZWQgd2ViIGV4cGVyaW1lbnRzIGZyb20gdGhlIHNlcnZlclwiKSxpLlhyPW5ldyBNYXAsdC5mb3JFYWNoKCh0PT57aWYodC5mZWF0dXJlX2ZsYWdfa2V5KXt2YXIgZTtpZihpLlhyKXlvLllyKFwic2V0dGluZyBmbGFnIGtleSBcIix0LmZlYXR1cmVfZmxhZ19rZXksXCIgdG8gd2ViIGV4cGVyaW1lbnQgXCIsdCksbnVsbD09KGU9aS5Ycil8fGUuc2V0KHQuZmVhdHVyZV9mbGFnX2tleSx0KTt2YXIgcj1pLk4uZ2V0RmVhdHVyZUZsYWcodC5mZWF0dXJlX2ZsYWdfa2V5KTtUKHIpJiZ0LnZhcmlhbnRzW3JdJiZpLlFyKHQubmFtZSxyLHQudmFyaWFudHNbcl0udHJhbnNmb3Jtcyl9ZWxzZSBpZih0LnZhcmlhbnRzKWZvcih2YXIgcyBpbiB0LnZhcmlhbnRzKXt2YXIgbj10LnZhcmlhbnRzW3NdO3lvLlpyKG4pJiZpLlFyKHQubmFtZSxzLG4udHJhbnNmb3Jtcyl9fSkpfSksdCl9LHRoaXMuTj10LHRoaXMuTi5vbkZlYXR1cmVGbGFncygodD0+e3RoaXMub25GZWF0dXJlRmxhZ3ModCl9KSl9b25GZWF0dXJlRmxhZ3ModCl7aWYodGhpcy5faXNfYm90KCkpeW8uWXIoXCJSZWZ1c2luZyB0byByZW5kZXIgd2ViIGV4cGVyaW1lbnQgc2luY2UgdGhlIHZpZXdlciBpcyBhIGxpa2VseSBib3RcIik7ZWxzZSBpZighdGhpcy5OLmNvbmZpZy5kaXNhYmxlX3dlYl9leHBlcmltZW50cyl7aWYoQyh0aGlzLlhyKSlyZXR1cm4gdGhpcy5Ycj1uZXcgTWFwLHRoaXMubG9hZElmRW5hYmxlZCgpLHZvaWQgdGhpcy5wcmV2aWV3V2ViRXhwZXJpbWVudCgpO3lvLllyKFwiYXBwbHlpbmcgZmVhdHVyZSBmbGFnc1wiLHQpLHQuZm9yRWFjaCgodD0+e3ZhciBpO2lmKHRoaXMuWHImJm51bGwhPShpPXRoaXMuWHIpJiZpLmhhcyh0KSl7dmFyIGUscj10aGlzLk4uZ2V0RmVhdHVyZUZsYWcodCkscz1udWxsPT0oZT10aGlzLlhyKT92b2lkIDA6ZS5nZXQodCk7ciYmbnVsbCE9cyYmcy52YXJpYW50c1tyXSYmdGhpcy5RcihzLm5hbWUscixzLnZhcmlhbnRzW3JdLnRyYW5zZm9ybXMpfX0pKX19cHJldmlld1dlYkV4cGVyaW1lbnQoKXt2YXIgdD15by5nZXRXaW5kb3dMb2NhdGlvbigpO2lmKG51bGwhPXQmJnQuc2VhcmNoKXt2YXIgaT1TaShudWxsPT10P3ZvaWQgMDp0LnNlYXJjaCxcIl9fZXhwZXJpbWVudF9pZFwiKSxlPVNpKG51bGw9PXQ/dm9pZCAwOnQuc2VhcmNoLFwiX19leHBlcmltZW50X3ZhcmlhbnRcIik7aSYmZSYmKHlvLllyKFwicHJldmlld2luZyB3ZWIgZXhwZXJpbWVudHMgXCIraStcIiAmJiBcIitlKSx0aGlzLmdldFdlYkV4cGVyaW1lbnRzKCh0PT57dGhpcy50cyhwYXJzZUludChpKSxlLHQpfSksITEsITApKX19bG9hZElmRW5hYmxlZCgpe3RoaXMuTi5jb25maWcuZGlzYWJsZV93ZWJfZXhwZXJpbWVudHN8fHRoaXMuZ2V0V2ViRXhwZXJpbWVudHNBbmRFdmFsdWF0ZURpc3BsYXlMb2dpYygpfWdldFdlYkV4cGVyaW1lbnRzKHQsaSxlKXtpZih0aGlzLk4uY29uZmlnLmRpc2FibGVfd2ViX2V4cGVyaW1lbnRzJiYhZSlyZXR1cm4gdChbXSk7dmFyIHI9dGhpcy5OLmdldF9wcm9wZXJ0eShcIiR3ZWJfZXhwZXJpbWVudHNcIik7aWYociYmIWkpcmV0dXJuIHQocik7dGhpcy5OLnBlKHt1cmw6dGhpcy5OLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhcGlcIixcIi9hcGkvd2ViX2V4cGVyaW1lbnRzLz90b2tlbj1cIit0aGlzLk4uY29uZmlnLnRva2VuKSxtZXRob2Q6XCJHRVRcIixjYWxsYmFjazppPT57aWYoMjAwIT09aS5zdGF0dXNDb2RlfHwhaS5qc29uKXJldHVybiB0KFtdKTt2YXIgZT1pLmpzb24uZXhwZXJpbWVudHN8fFtdO3JldHVybiB0KGUpfX0pfXRzKHQsaSxlKXt2YXIgcj1lLmZpbHRlcigoaT0+aS5pZD09PXQpKTtyJiZyLmxlbmd0aD4wJiYoeW8uWXIoXCJQcmV2aWV3aW5nIHdlYiBleHBlcmltZW50IFtcIityWzBdLm5hbWUrXCJdIHdpdGggdmFyaWFudCBbXCIraStcIl1cIiksdGhpcy5RcihyWzBdLm5hbWUsaSxyWzBdLnZhcmlhbnRzW2ldLnRyYW5zZm9ybXMpKX1zdGF0aWMgWnIodCl7cmV0dXJuIUModC5jb25kaXRpb25zKSYmKHlvLmVzKHQpJiZ5by5ycyh0KSl9c3RhdGljIGVzKHQpe3ZhciBpO2lmKEModC5jb25kaXRpb25zKXx8QyhudWxsPT0oaT10LmNvbmRpdGlvbnMpP3ZvaWQgMDppLnVybCkpcmV0dXJuITA7dmFyIGUscixzLG49eW8uZ2V0V2luZG93TG9jYXRpb24oKTtyZXR1cm4hIW4mJihudWxsPT0oZT10LmNvbmRpdGlvbnMpfHwhZS51cmx8fHdvW251bGwhPT0ocj1udWxsPT0ocz10LmNvbmRpdGlvbnMpP3ZvaWQgMDpzLnVybE1hdGNoVHlwZSkmJnZvaWQgMCE9PXI/cjpcImljb250YWluc1wiXSh0LmNvbmRpdGlvbnMudXJsLG4pKX1zdGF0aWMgZ2V0V2luZG93TG9jYXRpb24oKXtyZXR1cm4gbnVsbD09aT92b2lkIDA6aS5sb2NhdGlvbn1zdGF0aWMgcnModCl7dmFyIGk7aWYoQyh0LmNvbmRpdGlvbnMpfHxDKG51bGw9PShpPXQuY29uZGl0aW9ucyk/dm9pZCAwOmkudXRtKSlyZXR1cm4hMDt2YXIgZT1wbigpO2lmKGUudXRtX3NvdXJjZSl7dmFyIHIscyxuLG8sYSxsLHUsaCxkLHYsYyxmLHAsZyxfLG0sYj1udWxsPT0ocj10LmNvbmRpdGlvbnMpfHxudWxsPT0ocz1yLnV0bSl8fCFzLnV0bV9jYW1wYWlnbnx8KG51bGw9PShuPXQuY29uZGl0aW9ucyl8fG51bGw9PShvPW4udXRtKT92b2lkIDA6by51dG1fY2FtcGFpZ24pPT1lLnV0bV9jYW1wYWlnbix3PW51bGw9PShhPXQuY29uZGl0aW9ucyl8fG51bGw9PShsPWEudXRtKXx8IWwudXRtX3NvdXJjZXx8KG51bGw9PSh1PXQuY29uZGl0aW9ucyl8fG51bGw9PShoPXUudXRtKT92b2lkIDA6aC51dG1fc291cmNlKT09ZS51dG1fc291cmNlLHk9bnVsbD09KGQ9dC5jb25kaXRpb25zKXx8bnVsbD09KHY9ZC51dG0pfHwhdi51dG1fbWVkaXVtfHwobnVsbD09KGM9dC5jb25kaXRpb25zKXx8bnVsbD09KGY9Yy51dG0pP3ZvaWQgMDpmLnV0bV9tZWRpdW0pPT1lLnV0bV9tZWRpdW0sUz1udWxsPT0ocD10LmNvbmRpdGlvbnMpfHxudWxsPT0oZz1wLnV0bSl8fCFnLnV0bV90ZXJtfHwobnVsbD09KF89dC5jb25kaXRpb25zKXx8bnVsbD09KG09Xy51dG0pP3ZvaWQgMDptLnV0bV90ZXJtKT09ZS51dG1fdGVybTtyZXR1cm4gYiYmeSYmUyYmd31yZXR1cm4hMX1zdGF0aWMgWXIodCl7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgsZT1uZXcgQXJyYXkoaT4xP2ktMTowKSxyPTE7cjxpO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO04uaW5mbyhcIltXZWJFeHBlcmltZW50c10gXCIrdCxlKX1Rcih0LGksZSl7dGhpcy5faXNfYm90KCk/eW8uWXIoXCJSZWZ1c2luZyB0byByZW5kZXIgd2ViIGV4cGVyaW1lbnQgc2luY2UgdGhlIHZpZXdlciBpcyBhIGxpa2VseSBib3RcIik6XCJjb250cm9sXCIhPT1pP2UuZm9yRWFjaCgoZT0+e2lmKGUuc2VsZWN0b3Ipe3ZhciByO3lvLllyKFwiYXBwbHlpbmcgdHJhbnNmb3JtIG9mIHZhcmlhbnQgXCIraStcIiBmb3IgZXhwZXJpbWVudCBcIit0K1wiIFwiLGUpO3ZhciBzPW51bGw9PShyPWRvY3VtZW50KT92b2lkIDA6ci5xdWVyeVNlbGVjdG9yQWxsKGUuc2VsZWN0b3IpO251bGw9PXN8fHMuZm9yRWFjaCgodD0+e3ZhciBpPXQ7ZS5odG1sJiYoaS5pbm5lckhUTUw9ZS5odG1sKSxlLmNzcyYmaS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLGUuY3NzKX0pKX19KSk6eW8uWXIoXCJDb250cm9sIHZhcmlhbnRzIGxlYXZlIHRoZSBwYWdlIHVubW9kaWZpZWQuXCIpfV9pc19ib3QoKXtyZXR1cm4gbyYmdGhpcy5OP2dvKG8sdGhpcy5OLmNvbmZpZy5jdXN0b21fYmxvY2tlZF91c2VyYWdlbnRzKTp2b2lkIDB9fXZhciBTbz17fSwkbz0oKT0+e30sa289XCJwb3N0aG9nXCIseG89IVZuJiYtMT09PShudWxsPT12P3ZvaWQgMDp2LmluZGV4T2YoXCJNU0lFXCIpKSYmLTE9PT0obnVsbD09dj92b2lkIDA6di5pbmRleE9mKFwiTW96aWxsYVwiKSksRW89KCk9Pnt2YXIgdDtyZXR1cm57YXBpX2hvc3Q6XCJodHRwczovL3VzLmkucG9zdGhvZy5jb21cIix1aV9ob3N0Om51bGwsdG9rZW46XCJcIixhdXRvY2FwdHVyZTohMCxyYWdlY2xpY2s6ITAsY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZTpldChudWxsPT1hP3ZvaWQgMDphLmxvY2F0aW9uKSxwZXJzaXN0ZW5jZTpcImxvY2FsU3RvcmFnZStjb29raWVcIixwZXJzaXN0ZW5jZV9uYW1lOlwiXCIsbG9hZGVkOiRvLHNhdmVfY2FtcGFpZ25fcGFyYW1zOiEwLGN1c3RvbV9jYW1wYWlnbl9wYXJhbXM6W10sY3VzdG9tX2Jsb2NrZWRfdXNlcmFnZW50czpbXSxzYXZlX3JlZmVycmVyOiEwLGNhcHR1cmVfcGFnZXZpZXc6ITAsY2FwdHVyZV9wYWdlbGVhdmU6XCJpZl9jYXB0dXJlX3BhZ2V2aWV3XCIsZGVidWc6bCYmVChudWxsPT1sP3ZvaWQgMDpsLnNlYXJjaCkmJi0xIT09bC5zZWFyY2guaW5kZXhPZihcIl9fcG9zdGhvZ19kZWJ1Zz10cnVlXCIpfHwhMSxjb29raWVfZXhwaXJhdGlvbjozNjUsdXBncmFkZTohMSxkaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nOiExLGRpc2FibGVfcGVyc2lzdGVuY2U6ITEsZGlzYWJsZV93ZWJfZXhwZXJpbWVudHM6ITAsZGlzYWJsZV9zdXJ2ZXlzOiExLGRpc2FibGVfZXh0ZXJuYWxfZGVwZW5kZW5jeV9sb2FkaW5nOiExLGVuYWJsZV9yZWNvcmRpbmdfY29uc29sZV9sb2c6dm9pZCAwLHNlY3VyZV9jb29raWU6XCJodHRwczpcIj09PShudWxsPT1pfHxudWxsPT0odD1pLmxvY2F0aW9uKT92b2lkIDA6dC5wcm90b2NvbCksaXA6ITAsb3B0X291dF9jYXB0dXJpbmdfYnlfZGVmYXVsdDohMSxvcHRfb3V0X3BlcnNpc3RlbmNlX2J5X2RlZmF1bHQ6ITEsb3B0X291dF91c2VyYWdlbnRfZmlsdGVyOiExLG9wdF9vdXRfY2FwdHVyaW5nX3BlcnNpc3RlbmNlX3R5cGU6XCJsb2NhbFN0b3JhZ2VcIixvcHRfb3V0X2NhcHR1cmluZ19jb29raWVfcHJlZml4Om51bGwsb3B0X2luX3NpdGVfYXBwczohMSxwcm9wZXJ0eV9kZW55bGlzdDpbXSxyZXNwZWN0X2RudDohMSxzYW5pdGl6ZV9wcm9wZXJ0aWVzOm51bGwscmVxdWVzdF9oZWFkZXJzOnt9LHJlcXVlc3RfYmF0Y2hpbmc6ITAscHJvcGVydGllc19zdHJpbmdfbWF4X2xlbmd0aDo2NTUzNSxzZXNzaW9uX3JlY29yZGluZzp7fSxtYXNrX2FsbF9lbGVtZW50X2F0dHJpYnV0ZXM6ITEsbWFza19hbGxfdGV4dDohMSxtYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllczohMSxjdXN0b21fcGVyc29uYWxfZGF0YV9wcm9wZXJ0aWVzOltdLGFkdmFuY2VkX2Rpc2FibGVfZGVjaWRlOiExLGFkdmFuY2VkX2Rpc2FibGVfZmVhdHVyZV9mbGFnczohMSxhZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3Nfb25fZmlyc3RfbG9hZDohMSxhZHZhbmNlZF9kaXNhYmxlX3Rvb2xiYXJfbWV0cmljczohMSxmZWF0dXJlX2ZsYWdfcmVxdWVzdF90aW1lb3V0X21zOjNlMyxzdXJ2ZXlzX3JlcXVlc3RfdGltZW91dF9tczoxZTQsb25fcmVxdWVzdF9lcnJvcjp0PT57dmFyIGk9XCJCYWQgSFRUUCBzdGF0dXM6IFwiK3Quc3RhdHVzQ29kZStcIiBcIit0LnRleHQ7Ti5lcnJvcihpKX0sZ2V0X2RldmljZV9pZDp0PT50LGNhcHR1cmVfcGVyZm9ybWFuY2U6dm9pZCAwLG5hbWU6XCJwb3N0aG9nXCIsYm9vdHN0cmFwOnt9LGRpc2FibGVfY29tcHJlc3Npb246ITEsc2Vzc2lvbl9pZGxlX3RpbWVvdXRfc2Vjb25kczoxODAwLHBlcnNvbl9wcm9maWxlczpcImlkZW50aWZpZWRfb25seVwiLGJlZm9yZV9zZW5kOnZvaWQgMCxyZXF1ZXN0X3F1ZXVlX2NvbmZpZzp7Zmx1c2hfaW50ZXJ2YWxfbXM6dG99LF9vbkNhcHR1cmU6JG99fSxJbz10PT57dmFyIGk9e307Uih0LnByb2Nlc3NfcGVyc29uKXx8KGkucGVyc29uX3Byb2ZpbGVzPXQucHJvY2Vzc19wZXJzb24pLFIodC54aHJfaGVhZGVycyl8fChpLnJlcXVlc3RfaGVhZGVycz10Lnhocl9oZWFkZXJzKSxSKHQuY29va2llX25hbWUpfHwoaS5wZXJzaXN0ZW5jZV9uYW1lPXQuY29va2llX25hbWUpLFIodC5kaXNhYmxlX2Nvb2tpZSl8fChpLmRpc2FibGVfcGVyc2lzdGVuY2U9dC5kaXNhYmxlX2Nvb2tpZSksUih0LnN0b3JlX2dvb2dsZSl8fChpLnNhdmVfY2FtcGFpZ25fcGFyYW1zPXQuc3RvcmVfZ29vZ2xlKSxSKHQudmVyYm9zZSl8fChpLmRlYnVnPXQudmVyYm9zZSk7dmFyIGU9Vih7fSxpLHQpO3JldHVybiB4KHQucHJvcGVydHlfYmxhY2tsaXN0KSYmKFIodC5wcm9wZXJ0eV9kZW55bGlzdCk/ZS5wcm9wZXJ0eV9kZW55bGlzdD10LnByb3BlcnR5X2JsYWNrbGlzdDp4KHQucHJvcGVydHlfZGVueWxpc3QpP2UucHJvcGVydHlfZGVueWxpc3Q9Wy4uLnQucHJvcGVydHlfYmxhY2tsaXN0LC4uLnQucHJvcGVydHlfZGVueWxpc3RdOk4uZXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBwcm9wZXJ0eV9kZW55bGlzdCBjb25maWc6IFwiK3QucHJvcGVydHlfZGVueWxpc3QpKSxlfTtjbGFzcyBQb3tjb25zdHJ1Y3Rvcigpe3RoaXMuX19mb3JjZUFsbG93TG9jYWxob3N0PSExfWdldCBzcygpe3JldHVybiB0aGlzLl9fZm9yY2VBbGxvd0xvY2FsaG9zdH1zZXQgc3ModCl7Ti5lcnJvcihcIldlYlBlcmZvcm1hbmNlT2JzZXJ2ZXIgaXMgZGVwcmVjYXRlZCBhbmQgaGFzIG5vIGltcGFjdCBvbiBuZXR3b3JrIGNhcHR1cmUuIFVzZSBgX2ZvcmNlQWxsb3dMb2NhbGhvc3ROZXR3b3JrQ2FwdHVyZWAgb24gYHBvc3Rob2cuc2Vzc2lvblJlY29yZGluZ2BcIiksdGhpcy5fX2ZvcmNlQWxsb3dMb2NhbGhvc3Q9dH19Y2xhc3MgUm97Z2V0IGRlY2lkZUVuZHBvaW50V2FzSGl0KCl7dmFyIHQsaTtyZXR1cm4gbnVsbCE9PSh0PW51bGw9PShpPXRoaXMuZmVhdHVyZUZsYWdzKT92b2lkIDA6aS5oYXNMb2FkZWRGbGFncykmJnZvaWQgMCE9PXQmJnR9Y29uc3RydWN0b3IoKXt0aGlzLndlYlBlcmZvcm1hbmNlPW5ldyBQbyx0aGlzLm5zPSExLHRoaXMudmVyc2lvbj1mLkxJQl9WRVJTSU9OLHRoaXMub3M9bmV3IGpuLHRoaXMuY29uZmlnPUVvKCksdGhpcy5TZW50cnlJbnRlZ3JhdGlvbj1Rcix0aGlzLnNlbnRyeUludGVncmF0aW9uPXQ9PmZ1bmN0aW9uKHQsaSl7dmFyIGU9WHIodCxpKTtyZXR1cm57bmFtZTpZcixwcm9jZXNzRXZlbnQ6dD0+ZSh0KX19KHRoaXMsdCksdGhpcy5fX3JlcXVlc3RfcXVldWU9W10sdGhpcy5fX2xvYWRlZD0hMSx0aGlzLmFuYWx5dGljc0RlZmF1bHRFbmRwb2ludD1cIi9lL1wiLHRoaXMubHM9ITEsdGhpcy51cz1udWxsLHRoaXMuaHM9bnVsbCx0aGlzLmZlYXR1cmVGbGFncz1uZXcgRm4odGhpcyksdGhpcy50b29sYmFyPW5ldyBycyh0aGlzKSx0aGlzLnNjcm9sbE1hbmFnZXI9bmV3IHNvKHRoaXMpLHRoaXMucGFnZVZpZXdNYW5hZ2VyPW5ldyB2cyh0aGlzKSx0aGlzLnN1cnZleXM9bmV3IHFuKHRoaXMpLHRoaXMuZXhwZXJpbWVudHM9bmV3IHlvKHRoaXMpLHRoaXMuZXhjZXB0aW9ucz1uZXcgY3ModGhpcyksdGhpcy5yYXRlTGltaXRlcj1uZXcgSG4odGhpcyksdGhpcy5yZXF1ZXN0Um91dGVyPW5ldyBibyh0aGlzKSx0aGlzLmNvbnNlbnQ9bmV3IFppKHRoaXMpLHRoaXMucGVvcGxlPXtzZXQ6KHQsaSxlKT0+e3ZhciByPVQodCk/e1t0XTppfTp0O3RoaXMuc2V0UGVyc29uUHJvcGVydGllcyhyKSxudWxsPT1lfHxlKHt9KX0sc2V0X29uY2U6KHQsaSxlKT0+e3ZhciByPVQodCk/e1t0XTppfTp0O3RoaXMuc2V0UGVyc29uUHJvcGVydGllcyh2b2lkIDAsciksbnVsbD09ZXx8ZSh7fSl9fSx0aGlzLm9uKFwiZXZlbnRDYXB0dXJlZFwiLCh0PT5OLmluZm8oJ3NlbmQgXCInKyhudWxsPT10P3ZvaWQgMDp0LmV2ZW50KSsnXCInLHQpKSl9aW5pdCh0LGksZSl7aWYoZSYmZSE9PWtvKXt2YXIgcixzPW51bGwhPT0ocj1Tb1tlXSkmJnZvaWQgMCE9PXI/cjpuZXcgUm87cmV0dXJuIHMuX2luaXQodCxpLGUpLFNvW2VdPXMsU29ba29dW2VdPXMsc31yZXR1cm4gdGhpcy5faW5pdCh0LGksZSl9X2luaXQoZSxyLHMpe3ZhciBuLG87aWYodm9pZCAwPT09ciYmKHI9e30pLFIoZSl8fE0oZSkpcmV0dXJuIE4uY3JpdGljYWwoXCJQb3N0SG9nIHdhcyBpbml0aWFsaXplZCB3aXRob3V0IGEgdG9rZW4uIFRoaXMgbGlrZWx5IGluZGljYXRlcyBhIG1pc2NvbmZpZ3VyYXRpb24uIFBsZWFzZSBjaGVjayB0aGUgZmlyc3QgYXJndW1lbnQgcGFzc2VkIHRvIHBvc3Rob2cuaW5pdCgpXCIpLHRoaXM7aWYodGhpcy5fX2xvYWRlZClyZXR1cm4gTi53YXJuKFwiWW91IGhhdmUgYWxyZWFkeSBpbml0aWFsaXplZCBQb3N0SG9nISBSZS1pbml0aWFsaXppbmcgaXMgYSBuby1vcFwiKSx0aGlzO3RoaXMuX19sb2FkZWQ9ITAsdGhpcy5jb25maWc9e30sdGhpcy5kcz1bXSxyLnBlcnNvbl9wcm9maWxlcyYmKHRoaXMudXM9ci5wZXJzb25fcHJvZmlsZXMpLHRoaXMuc2V0X2NvbmZpZyhWKHt9LEVvKCksSW8ocikse25hbWU6cyx0b2tlbjplfSkpLHRoaXMuY29uZmlnLm9uX3hocl9lcnJvciYmTi5lcnJvcihcIm9uX3hocl9lcnJvciBpcyBkZXByZWNhdGVkLiBVc2Ugb25fcmVxdWVzdF9lcnJvciBpbnN0ZWFkXCIpLHRoaXMuY29tcHJlc3Npb249ci5kaXNhYmxlX2NvbXByZXNzaW9uP3ZvaWQgMDp0LkdaaXBKUyx0aGlzLnBlcnNpc3RlbmNlPW5ldyBEbih0aGlzLmNvbmZpZyksdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2U9XCJzZXNzaW9uU3RvcmFnZVwiPT09dGhpcy5jb25maWcucGVyc2lzdGVuY2V8fFwibWVtb3J5XCI9PT10aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZT90aGlzLnBlcnNpc3RlbmNlOm5ldyBEbihCKHt9LHRoaXMuY29uZmlnLHtwZXJzaXN0ZW5jZTpcInNlc3Npb25TdG9yYWdlXCJ9KSk7dmFyIGE9Qih7fSx0aGlzLnBlcnNpc3RlbmNlLnByb3BzKSxsPUIoe30sdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UucHJvcHMpO2lmKHRoaXMudnM9bmV3IGlvKCh0PT50aGlzLmNzKHQpKSx0aGlzLmNvbmZpZy5yZXF1ZXN0X3F1ZXVlX2NvbmZpZyksdGhpcy5mcz1uZXcgcm8odGhpcyksdGhpcy5fX3JlcXVlc3RfcXVldWU9W10sdGhpcy5jb25maWcuX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGV8fCh0aGlzLnNlc3Npb25NYW5hZ2VyPW5ldyBsbyh0aGlzKSx0aGlzLnNlc3Npb25Qcm9wc01hbmFnZXI9bmV3IG9vKHRoaXMsdGhpcy5zZXNzaW9uTWFuYWdlcix0aGlzLnBlcnNpc3RlbmNlKSksbmV3IG5zKHRoaXMpLnN0YXJ0SWZFbmFibGVkT3JTdG9wKCksdGhpcy5zaXRlQXBwcz1uZXcgdm8odGhpcyksbnVsbD09KG49dGhpcy5zaXRlQXBwcyl8fG4uaW5pdCgpLHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlfHwodGhpcy5zZXNzaW9uUmVjb3JkaW5nPW5ldyBKcih0aGlzKSx0aGlzLnNlc3Npb25SZWNvcmRpbmcuc3RhcnRJZkVuYWJsZWRPclN0b3AoKSksdGhpcy5jb25maWcuZGlzYWJsZV9zY3JvbGxfcHJvcGVydGllc3x8dGhpcy5zY3JvbGxNYW5hZ2VyLnN0YXJ0TWVhc3VyaW5nU2Nyb2xsUG9zaXRpb24oKSx0aGlzLmF1dG9jYXB0dXJlPW5ldyBUaSh0aGlzKSx0aGlzLmF1dG9jYXB0dXJlLnN0YXJ0SWZFbmFibGVkKCksdGhpcy5zdXJ2ZXlzLmxvYWRJZkVuYWJsZWQoKSx0aGlzLmhlYXRtYXBzPW5ldyBkcyh0aGlzKSx0aGlzLmhlYXRtYXBzLnN0YXJ0SWZFbmFibGVkKCksdGhpcy53ZWJWaXRhbHNBdXRvY2FwdHVyZT1uZXcgbHModGhpcyksdGhpcy5leGNlcHRpb25PYnNlcnZlcj1uZXcgbmUodGhpcyksdGhpcy5leGNlcHRpb25PYnNlcnZlci5zdGFydElmRW5hYmxlZCgpLHRoaXMuZGVhZENsaWNrc0F1dG9jYXB0dXJlPW5ldyByZSh0aGlzLGVlKSx0aGlzLmRlYWRDbGlja3NBdXRvY2FwdHVyZS5zdGFydElmRW5hYmxlZCgpLHRoaXMuaGlzdG9yeUF1dG9jYXB0dXJlPW5ldyBqZSh0aGlzKSx0aGlzLmhpc3RvcnlBdXRvY2FwdHVyZS5zdGFydElmRW5hYmxlZCgpLGYuREVCVUc9Zi5ERUJVR3x8dGhpcy5jb25maWcuZGVidWcsZi5ERUJVRyYmTi5pbmZvKFwiU3RhcnRpbmcgaW4gZGVidWcgbW9kZVwiLHt0aGlzOnRoaXMsY29uZmlnOnIsdGhpc0M6Qih7fSx0aGlzLmNvbmZpZykscDphLHM6bH0pLHRoaXMucHMoKSx2b2lkIDAhPT0obnVsbD09KG89ci5ib290c3RyYXApP3ZvaWQgMDpvLmRpc3RpbmN0SUQpKXt2YXIgdSxoLGQ9dGhpcy5jb25maWcuZ2V0X2RldmljZV9pZChqaSgpKSx2PW51bGwhPSh1PXIuYm9vdHN0cmFwKSYmdS5pc0lkZW50aWZpZWRJRD9kOnIuYm9vdHN0cmFwLmRpc3RpbmN0SUQ7dGhpcy5wZXJzaXN0ZW5jZS5zZXRfcHJvcGVydHkoRnQsbnVsbCE9KGg9ci5ib290c3RyYXApJiZoLmlzSWRlbnRpZmllZElEP1wiaWRlbnRpZmllZFwiOlwiYW5vbnltb3VzXCIpLHRoaXMucmVnaXN0ZXIoe2Rpc3RpbmN0X2lkOnIuYm9vdHN0cmFwLmRpc3RpbmN0SUQsJGRldmljZV9pZDp2fSl9aWYodGhpcy5ncygpKXt2YXIgYyxwLGc9T2JqZWN0LmtleXMoKG51bGw9PShjPXIuYm9vdHN0cmFwKT92b2lkIDA6Yy5mZWF0dXJlRmxhZ3MpfHx7fSkuZmlsdGVyKCh0PT57dmFyIGksZTtyZXR1cm4hKG51bGw9PShpPXIuYm9vdHN0cmFwKXx8bnVsbD09KGU9aS5mZWF0dXJlRmxhZ3MpfHwhZVt0XSl9KSkucmVkdWNlKCgodCxpKT0+e3ZhciBlLHM7cmV0dXJuIHRbaV09KG51bGw9PShlPXIuYm9vdHN0cmFwKXx8bnVsbD09KHM9ZS5mZWF0dXJlRmxhZ3MpP3ZvaWQgMDpzW2ldKXx8ITEsdH0pLHt9KSxfPU9iamVjdC5rZXlzKChudWxsPT0ocD1yLmJvb3RzdHJhcCk/dm9pZCAwOnAuZmVhdHVyZUZsYWdQYXlsb2Fkcyl8fHt9KS5maWx0ZXIoKHQ9PmdbdF0pKS5yZWR1Y2UoKCh0LGkpPT57dmFyIGUscyxuLG87bnVsbCE9KGU9ci5ib290c3RyYXApJiZudWxsIT0ocz1lLmZlYXR1cmVGbGFnUGF5bG9hZHMpJiZzW2ldJiYodFtpXT1udWxsPT0obj1yLmJvb3RzdHJhcCl8fG51bGw9PShvPW4uZmVhdHVyZUZsYWdQYXlsb2Fkcyk/dm9pZCAwOm9baV0pO3JldHVybiB0fSkse30pO3RoaXMuZmVhdHVyZUZsYWdzLnJlY2VpdmVkRmVhdHVyZUZsYWdzKHtmZWF0dXJlRmxhZ3M6ZyxmZWF0dXJlRmxhZ1BheWxvYWRzOl99KX1pZih0aGlzLmNvbmZpZy5fX3ByZXZpZXdfZXhwZXJpbWVudGFsX2Nvb2tpZWxlc3NfbW9kZSl0aGlzLnJlZ2lzdGVyX29uY2Uoe2Rpc3RpbmN0X2lkOnF0LCRkZXZpY2VfaWQ6bnVsbH0sXCJcIik7ZWxzZSBpZighdGhpcy5nZXRfZGlzdGluY3RfaWQoKSl7dmFyIG09dGhpcy5jb25maWcuZ2V0X2RldmljZV9pZChqaSgpKTt0aGlzLnJlZ2lzdGVyX29uY2Uoe2Rpc3RpbmN0X2lkOm0sJGRldmljZV9pZDptfSxcIlwiKSx0aGlzLnBlcnNpc3RlbmNlLnNldF9wcm9wZXJ0eShGdCxcImFub255bW91c1wiKX1yZXR1cm4gc3QoaSxcIm9ucGFnZWhpZGVcImluIHNlbGY/XCJwYWdlaGlkZVwiOlwidW5sb2FkXCIsdGhpcy5faGFuZGxlX3VubG9hZC5iaW5kKHRoaXMpLHtwYXNzaXZlOiExfSksdGhpcy50b29sYmFyLm1heWJlTG9hZFRvb2xiYXIoKSxyLnNlZ21lbnQ/S3IodGhpcywoKCk9PnRoaXMuX3MoKSkpOnRoaXMuX3MoKSxFKHRoaXMuY29uZmlnLl9vbkNhcHR1cmUpJiZ0aGlzLmNvbmZpZy5fb25DYXB0dXJlIT09JG8mJihOLndhcm4oXCJvbkNhcHR1cmUgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBgYmVmb3JlX3NlbmRgIGluc3RlYWRcIiksdGhpcy5vbihcImV2ZW50Q2FwdHVyZWRcIiwodD0+dGhpcy5jb25maWcuX29uQ2FwdHVyZSh0LmV2ZW50LHQpKSkpLHRoaXN9Z2UoaSl7dmFyIGUscixzLG4sbyxsLHUsaDtpZighYXx8IWEuYm9keSlyZXR1cm4gTi5pbmZvKFwiZG9jdW1lbnQgbm90IHJlYWR5IHlldCwgdHJ5aW5nIGFnYWluIGluIDUwMCBtaWxsaXNlY29uZHMuLi5cIiksdm9pZCBzZXRUaW1lb3V0KCgoKT0+e3RoaXMuZ2UoaSl9KSw1MDApO3RoaXMuY29tcHJlc3Npb249dm9pZCAwLGkuc3VwcG9ydGVkQ29tcHJlc3Npb24mJiF0aGlzLmNvbmZpZy5kaXNhYmxlX2NvbXByZXNzaW9uJiYodGhpcy5jb21wcmVzc2lvbj1tKGkuc3VwcG9ydGVkQ29tcHJlc3Npb24sdC5HWmlwSlMpP3QuR1ppcEpTOm0oaS5zdXBwb3J0ZWRDb21wcmVzc2lvbix0LkJhc2U2NCk/dC5CYXNlNjQ6dm9pZCAwKSxudWxsIT0oZT1pLmFuYWx5dGljcykmJmUuZW5kcG9pbnQmJih0aGlzLmFuYWx5dGljc0RlZmF1bHRFbmRwb2ludD1pLmFuYWx5dGljcy5lbmRwb2ludCksdGhpcy5zZXRfY29uZmlnKHtwZXJzb25fcHJvZmlsZXM6dGhpcy51cz90aGlzLnVzOlwiaWRlbnRpZmllZF9vbmx5XCJ9KSxudWxsPT0ocj10aGlzLnNpdGVBcHBzKXx8ci5vblJlbW90ZUNvbmZpZyhpKSxudWxsPT0ocz10aGlzLnNlc3Npb25SZWNvcmRpbmcpfHxzLm9uUmVtb3RlQ29uZmlnKGkpLG51bGw9PShuPXRoaXMuYXV0b2NhcHR1cmUpfHxuLm9uUmVtb3RlQ29uZmlnKGkpLG51bGw9PShvPXRoaXMuaGVhdG1hcHMpfHxvLm9uUmVtb3RlQ29uZmlnKGkpLHRoaXMuc3VydmV5cy5vblJlbW90ZUNvbmZpZyhpKSxudWxsPT0obD10aGlzLndlYlZpdGFsc0F1dG9jYXB0dXJlKXx8bC5vblJlbW90ZUNvbmZpZyhpKSxudWxsPT0odT10aGlzLmV4Y2VwdGlvbk9ic2VydmVyKXx8dS5vblJlbW90ZUNvbmZpZyhpKSxudWxsPT0oaD10aGlzLmRlYWRDbGlja3NBdXRvY2FwdHVyZSl8fGgub25SZW1vdGVDb25maWcoaSl9X3MoKXt0cnl7dGhpcy5jb25maWcubG9hZGVkKHRoaXMpfWNhdGNoKHQpe04uY3JpdGljYWwoXCJgbG9hZGVkYCBmdW5jdGlvbiBmYWlsZWRcIix0KX10aGlzLmJzKCksdGhpcy5jb25maWcuY2FwdHVyZV9wYWdldmlldyYmc2V0VGltZW91dCgoKCk9Pnt0aGlzLmNvbnNlbnQuaXNPcHRlZEluKCkmJnRoaXMud3MoKX0pLDEpLG5ldyBHbih0aGlzKS5sb2FkKCksdGhpcy5mZWF0dXJlRmxhZ3MuZGVjaWRlKCl9YnMoKXt2YXIgdDt0aGlzLmhhc19vcHRlZF9vdXRfY2FwdHVyaW5nKCl8fHRoaXMuY29uZmlnLnJlcXVlc3RfYmF0Y2hpbmcmJihudWxsPT0odD10aGlzLnZzKXx8dC5lbmFibGUoKSl9X2RvbV9sb2FkZWQoKXt0aGlzLmhhc19vcHRlZF9vdXRfY2FwdHVyaW5nKCl8fEcodGhpcy5fX3JlcXVlc3RfcXVldWUsKHQ9PnRoaXMuY3ModCkpKSx0aGlzLl9fcmVxdWVzdF9xdWV1ZT1bXSx0aGlzLmJzKCl9X2hhbmRsZV91bmxvYWQoKXt2YXIgdCxpO3RoaXMuY29uZmlnLnJlcXVlc3RfYmF0Y2hpbmc/KHRoaXMueXMoKSYmdGhpcy5jYXB0dXJlKFwiJHBhZ2VsZWF2ZVwiKSxudWxsPT0odD10aGlzLnZzKXx8dC51bmxvYWQoKSxudWxsPT0oaT10aGlzLmZzKXx8aS51bmxvYWQoKSk6dGhpcy55cygpJiZ0aGlzLmNhcHR1cmUoXCIkcGFnZWxlYXZlXCIsbnVsbCx7dHJhbnNwb3J0Olwic2VuZEJlYWNvblwifSl9cGUodCl7dGhpcy5fX2xvYWRlZCYmKHhvP3RoaXMuX19yZXF1ZXN0X3F1ZXVlLnB1c2godCk6dGhpcy5yYXRlTGltaXRlci5pc1NlcnZlclJhdGVMaW1pdGVkKHQuYmF0Y2hLZXkpfHwodC50cmFuc3BvcnQ9dC50cmFuc3BvcnR8fHRoaXMuY29uZmlnLmFwaV90cmFuc3BvcnQsdC51cmw9WW4odC51cmwse2lwOnRoaXMuY29uZmlnLmlwPzE6MH0pLHQuaGVhZGVycz1CKHt9LHRoaXMuY29uZmlnLnJlcXVlc3RfaGVhZGVycyksdC5jb21wcmVzc2lvbj1cImJlc3QtYXZhaWxhYmxlXCI9PT10LmNvbXByZXNzaW9uP3RoaXMuY29tcHJlc3Npb246dC5jb21wcmVzc2lvbix0LmZldGNoT3B0aW9ucz10LmZldGNoT3B0aW9uc3x8dGhpcy5jb25maWcuZmV0Y2hfb3B0aW9ucywodD0+e3ZhciBpLGUscixzPUIoe30sdCk7cy50aW1lb3V0PXMudGltZW91dHx8NmU0LHMudXJsPVluKHMudXJsLHtfOihuZXcgRGF0ZSkuZ2V0VGltZSgpLnRvU3RyaW5nKCksdmVyOmYuTElCX1ZFUlNJT04sY29tcHJlc3Npb246cy5jb21wcmVzc2lvbn0pO3ZhciBuPW51bGwhPT0oaT1zLnRyYW5zcG9ydCkmJnZvaWQgMCE9PWk/aTpcImZldGNoXCIsbz1udWxsIT09KGU9bnVsbD09KHI9cnQoWm4sKHQ9PnQudHJhbnNwb3J0PT09bikpKT92b2lkIDA6ci5tZXRob2QpJiZ2b2lkIDAhPT1lP2U6Wm5bMF0ubWV0aG9kO2lmKCFvKXRocm93IG5ldyBFcnJvcihcIk5vIGF2YWlsYWJsZSB0cmFuc3BvcnQgbWV0aG9kXCIpO28ocyl9KShCKHt9LHQse2NhbGxiYWNrOmk9Pnt2YXIgZSxyOyh0aGlzLnJhdGVMaW1pdGVyLmNoZWNrRm9yTGltaXRpbmcoaSksaS5zdGF0dXNDb2RlPj00MDApJiYobnVsbD09KGU9KHI9dGhpcy5jb25maWcpLm9uX3JlcXVlc3RfZXJyb3IpfHxlLmNhbGwocixpKSk7bnVsbD09dC5jYWxsYmFja3x8dC5jYWxsYmFjayhpKX19KSkpKX1jcyh0KXt0aGlzLmZzP3RoaXMuZnMucmV0cmlhYmxlUmVxdWVzdCh0KTp0aGlzLnBlKHQpfV9leGVjdXRlX2FycmF5KHQpe3ZhciBpLGU9W10scj1bXSxzPVtdO0codCwodD0+e3QmJihpPXRbMF0seChpKT9zLnB1c2godCk6RSh0KT90LmNhbGwodGhpcyk6eCh0KSYmXCJhbGlhc1wiPT09aT9lLnB1c2godCk6eCh0KSYmLTEhPT1pLmluZGV4T2YoXCJjYXB0dXJlXCIpJiZFKHRoaXNbaV0pP3MucHVzaCh0KTpyLnB1c2godCkpfSkpO3ZhciBuPWZ1bmN0aW9uKHQsaSl7Ryh0LChmdW5jdGlvbih0KXtpZih4KHRbMF0pKXt2YXIgZT1pO0oodCwoZnVuY3Rpb24odCl7ZT1lW3RbMF1dLmFwcGx5KGUsdC5zbGljZSgxKSl9KSl9ZWxzZSB0aGlzW3RbMF1dLmFwcGx5KHRoaXMsdC5zbGljZSgxKSl9KSxpKX07bihlLHRoaXMpLG4ocix0aGlzKSxuKHMsdGhpcyl9Z3MoKXt2YXIgdCxpO3JldHVybihudWxsPT0odD10aGlzLmNvbmZpZy5ib290c3RyYXApP3ZvaWQgMDp0LmZlYXR1cmVGbGFncykmJk9iamVjdC5rZXlzKG51bGw9PShpPXRoaXMuY29uZmlnLmJvb3RzdHJhcCk/dm9pZCAwOmkuZmVhdHVyZUZsYWdzKS5sZW5ndGg+MHx8ITF9cHVzaCh0KXt0aGlzLl9leGVjdXRlX2FycmF5KFt0XSl9Y2FwdHVyZSh0LGksZSl7dmFyIHI7aWYodGhpcy5fX2xvYWRlZCYmdGhpcy5wZXJzaXN0ZW5jZSYmdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UmJnRoaXMudnMpe2lmKCF0aGlzLmNvbnNlbnQuaXNPcHRlZE91dCgpKWlmKCFSKHQpJiZUKHQpKXtpZih0aGlzLmNvbmZpZy5vcHRfb3V0X3VzZXJhZ2VudF9maWx0ZXJ8fCF0aGlzLl9pc19ib3QoKSl7dmFyIHM9bnVsbCE9ZSYmZS5za2lwX2NsaWVudF9yYXRlX2xpbWl0aW5nP3ZvaWQgMDp0aGlzLnJhdGVMaW1pdGVyLmNsaWVudFJhdGVMaW1pdENvbnRleHQoKTtpZihudWxsPT1zfHwhcy5pc1JhdGVMaW1pdGVkKXtudWxsIT1pJiZpLiRjdXJyZW50X3VybCYmIVQobnVsbD09aT92b2lkIDA6aS4kY3VycmVudF91cmwpJiYoTi5lcnJvcihcIkludmFsaWQgYCRjdXJyZW50X3VybGAgcHJvcGVydHkgcHJvdmlkZWQgdG8gYHBvc3Rob2cuY2FwdHVyZWAuIElucHV0IG11c3QgYmUgYSBzdHJpbmcuIElnbm9yaW5nIHByb3ZpZGVkIHZhbHVlLlwiKSxudWxsPT1pfHxkZWxldGUgaS4kY3VycmVudF91cmwpLHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlLnVwZGF0ZV9zZWFyY2hfa2V5d29yZCgpLHRoaXMuY29uZmlnLnNhdmVfY2FtcGFpZ25fcGFyYW1zJiZ0aGlzLnNlc3Npb25QZXJzaXN0ZW5jZS51cGRhdGVfY2FtcGFpZ25fcGFyYW1zKCksdGhpcy5jb25maWcuc2F2ZV9yZWZlcnJlciYmdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UudXBkYXRlX3JlZmVycmVyX2luZm8oKSwodGhpcy5jb25maWcuc2F2ZV9jYW1wYWlnbl9wYXJhbXN8fHRoaXMuY29uZmlnLnNhdmVfcmVmZXJyZXIpJiZ0aGlzLnBlcnNpc3RlbmNlLnNldF9pbml0aWFsX3BlcnNvbl9pbmZvKCk7dmFyIG49bmV3IERhdGUsbz0obnVsbD09ZT92b2lkIDA6ZS50aW1lc3RhbXApfHxuLGE9amkoKSxsPXt1dWlkOmEsZXZlbnQ6dCxwcm9wZXJ0aWVzOnRoaXMuRmkodCxpfHx7fSxvLGEpfTtzJiYobC5wcm9wZXJ0aWVzLiRsaWJfcmF0ZV9saW1pdF9yZW1haW5pbmdfdG9rZW5zPXMucmVtYWluaW5nVG9rZW5zKSwobnVsbD09ZT92b2lkIDA6ZS4kc2V0KSYmKGwuJHNldD1udWxsPT1lP3ZvaWQgMDplLiRzZXQpO3ZhciB1PXRoaXMuU3MobnVsbD09ZT92b2lkIDA6ZS4kc2V0X29uY2UpO3UmJihsLiRzZXRfb25jZT11KSwobD10dChsLG51bGwhPWUmJmUuX25vVHJ1bmNhdGU/bnVsbDp0aGlzLmNvbmZpZy5wcm9wZXJ0aWVzX3N0cmluZ19tYXhfbGVuZ3RoKSkudGltZXN0YW1wPW8sUihudWxsPT1lP3ZvaWQgMDplLnRpbWVzdGFtcCl8fChsLnByb3BlcnRpZXMuJGV2ZW50X3RpbWVfb3ZlcnJpZGVfcHJvdmlkZWQ9ITAsbC5wcm9wZXJ0aWVzLiRldmVudF90aW1lX292ZXJyaWRlX3N5c3RlbV90aW1lPW4pO3ZhciBoPUIoe30sbC5wcm9wZXJ0aWVzLiRzZXQsbC4kc2V0KTtpZihQKGgpfHx0aGlzLnNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyhoKSwhQyh0aGlzLmNvbmZpZy5iZWZvcmVfc2VuZCkpe3ZhciBkPXRoaXMuJHMobCk7aWYoIWQpcmV0dXJuO2w9ZH10aGlzLm9zLmVtaXQoXCJldmVudENhcHR1cmVkXCIsbCk7dmFyIHY9e21ldGhvZDpcIlBPU1RcIix1cmw6bnVsbCE9PShyPW51bGw9PWU/dm9pZCAwOmUuX3VybCkmJnZvaWQgMCE9PXI/cjp0aGlzLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJhcGlcIix0aGlzLmFuYWx5dGljc0RlZmF1bHRFbmRwb2ludCksZGF0YTpsLGNvbXByZXNzaW9uOlwiYmVzdC1hdmFpbGFibGVcIixiYXRjaEtleTpudWxsPT1lP3ZvaWQgMDplLl9iYXRjaEtleX07cmV0dXJuIXRoaXMuY29uZmlnLnJlcXVlc3RfYmF0Y2hpbmd8fGUmJihudWxsPT1lfHwhZS5fYmF0Y2hLZXkpfHxudWxsIT1lJiZlLnNlbmRfaW5zdGFudGx5P3RoaXMuY3Modik6dGhpcy52cy5lbnF1ZXVlKHYpLGx9Ti5jcml0aWNhbChcIlRoaXMgY2FwdHVyZSBjYWxsIGlzIGlnbm9yZWQgZHVlIHRvIGNsaWVudCByYXRlIGxpbWl0aW5nLlwiKX19ZWxzZSBOLmVycm9yKFwiTm8gZXZlbnQgbmFtZSBwcm92aWRlZCB0byBwb3N0aG9nLmNhcHR1cmVcIil9ZWxzZSBOLnVuaW5pdGlhbGl6ZWRXYXJuaW5nKFwicG9zdGhvZy5jYXB0dXJlXCIpfUFlKHQpe3JldHVybiB0aGlzLm9uKFwiZXZlbnRDYXB0dXJlZFwiLChpPT50KGkuZXZlbnQsaSkpKX1GaSh0LGksZSxyKXtpZihlPWV8fG5ldyBEYXRlLCF0aGlzLnBlcnNpc3RlbmNlfHwhdGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpcmV0dXJuIGk7dmFyIHM9dGhpcy5wZXJzaXN0ZW5jZS5yZW1vdmVfZXZlbnRfdGltZXIodCksbj1CKHt9LGkpO2lmKG4udG9rZW49dGhpcy5jb25maWcudG9rZW4sdGhpcy5jb25maWcuX19wcmV2aWV3X2V4cGVyaW1lbnRhbF9jb29raWVsZXNzX21vZGUmJihuLiRjb29raWVsZXNzX21vZGU9ITApLFwiJHNuYXBzaG90XCI9PT10KXt2YXIgbz1CKHt9LHRoaXMucGVyc2lzdGVuY2UucHJvcGVydGllcygpLHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlLnByb3BlcnRpZXMoKSk7cmV0dXJuIG4uZGlzdGluY3RfaWQ9by5kaXN0aW5jdF9pZCwoIVQobi5kaXN0aW5jdF9pZCkmJiFGKG4uZGlzdGluY3RfaWQpfHxNKG4uZGlzdGluY3RfaWQpKSYmTi5lcnJvcihcIkludmFsaWQgZGlzdGluY3RfaWQgZm9yIHJlcGxheSBldmVudC4gVGhpcyBpbmRpY2F0ZXMgYSBidWcgaW4geW91ciBpbXBsZW1lbnRhdGlvblwiKSxufXZhciBsLHU9a24odGhpcy5jb25maWcubWFza19wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXMsdGhpcy5jb25maWcuY3VzdG9tX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyk7aWYodGhpcy5zZXNzaW9uTWFuYWdlcil7dmFye3Nlc3Npb25JZDpoLHdpbmRvd0lkOmR9PXRoaXMuc2Vzc2lvbk1hbmFnZXIuY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQoKTtuLiRzZXNzaW9uX2lkPWgsbi4kd2luZG93X2lkPWR9dGhpcy5zZXNzaW9uUHJvcHNNYW5hZ2VyJiZWKG4sdGhpcy5zZXNzaW9uUHJvcHNNYW5hZ2VyLmdldFNlc3Npb25Qcm9wcygpKTt0cnl7dmFyIGM7dGhpcy5zZXNzaW9uUmVjb3JkaW5nJiZWKG4sdGhpcy5zZXNzaW9uUmVjb3JkaW5nLnNka0RlYnVnUHJvcGVydGllcyksbi4kc2RrX2RlYnVnX3JldHJ5X3F1ZXVlX3NpemU9bnVsbD09KGM9dGhpcy5mcyk/dm9pZCAwOmMubGVuZ3RofWNhdGNoKHQpe24uJHNka19kZWJ1Z19lcnJvcl9jYXB0dXJpbmdfcHJvcGVydGllcz1TdHJpbmcodCl9aWYodGhpcy5yZXF1ZXN0Um91dGVyLnJlZ2lvbj09PWNvLkNVU1RPTSYmKG4uJGxpYl9jdXN0b21fYXBpX2hvc3Q9dGhpcy5jb25maWcuYXBpX2hvc3QpLGw9XCIkcGFnZXZpZXdcIj09PXQ/dGhpcy5wYWdlVmlld01hbmFnZXIuZG9QYWdlVmlldyhlLHIpOlwiJHBhZ2VsZWF2ZVwiPT09dD90aGlzLnBhZ2VWaWV3TWFuYWdlci5kb1BhZ2VMZWF2ZShlKTp0aGlzLnBhZ2VWaWV3TWFuYWdlci5kb0V2ZW50KCksbj1WKG4sbCksXCIkcGFnZXZpZXdcIj09PXQmJmEmJihuLnRpdGxlPWEudGl0bGUpLCFSKHMpKXt2YXIgZj1lLmdldFRpbWUoKS1zO24uJGR1cmF0aW9uPXBhcnNlRmxvYXQoKGYvMWUzKS50b0ZpeGVkKDMpKX12JiZ0aGlzLmNvbmZpZy5vcHRfb3V0X3VzZXJhZ2VudF9maWx0ZXImJihuLiRicm93c2VyX3R5cGU9dGhpcy5faXNfYm90KCk/XCJib3RcIjpcImJyb3dzZXJcIiksKG49Vih7fSx1LHRoaXMucGVyc2lzdGVuY2UucHJvcGVydGllcygpLHRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlLnByb3BlcnRpZXMoKSxuKSkuJGlzX2lkZW50aWZpZWQ9dGhpcy5faXNJZGVudGlmaWVkKCkseCh0aGlzLmNvbmZpZy5wcm9wZXJ0eV9kZW55bGlzdCk/Sih0aGlzLmNvbmZpZy5wcm9wZXJ0eV9kZW55bGlzdCwoZnVuY3Rpb24odCl7ZGVsZXRlIG5bdF19KSk6Ti5lcnJvcihcIkludmFsaWQgdmFsdWUgZm9yIHByb3BlcnR5X2RlbnlsaXN0IGNvbmZpZzogXCIrdGhpcy5jb25maWcucHJvcGVydHlfZGVueWxpc3QrXCIgb3IgcHJvcGVydHlfYmxhY2tsaXN0IGNvbmZpZzogXCIrdGhpcy5jb25maWcucHJvcGVydHlfYmxhY2tsaXN0KTt2YXIgcD10aGlzLmNvbmZpZy5zYW5pdGl6ZV9wcm9wZXJ0aWVzO3AmJihOLmVycm9yKFwic2FuaXRpemVfcHJvcGVydGllcyBpcyBkZXByZWNhdGVkLiBVc2UgYmVmb3JlX3NlbmQgaW5zdGVhZFwiKSxuPXAobix0KSk7dmFyIGc9dGhpcy5rcygpO3JldHVybiBuLiRwcm9jZXNzX3BlcnNvbl9wcm9maWxlPWcsZyYmdGhpcy54cyhcIl9jYWxjdWxhdGVfZXZlbnRfcHJvcGVydGllc1wiKSxufVNzKHQpe3ZhciBpO2lmKCF0aGlzLnBlcnNpc3RlbmNlfHwhdGhpcy5rcygpKXJldHVybiB0O2lmKHRoaXMubnMpcmV0dXJuIHQ7dmFyIGU9dGhpcy5wZXJzaXN0ZW5jZS5nZXRfaW5pdGlhbF9wcm9wcygpLHI9bnVsbD09KGk9dGhpcy5zZXNzaW9uUHJvcHNNYW5hZ2VyKT92b2lkIDA6aS5nZXRTZXRPbmNlUHJvcHMoKSxzPVYoe30sZSxyfHx7fSx0fHx7fSksbj10aGlzLmNvbmZpZy5zYW5pdGl6ZV9wcm9wZXJ0aWVzO3JldHVybiBuJiYoTi5lcnJvcihcInNhbml0aXplX3Byb3BlcnRpZXMgaXMgZGVwcmVjYXRlZC4gVXNlIGJlZm9yZV9zZW5kIGluc3RlYWRcIikscz1uKHMsXCIkc2V0X29uY2VcIikpLHRoaXMubnM9ITAsUChzKT92b2lkIDA6c31yZWdpc3Rlcih0LGkpe3ZhciBlO251bGw9PShlPXRoaXMucGVyc2lzdGVuY2UpfHxlLnJlZ2lzdGVyKHQsaSl9cmVnaXN0ZXJfb25jZSh0LGksZSl7dmFyIHI7bnVsbD09KHI9dGhpcy5wZXJzaXN0ZW5jZSl8fHIucmVnaXN0ZXJfb25jZSh0LGksZSl9cmVnaXN0ZXJfZm9yX3Nlc3Npb24odCl7dmFyIGk7bnVsbD09KGk9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpfHxpLnJlZ2lzdGVyKHQpfXVucmVnaXN0ZXIodCl7dmFyIGk7bnVsbD09KGk9dGhpcy5wZXJzaXN0ZW5jZSl8fGkudW5yZWdpc3Rlcih0KX11bnJlZ2lzdGVyX2Zvcl9zZXNzaW9uKHQpe3ZhciBpO251bGw9PShpPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKXx8aS51bnJlZ2lzdGVyKHQpfUVzKHQsaSl7dGhpcy5yZWdpc3Rlcih7W3RdOml9KX1nZXRGZWF0dXJlRmxhZyh0LGkpe3JldHVybiB0aGlzLmZlYXR1cmVGbGFncy5nZXRGZWF0dXJlRmxhZyh0LGkpfWdldEZlYXR1cmVGbGFnUGF5bG9hZCh0KXt2YXIgaT10aGlzLmZlYXR1cmVGbGFncy5nZXRGZWF0dXJlRmxhZ1BheWxvYWQodCk7dHJ5e3JldHVybiBKU09OLnBhcnNlKGkpfWNhdGNoKHQpe3JldHVybiBpfX1pc0ZlYXR1cmVFbmFibGVkKHQsaSl7cmV0dXJuIHRoaXMuZmVhdHVyZUZsYWdzLmlzRmVhdHVyZUVuYWJsZWQodCxpKX1yZWxvYWRGZWF0dXJlRmxhZ3MoKXt0aGlzLmZlYXR1cmVGbGFncy5yZWxvYWRGZWF0dXJlRmxhZ3MoKX11cGRhdGVFYXJseUFjY2Vzc0ZlYXR1cmVFbnJvbGxtZW50KHQsaSl7dGhpcy5mZWF0dXJlRmxhZ3MudXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlRW5yb2xsbWVudCh0LGkpfWdldEVhcmx5QWNjZXNzRmVhdHVyZXModCxpLGUpe3JldHVybiB2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy5mZWF0dXJlRmxhZ3MuZ2V0RWFybHlBY2Nlc3NGZWF0dXJlcyh0LGksZSl9b24odCxpKXtyZXR1cm4gdGhpcy5vcy5vbih0LGkpfW9uRmVhdHVyZUZsYWdzKHQpe3JldHVybiB0aGlzLmZlYXR1cmVGbGFncy5vbkZlYXR1cmVGbGFncyh0KX1vblN1cnZleXNMb2FkZWQodCl7cmV0dXJuIHRoaXMuc3VydmV5cy5vblN1cnZleXNMb2FkZWQodCl9b25TZXNzaW9uSWQodCl7dmFyIGksZTtyZXR1cm4gbnVsbCE9PShpPW51bGw9PShlPXRoaXMuc2Vzc2lvbk1hbmFnZXIpP3ZvaWQgMDplLm9uU2Vzc2lvbklkKHQpKSYmdm9pZCAwIT09aT9pOigpPT57fX1nZXRTdXJ2ZXlzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuc3VydmV5cy5nZXRTdXJ2ZXlzKHQsaSl9Z2V0QWN0aXZlTWF0Y2hpbmdTdXJ2ZXlzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITEpLHRoaXMuc3VydmV5cy5nZXRBY3RpdmVNYXRjaGluZ1N1cnZleXModCxpKX1yZW5kZXJTdXJ2ZXkodCxpKXt0aGlzLnN1cnZleXMucmVuZGVyU3VydmV5KHQsaSl9Y2FuUmVuZGVyU3VydmV5KHQpe3JldHVybiB0aGlzLnN1cnZleXMuY2FuUmVuZGVyU3VydmV5KHQpfWNhblJlbmRlclN1cnZleUFzeW5jKHQsaSl7cmV0dXJuIHZvaWQgMD09PWkmJihpPSExKSx0aGlzLnN1cnZleXMuY2FuUmVuZGVyU3VydmV5QXN5bmModCxpKX1pZGVudGlmeSh0LGksZSl7aWYoIXRoaXMuX19sb2FkZWR8fCF0aGlzLnBlcnNpc3RlbmNlKXJldHVybiBOLnVuaW5pdGlhbGl6ZWRXYXJuaW5nKFwicG9zdGhvZy5pZGVudGlmeVwiKTtpZihGKHQpJiYodD10LnRvU3RyaW5nKCksTi53YXJuKFwiVGhlIGZpcnN0IGFyZ3VtZW50IHRvIHBvc3Rob2cuaWRlbnRpZnkgd2FzIGEgbnVtYmVyLCBidXQgaXQgc2hvdWxkIGJlIGEgc3RyaW5nLiBJdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBzdHJpbmcuXCIpKSx0KXtpZihbXCJkaXN0aW5jdF9pZFwiLFwiZGlzdGluY3RpZFwiXS5pbmNsdWRlcyh0LnRvTG93ZXJDYXNlKCkpKU4uY3JpdGljYWwoJ1RoZSBzdHJpbmcgXCInK3QrJ1wiIHdhcyBzZXQgaW4gcG9zdGhvZy5pZGVudGlmeSB3aGljaCBpbmRpY2F0ZXMgYW4gZXJyb3IuIFRoaXMgSUQgc2hvdWxkIGJlIHVuaXF1ZSB0byB0aGUgdXNlciBhbmQgbm90IGEgaGFyZGNvZGVkIHN0cmluZy4nKTtlbHNlIGlmKHRoaXMueHMoXCJwb3N0aG9nLmlkZW50aWZ5XCIpKXt2YXIgcj10aGlzLmdldF9kaXN0aW5jdF9pZCgpO2lmKHRoaXMucmVnaXN0ZXIoeyR1c2VyX2lkOnR9KSwhdGhpcy5nZXRfcHJvcGVydHkoXCIkZGV2aWNlX2lkXCIpKXt2YXIgcz1yO3RoaXMucmVnaXN0ZXJfb25jZSh7JGhhZF9wZXJzaXN0ZWRfZGlzdGluY3RfaWQ6ITAsJGRldmljZV9pZDpzfSxcIlwiKX10IT09ciYmdCE9PXRoaXMuZ2V0X3Byb3BlcnR5KG90KSYmKHRoaXMudW5yZWdpc3RlcihvdCksdGhpcy5yZWdpc3Rlcih7ZGlzdGluY3RfaWQ6dH0pKTt2YXIgbj1cImFub255bW91c1wiPT09KHRoaXMucGVyc2lzdGVuY2UuZ2V0X3Byb3BlcnR5KEZ0KXx8XCJhbm9ueW1vdXNcIik7dCE9PXImJm4/KHRoaXMucGVyc2lzdGVuY2Uuc2V0X3Byb3BlcnR5KEZ0LFwiaWRlbnRpZmllZFwiKSx0aGlzLnNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyhCKHt9LGV8fHt9LGl8fHt9KSwhMSksdGhpcy5jYXB0dXJlKFwiJGlkZW50aWZ5XCIse2Rpc3RpbmN0X2lkOnQsJGFub25fZGlzdGluY3RfaWQ6cn0seyRzZXQ6aXx8e30sJHNldF9vbmNlOmV8fHt9fSksdGhpcy5ocz1fbyh0LGksZSksdGhpcy5mZWF0dXJlRmxhZ3Muc2V0QW5vbnltb3VzRGlzdGluY3RJZChyKSk6KGl8fGUpJiZ0aGlzLnNldFBlcnNvblByb3BlcnRpZXMoaSxlKSx0IT09ciYmKHRoaXMucmVsb2FkRmVhdHVyZUZsYWdzKCksdGhpcy51bnJlZ2lzdGVyKEN0KSl9fWVsc2UgTi5lcnJvcihcIlVuaXF1ZSB1c2VyIGlkIGhhcyBub3QgYmVlbiBzZXQgaW4gcG9zdGhvZy5pZGVudGlmeVwiKX1zZXRQZXJzb25Qcm9wZXJ0aWVzKHQsaSl7aWYoKHR8fGkpJiZ0aGlzLnhzKFwicG9zdGhvZy5zZXRQZXJzb25Qcm9wZXJ0aWVzXCIpKXt2YXIgZT1fbyh0aGlzLmdldF9kaXN0aW5jdF9pZCgpLHQsaSk7dGhpcy5ocyE9PWU/KHRoaXMuc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKEIoe30saXx8e30sdHx8e30pKSx0aGlzLmNhcHR1cmUoXCIkc2V0XCIseyRzZXQ6dHx8e30sJHNldF9vbmNlOml8fHt9fSksdGhpcy5ocz1lKTpOLmluZm8oXCJBIGR1cGxpY2F0ZSBzZXRQZXJzb25Qcm9wZXJ0aWVzIGNhbGwgd2FzIG1hZGUgd2l0aCB0aGUgc2FtZSBwcm9wZXJ0aWVzLiBJdCBoYXMgYmVlbiBpZ25vcmVkLlwiKX19Z3JvdXAodCxpLGUpe2lmKHQmJmkpe2lmKHRoaXMueHMoXCJwb3N0aG9nLmdyb3VwXCIpKXt2YXIgcj10aGlzLmdldEdyb3VwcygpO3JbdF0hPT1pJiZ0aGlzLnJlc2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3ModCksdGhpcy5yZWdpc3Rlcih7JGdyb3VwczpCKHt9LHIse1t0XTppfSl9KSxlJiYodGhpcy5jYXB0dXJlKFwiJGdyb3VwaWRlbnRpZnlcIix7JGdyb3VwX3R5cGU6dCwkZ3JvdXBfa2V5OmksJGdyb3VwX3NldDplfSksdGhpcy5zZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh7W3RdOmV9KSksclt0XT09PWl8fGV8fHRoaXMucmVsb2FkRmVhdHVyZUZsYWdzKCl9fWVsc2UgTi5lcnJvcihcInBvc3Rob2cuZ3JvdXAgcmVxdWlyZXMgYSBncm91cCB0eXBlIGFuZCBncm91cCBrZXlcIil9cmVzZXRHcm91cHMoKXt0aGlzLnJlZ2lzdGVyKHskZ3JvdXBzOnt9fSksdGhpcy5yZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKCksdGhpcy5yZWxvYWRGZWF0dXJlRmxhZ3MoKX1zZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3ModCxpKXt2b2lkIDA9PT1pJiYoaT0hMCksdGhpcy5mZWF0dXJlRmxhZ3Muc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzKHQsaSl9cmVzZXRQZXJzb25Qcm9wZXJ0aWVzRm9yRmxhZ3MoKXt0aGlzLmZlYXR1cmVGbGFncy5yZXNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncygpfXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzKHQsaSl7dm9pZCAwPT09aSYmKGk9ITApLHRoaXMueHMoXCJwb3N0aG9nLnNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzXCIpJiZ0aGlzLmZlYXR1cmVGbGFncy5zZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh0LGkpfXJlc2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3ModCl7dGhpcy5mZWF0dXJlRmxhZ3MucmVzZXRHcm91cFByb3BlcnRpZXNGb3JGbGFncyh0KX1yZXNldCh0KXt2YXIgaSxlLHIscztpZihOLmluZm8oXCJyZXNldFwiKSwhdGhpcy5fX2xvYWRlZClyZXR1cm4gTi51bmluaXRpYWxpemVkV2FybmluZyhcInBvc3Rob2cucmVzZXRcIik7dmFyIG49dGhpcy5nZXRfcHJvcGVydHkoXCIkZGV2aWNlX2lkXCIpO2lmKHRoaXMuY29uc2VudC5yZXNldCgpLG51bGw9PShpPXRoaXMucGVyc2lzdGVuY2UpfHxpLmNsZWFyKCksbnVsbD09KGU9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpfHxlLmNsZWFyKCksdGhpcy5zdXJ2ZXlzLnJlc2V0KCksbnVsbD09KHI9dGhpcy5wZXJzaXN0ZW5jZSl8fHIuc2V0X3Byb3BlcnR5KEZ0LFwiYW5vbnltb3VzXCIpLG51bGw9PShzPXRoaXMuc2Vzc2lvbk1hbmFnZXIpfHxzLnJlc2V0U2Vzc2lvbklkKCksdGhpcy5ocz1udWxsLHRoaXMuY29uZmlnLl9fcHJldmlld19leHBlcmltZW50YWxfY29va2llbGVzc19tb2RlKXRoaXMucmVnaXN0ZXJfb25jZSh7ZGlzdGluY3RfaWQ6cXQsJGRldmljZV9pZDpudWxsfSxcIlwiKTtlbHNle3ZhciBvPXRoaXMuY29uZmlnLmdldF9kZXZpY2VfaWQoamkoKSk7dGhpcy5yZWdpc3Rlcl9vbmNlKHtkaXN0aW5jdF9pZDpvLCRkZXZpY2VfaWQ6dD9vOm59LFwiXCIpfXRoaXMucmVnaXN0ZXIoeyRsYXN0X3Bvc3Rob2dfcmVzZXQ6KG5ldyBEYXRlKS50b0lTT1N0cmluZygpfSwxKX1nZXRfZGlzdGluY3RfaWQoKXtyZXR1cm4gdGhpcy5nZXRfcHJvcGVydHkoXCJkaXN0aW5jdF9pZFwiKX1nZXRHcm91cHMoKXtyZXR1cm4gdGhpcy5nZXRfcHJvcGVydHkoXCIkZ3JvdXBzXCIpfHx7fX1nZXRfc2Vzc2lvbl9pZCgpe3ZhciB0LGk7cmV0dXJuIG51bGwhPT0odD1udWxsPT0oaT10aGlzLnNlc3Npb25NYW5hZ2VyKT92b2lkIDA6aS5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCkuc2Vzc2lvbklkKSYmdm9pZCAwIT09dD90OlwiXCJ9Z2V0X3Nlc3Npb25fcmVwbGF5X3VybCh0KXtpZighdGhpcy5zZXNzaW9uTWFuYWdlcilyZXR1cm5cIlwiO3ZhcntzZXNzaW9uSWQ6aSxzZXNzaW9uU3RhcnRUaW1lc3RhbXA6ZX09dGhpcy5zZXNzaW9uTWFuYWdlci5jaGVja0FuZEdldFNlc3Npb25BbmRXaW5kb3dJZCghMCkscj10aGlzLnJlcXVlc3RSb3V0ZXIuZW5kcG9pbnRGb3IoXCJ1aVwiLFwiL3Byb2plY3QvXCIrdGhpcy5jb25maWcudG9rZW4rXCIvcmVwbGF5L1wiK2kpO2lmKG51bGwhPXQmJnQud2l0aFRpbWVzdGFtcCYmZSl7dmFyIHMsbj1udWxsIT09KHM9dC50aW1lc3RhbXBMb29rQmFjaykmJnZvaWQgMCE9PXM/czoxMDtpZighZSlyZXR1cm4gcjtyKz1cIj90PVwiK01hdGgubWF4KE1hdGguZmxvb3IoKChuZXcgRGF0ZSkuZ2V0VGltZSgpLWUpLzFlMyktbiwwKX1yZXR1cm4gcn1hbGlhcyh0LGkpe3JldHVybiB0PT09dGhpcy5nZXRfcHJvcGVydHkobnQpPyhOLmNyaXRpY2FsKFwiQXR0ZW1wdGluZyB0byBjcmVhdGUgYWxpYXMgZm9yIGV4aXN0aW5nIFBlb3BsZSB1c2VyIC0gYWJvcnRpbmcuXCIpLC0yKTp0aGlzLnhzKFwicG9zdGhvZy5hbGlhc1wiKT8oUihpKSYmKGk9dGhpcy5nZXRfZGlzdGluY3RfaWQoKSksdCE9PWk/KHRoaXMuRXMob3QsdCksdGhpcy5jYXB0dXJlKFwiJGNyZWF0ZV9hbGlhc1wiLHthbGlhczp0LGRpc3RpbmN0X2lkOml9KSk6KE4ud2FybihcImFsaWFzIG1hdGNoZXMgY3VycmVudCBkaXN0aW5jdF9pZCAtIHNraXBwaW5nIGFwaSBjYWxsLlwiKSx0aGlzLmlkZW50aWZ5KHQpLC0xKSk6dm9pZCAwfXNldF9jb25maWcodCl7dmFyIGksZSxyLHMsbj1CKHt9LHRoaXMuY29uZmlnKTtJKHQpJiYoVih0aGlzLmNvbmZpZyxJbyh0KSksbnVsbD09KGk9dGhpcy5wZXJzaXN0ZW5jZSl8fGkudXBkYXRlX2NvbmZpZyh0aGlzLmNvbmZpZyxuKSx0aGlzLnNlc3Npb25QZXJzaXN0ZW5jZT1cInNlc3Npb25TdG9yYWdlXCI9PT10aGlzLmNvbmZpZy5wZXJzaXN0ZW5jZXx8XCJtZW1vcnlcIj09PXRoaXMuY29uZmlnLnBlcnNpc3RlbmNlP3RoaXMucGVyc2lzdGVuY2U6bmV3IERuKEIoe30sdGhpcy5jb25maWcse3BlcnNpc3RlbmNlOlwic2Vzc2lvblN0b3JhZ2VcIn0pKSxHaS5DKCkmJlwidHJ1ZVwiPT09R2kuQShcInBoX2RlYnVnXCIpJiYodGhpcy5jb25maWcuZGVidWc9ITApLHRoaXMuY29uZmlnLmRlYnVnJiYoZi5ERUJVRz0hMCxOLmluZm8oXCJzZXRfY29uZmlnXCIsSlNPTi5zdHJpbmdpZnkoe2NvbmZpZzp0LG9sZENvbmZpZzpuLG5ld0NvbmZpZzpCKHt9LHRoaXMuY29uZmlnKX0sbnVsbCwyKSkpLG51bGw9PShlPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fGUuc3RhcnRJZkVuYWJsZWRPclN0b3AoKSxudWxsPT0ocj10aGlzLmF1dG9jYXB0dXJlKXx8ci5zdGFydElmRW5hYmxlZCgpLG51bGw9PShzPXRoaXMuaGVhdG1hcHMpfHxzLnN0YXJ0SWZFbmFibGVkKCksdGhpcy5zdXJ2ZXlzLmxvYWRJZkVuYWJsZWQoKSx0aGlzLnBzKCkpfXN0YXJ0U2Vzc2lvblJlY29yZGluZyh0KXt2YXIgaT0hMD09PXQsZT17c2FtcGxpbmc6aXx8IShudWxsPT10fHwhdC5zYW1wbGluZyksbGlua2VkX2ZsYWc6aXx8IShudWxsPT10fHwhdC5saW5rZWRfZmxhZyksdXJsX3RyaWdnZXI6aXx8IShudWxsPT10fHwhdC51cmxfdHJpZ2dlciksZXZlbnRfdHJpZ2dlcjppfHwhKG51bGw9PXR8fCF0LmV2ZW50X3RyaWdnZXIpfTtpZihPYmplY3QudmFsdWVzKGUpLnNvbWUoQm9vbGVhbikpe3ZhciByLHMsbixvLGE7aWYobnVsbD09KHI9dGhpcy5zZXNzaW9uTWFuYWdlcil8fHIuY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQoKSxlLnNhbXBsaW5nKW51bGw9PShzPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fHMub3ZlcnJpZGVTYW1wbGluZygpO2lmKGUubGlua2VkX2ZsYWcpbnVsbD09KG49dGhpcy5zZXNzaW9uUmVjb3JkaW5nKXx8bi5vdmVycmlkZUxpbmtlZEZsYWcoKTtpZihlLnVybF90cmlnZ2VyKW51bGw9PShvPXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fG8ub3ZlcnJpZGVUcmlnZ2VyKFwidXJsXCIpO2lmKGUuZXZlbnRfdHJpZ2dlciludWxsPT0oYT10aGlzLnNlc3Npb25SZWNvcmRpbmcpfHxhLm92ZXJyaWRlVHJpZ2dlcihcImV2ZW50XCIpfXRoaXMuc2V0X2NvbmZpZyh7ZGlzYWJsZV9zZXNzaW9uX3JlY29yZGluZzohMX0pfXN0b3BTZXNzaW9uUmVjb3JkaW5nKCl7dGhpcy5zZXRfY29uZmlnKHtkaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nOiEwfSl9c2Vzc2lvblJlY29yZGluZ1N0YXJ0ZWQoKXt2YXIgdDtyZXR1cm4hKG51bGw9PSh0PXRoaXMuc2Vzc2lvblJlY29yZGluZyl8fCF0LnN0YXJ0ZWQpfWNhcHR1cmVFeGNlcHRpb24odCxpKXt2YXIgZT1uZXcgRXJyb3IoXCJQb3N0SG9nIHN5bnRoZXRpY0V4Y2VwdGlvblwiKTt0aGlzLmV4Y2VwdGlvbnMuc2VuZEV4Y2VwdGlvbkV2ZW50KEIoe30sQWUoKHQ9PnQgaW5zdGFuY2VvZiBFcnJvcikodCk/e2Vycm9yOnQsZXZlbnQ6dC5tZXNzYWdlfTp7ZXZlbnQ6dH0se3N5bnRoZXRpY0V4Y2VwdGlvbjplfSksaSkpfWxvYWRUb29sYmFyKHQpe3JldHVybiB0aGlzLnRvb2xiYXIubG9hZFRvb2xiYXIodCl9Z2V0X3Byb3BlcnR5KHQpe3ZhciBpO3JldHVybiBudWxsPT0oaT10aGlzLnBlcnNpc3RlbmNlKT92b2lkIDA6aS5wcm9wc1t0XX1nZXRTZXNzaW9uUHJvcGVydHkodCl7dmFyIGk7cmV0dXJuIG51bGw9PShpPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKT92b2lkIDA6aS5wcm9wc1t0XX10b1N0cmluZygpe3ZhciB0LGk9bnVsbCE9PSh0PXRoaXMuY29uZmlnLm5hbWUpJiZ2b2lkIDAhPT10P3Q6a287cmV0dXJuIGkhPT1rbyYmKGk9a28rXCIuXCIraSksaX1faXNJZGVudGlmaWVkKCl7dmFyIHQsaTtyZXR1cm5cImlkZW50aWZpZWRcIj09PShudWxsPT0odD10aGlzLnBlcnNpc3RlbmNlKT92b2lkIDA6dC5nZXRfcHJvcGVydHkoRnQpKXx8XCJpZGVudGlmaWVkXCI9PT0obnVsbD09KGk9dGhpcy5zZXNzaW9uUGVyc2lzdGVuY2UpP3ZvaWQgMDppLmdldF9wcm9wZXJ0eShGdCkpfWtzKCl7dmFyIHQsaSxlLHI7cmV0dXJuIShcIm5ldmVyXCI9PT10aGlzLmNvbmZpZy5wZXJzb25fcHJvZmlsZXN8fFwiaWRlbnRpZmllZF9vbmx5XCI9PT10aGlzLmNvbmZpZy5wZXJzb25fcHJvZmlsZXMmJiF0aGlzLl9pc0lkZW50aWZpZWQoKSYmUCh0aGlzLmdldEdyb3VwcygpKSYmKG51bGw9PSh0PXRoaXMucGVyc2lzdGVuY2UpfHxudWxsPT0oaT10LnByb3BzKXx8IWlbb3RdKSYmKG51bGw9PShlPXRoaXMucGVyc2lzdGVuY2UpfHxudWxsPT0ocj1lLnByb3BzKXx8IXJbenRdKSl9eXMoKXtyZXR1cm4hMD09PXRoaXMuY29uZmlnLmNhcHR1cmVfcGFnZWxlYXZlfHxcImlmX2NhcHR1cmVfcGFnZXZpZXdcIj09PXRoaXMuY29uZmlnLmNhcHR1cmVfcGFnZWxlYXZlJiYoITA9PT10aGlzLmNvbmZpZy5jYXB0dXJlX3BhZ2V2aWV3fHxcImhpc3RvcnlfY2hhbmdlXCI9PT10aGlzLmNvbmZpZy5jYXB0dXJlX3BhZ2V2aWV3KX1jcmVhdGVQZXJzb25Qcm9maWxlKCl7dGhpcy5rcygpfHx0aGlzLnhzKFwicG9zdGhvZy5jcmVhdGVQZXJzb25Qcm9maWxlXCIpJiZ0aGlzLnNldFBlcnNvblByb3BlcnRpZXMoe30se30pfXhzKHQpe3JldHVyblwibmV2ZXJcIj09PXRoaXMuY29uZmlnLnBlcnNvbl9wcm9maWxlcz8oTi5lcnJvcih0Kycgd2FzIGNhbGxlZCwgYnV0IHByb2Nlc3NfcGVyc29uIGlzIHNldCB0byBcIm5ldmVyXCIuIFRoaXMgY2FsbCB3aWxsIGJlIGlnbm9yZWQuJyksITEpOih0aGlzLkVzKHp0LCEwKSwhMCl9cHMoKXt2YXIgdCxpLGUscixzPXRoaXMuY29uc2VudC5pc09wdGVkT3V0KCksbj10aGlzLmNvbmZpZy5vcHRfb3V0X3BlcnNpc3RlbmNlX2J5X2RlZmF1bHQsbz10aGlzLmNvbmZpZy5kaXNhYmxlX3BlcnNpc3RlbmNlfHxzJiYhIW47KG51bGw9PSh0PXRoaXMucGVyc2lzdGVuY2UpP3ZvaWQgMDp0LlNlKSE9PW8mJihudWxsPT0oZT10aGlzLnBlcnNpc3RlbmNlKXx8ZS5zZXRfZGlzYWJsZWQobykpOyhudWxsPT0oaT10aGlzLnNlc3Npb25QZXJzaXN0ZW5jZSk/dm9pZCAwOmkuU2UpIT09byYmKG51bGw9PShyPXRoaXMuc2Vzc2lvblBlcnNpc3RlbmNlKXx8ci5zZXRfZGlzYWJsZWQobykpfW9wdF9pbl9jYXB0dXJpbmcodCl7dmFyIGk7KHRoaXMuY29uc2VudC5vcHRJbk91dCghMCksdGhpcy5wcygpLFIobnVsbD09dD92b2lkIDA6dC5jYXB0dXJlRXZlbnROYW1lKXx8bnVsbCE9dCYmdC5jYXB0dXJlRXZlbnROYW1lKSYmdGhpcy5jYXB0dXJlKG51bGwhPT0oaT1udWxsPT10P3ZvaWQgMDp0LmNhcHR1cmVFdmVudE5hbWUpJiZ2b2lkIDAhPT1pP2k6XCIkb3B0X2luXCIsbnVsbD09dD92b2lkIDA6dC5jYXB0dXJlUHJvcGVydGllcyx7c2VuZF9pbnN0YW50bHk6ITB9KTt0aGlzLmNvbmZpZy5jYXB0dXJlX3BhZ2V2aWV3JiZ0aGlzLndzKCl9b3B0X291dF9jYXB0dXJpbmcoKXt0aGlzLmNvbnNlbnQub3B0SW5PdXQoITEpLHRoaXMucHMoKX1oYXNfb3B0ZWRfaW5fY2FwdHVyaW5nKCl7cmV0dXJuIHRoaXMuY29uc2VudC5pc09wdGVkSW4oKX1oYXNfb3B0ZWRfb3V0X2NhcHR1cmluZygpe3JldHVybiB0aGlzLmNvbnNlbnQuaXNPcHRlZE91dCgpfWNsZWFyX29wdF9pbl9vdXRfY2FwdHVyaW5nKCl7dGhpcy5jb25zZW50LnJlc2V0KCksdGhpcy5wcygpfV9pc19ib3QoKXtyZXR1cm4gbz9nbyhvLHRoaXMuY29uZmlnLmN1c3RvbV9ibG9ja2VkX3VzZXJhZ2VudHMpOnZvaWQgMH13cygpe2EmJiF0aGlzLmxzJiYodGhpcy5scz0hMCx0aGlzLmNhcHR1cmUoXCIkcGFnZXZpZXdcIix7dGl0bGU6YS50aXRsZX0se3NlbmRfaW5zdGFudGx5OiEwfSkpfWRlYnVnKHQpeyExPT09dD8obnVsbD09aXx8aS5jb25zb2xlLmxvZyhcIllvdSd2ZSBkaXNhYmxlZCBkZWJ1ZyBtb2RlLlwiKSxsb2NhbFN0b3JhZ2UmJmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwicGhfZGVidWdcIiksdGhpcy5zZXRfY29uZmlnKHtkZWJ1ZzohMX0pKToobnVsbD09aXx8aS5jb25zb2xlLmxvZyhcIllvdSdyZSBub3cgaW4gZGVidWcgbW9kZS4gQWxsIGNhbGxzIHRvIFBvc3RIb2cgd2lsbCBiZSBsb2dnZWQgaW4geW91ciBjb25zb2xlLlxcbllvdSBjYW4gZGlzYWJsZSB0aGlzIHdpdGggYHBvc3Rob2cuZGVidWcoZmFsc2UpYC5cIiksbG9jYWxTdG9yYWdlJiZsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInBoX2RlYnVnXCIsXCJ0cnVlXCIpLHRoaXMuc2V0X2NvbmZpZyh7ZGVidWc6ITB9KSl9JHModCl7aWYoQyh0aGlzLmNvbmZpZy5iZWZvcmVfc2VuZCkpcmV0dXJuIHQ7dmFyIGk9eCh0aGlzLmNvbmZpZy5iZWZvcmVfc2VuZCk/dGhpcy5jb25maWcuYmVmb3JlX3NlbmQ6W3RoaXMuY29uZmlnLmJlZm9yZV9zZW5kXSxlPXQ7Zm9yKHZhciByIG9mIGkpe2lmKGU9cihlKSxDKGUpKXt2YXIgcz1cIkV2ZW50ICdcIit0LmV2ZW50K1wiJyB3YXMgcmVqZWN0ZWQgaW4gYmVmb3JlU2VuZCBmdW5jdGlvblwiO3JldHVybiBqKHQuZXZlbnQpP04ud2FybihzK1wiLiBUaGlzIGNhbiBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yLlwiKTpOLmluZm8ocyksbnVsbH1lLnByb3BlcnRpZXMmJiFQKGUucHJvcGVydGllcyl8fE4ud2FybihcIkV2ZW50ICdcIit0LmV2ZW50K1wiJyBoYXMgbm8gcHJvcGVydGllcyBhZnRlciBiZWZvcmVTZW5kIGZ1bmN0aW9uLCB0aGlzIGlzIGxpa2VseSBhbiBlcnJvci5cIil9cmV0dXJuIGV9Z2V0UGFnZVZpZXdJZCgpe3ZhciB0O3JldHVybiBudWxsPT0odD10aGlzLnBhZ2VWaWV3TWFuYWdlci5zZSk/dm9pZCAwOnQucGFnZVZpZXdJZH1jYXB0dXJlVHJhY2VGZWVkYmFjayh0LGkpe3RoaXMuY2FwdHVyZShcIiRhaV9mZWVkYmFja1wiLHskYWlfdHJhY2VfaWQ6U3RyaW5nKHQpLCRhaV9mZWVkYmFja190ZXh0Oml9KX1jYXB0dXJlVHJhY2VNZXRyaWModCxpLGUpe3RoaXMuY2FwdHVyZShcIiRhaV9tZXRyaWNcIix7JGFpX3RyYWNlX2lkOlN0cmluZyh0KSwkYWlfbWV0cmljX25hbWU6aSwkYWlfbWV0cmljX3ZhbHVlOlN0cmluZyhlKX0pfX0hZnVuY3Rpb24odCxpKXtmb3IodmFyIGU9MDtlPGkubGVuZ3RoO2UrKyl0LnByb3RvdHlwZVtpW2VdXT1RKHQucHJvdG90eXBlW2lbZV1dKX0oUm8sW1wiaWRlbnRpZnlcIl0pO3ZhciBUbyxNbyxPbyxDbyxGbyxBbzshZnVuY3Rpb24odCl7dC5CdXR0b249XCJidXR0b25cIix0LlRhYj1cInRhYlwiLHQuU2VsZWN0b3I9XCJzZWxlY3RvclwifShUb3x8KFRvPXt9KSksZnVuY3Rpb24odCl7dC5MZWZ0PVwibGVmdFwiLHQuQ2VudGVyPVwiY2VudGVyXCIsdC5SaWdodD1cInJpZ2h0XCIsdC5OZXh0VG9UcmlnZ2VyPVwibmV4dF90b190cmlnZ2VyXCJ9KE1vfHwoTW89e30pKSxmdW5jdGlvbih0KXt0LlBvcG92ZXI9XCJwb3BvdmVyXCIsdC5BUEk9XCJhcGlcIix0LldpZGdldD1cIndpZGdldFwifShPb3x8KE9vPXt9KSksZnVuY3Rpb24odCl7dC5PcGVuPVwib3BlblwiLHQuTXVsdGlwbGVDaG9pY2U9XCJtdWx0aXBsZV9jaG9pY2VcIix0LlNpbmdsZUNob2ljZT1cInNpbmdsZV9jaG9pY2VcIix0LlJhdGluZz1cInJhdGluZ1wiLHQuTGluaz1cImxpbmtcIn0oQ298fChDbz17fSkpLGZ1bmN0aW9uKHQpe3QuTmV4dFF1ZXN0aW9uPVwibmV4dF9xdWVzdGlvblwiLHQuRW5kPVwiZW5kXCIsdC5SZXNwb25zZUJhc2VkPVwicmVzcG9uc2VfYmFzZWRcIix0LlNwZWNpZmljUXVlc3Rpb249XCJzcGVjaWZpY19xdWVzdGlvblwifShGb3x8KEZvPXt9KSksZnVuY3Rpb24odCl7dC5PbmNlPVwib25jZVwiLHQuUmVjdXJyaW5nPVwicmVjdXJyaW5nXCIsdC5BbHdheXM9XCJhbHdheXNcIn0oQW98fChBbz17fSkpO3ZhciBEbyxqbz0oRG89U29ba29dPW5ldyBSbyxmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0LmRvbmV8fCh0LmRvbmU9ITAseG89ITEsSihTbywoZnVuY3Rpb24odCl7dC5fZG9tX2xvYWRlZCgpfSkpKX1udWxsIT1hJiZhLmFkZEV2ZW50TGlzdGVuZXI/XCJjb21wbGV0ZVwiPT09YS5yZWFkeVN0YXRlP3QoKTpzdChhLFwiRE9NQ29udGVudExvYWRlZFwiLHQse2NhcHR1cmU6ITF9KTppJiZOLmVycm9yKFwiQnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgYGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXJgIHNvIFBvc3RIb2cgY291bGRuJ3QgYmUgaW5pdGlhbGl6ZWRcIil9KCksRG8pO2V4cG9ydHtwIGFzIENPUFlfQVVUT0NBUFRVUkVfRVZFTlQsdCBhcyBDb21wcmVzc2lvbixSbyBhcyBQb3N0SG9nLE1vIGFzIFN1cnZleVBvc2l0aW9uLEZvIGFzIFN1cnZleVF1ZXN0aW9uQnJhbmNoaW5nVHlwZSxDbyBhcyBTdXJ2ZXlRdWVzdGlvblR5cGUsQW8gYXMgU3VydmV5U2NoZWR1bGUsT28gYXMgU3VydmV5VHlwZSxUbyBhcyBTdXJ2ZXlXaWRnZXRUeXBlLGpvIGFzIGRlZmF1bHQsZyBhcyBrbm93blVuc2FmZUVkaXRhYmxlRXZlbnQsam8gYXMgcG9zdGhvZyxfIGFzIHNldmVyaXR5TGV2ZWxzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ0IiwiaSIsIndpbmRvdyIsImUiLCJnbG9iYWxUaGlzIiwiciIsIkFycmF5IiwicHJvdG90eXBlIiwicyIsImZvckVhY2giLCJuIiwiaW5kZXhPZiIsIm8iLCJuYXZpZ2F0b3IiLCJhIiwiZG9jdW1lbnQiLCJsIiwibG9jYXRpb24iLCJ1IiwiZmV0Y2giLCJoIiwiWE1MSHR0cFJlcXVlc3QiLCJkIiwiQWJvcnRDb250cm9sbGVyIiwidiIsInVzZXJBZ2VudCIsImMiLCJmIiwiREVCVUciLCJMSUJfVkVSU0lPTiIsInAiLCJnIiwiR1ppcEpTIiwiQmFzZTY0IiwiXyIsIm0iLCJiIiwidHJpbSIsInciLCJyZXBsYWNlIiwieSIsImlzQXJyYXkiLCJTIiwiT2JqZWN0IiwiJCIsImhhc093blByb3BlcnR5IiwiayIsInRvU3RyaW5nIiwieCIsImNhbGwiLCJFIiwiSSIsIlAiLCJSIiwiVCIsIk0iLCJsZW5ndGgiLCJPIiwiQyIsIkYiLCJBIiwiRCIsIkZvcm1EYXRhIiwiaiIsIkwiLCJQT1NUSE9HX0RFQlVHIiwiY29uc29sZSIsIl9fcnJ3ZWJfb3JpZ2luYWxfXyIsImFyZ3VtZW50cyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJjcml0aWNhbCIsInVuaW5pdGlhbGl6ZWRXYXJuaW5nIiwiY3JlYXRlTG9nZ2VyIiwiTiIsInoiLCJVIiwicSIsImNvbmZpZyIsImRpc2FibGVfZXh0ZXJuYWxfZGVwZW5kZW5jeV9sb2FkaW5nIiwicXVlcnlTZWxlY3RvckFsbCIsInNyYyIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwiY3Jvc3NPcmlnaW4iLCJvbmxvYWQiLCJvbmVycm9yIiwicHJlcGFyZV9leHRlcm5hbF9kZXBlbmRlbmN5X3NjcmlwdCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiQiIsImFzc2lnbiIsImJpbmQiLCJhcHBseSIsIkgiLCJrZXlzIiwiX19Qb3N0aG9nRXh0ZW5zaW9uc19fIiwibG9hZEV4dGVybmFsRGVwZW5kZW5jeSIsInZlcnNpb24iLCJ0b2tlbiIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJyZXF1ZXN0Um91dGVyIiwiZW5kcG9pbnRGb3IiLCJsb2FkU2l0ZUFwcCIsIlciLCJHIiwiSiIsImVudHJpZXMiLCJWIiwiSyIsInB1c2giLCJZIiwiWCIsIlEiLCJaIiwidHQiLCJzbGljZSIsIlNldCIsImhhcyIsImFkZCIsIml0IiwiZXQiLCJob3N0bmFtZSIsInNwbGl0Iiwiam9pbiIsInJ0Iiwic3QiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIm50Iiwib3QiLCJhdCIsImx0IiwidXQiLCJodCIsImR0IiwidnQiLCJjdCIsImZ0IiwicHQiLCJndCIsIl90IiwibXQiLCJidCIsInd0IiwieXQiLCJTdCIsIiR0Iiwia3QiLCJ4dCIsIkV0IiwiSXQiLCJQdCIsIlJ0IiwiVHQiLCJNdCIsIk90IiwiQ3QiLCJGdCIsIkF0IiwiRHQiLCJqdCIsIkx0IiwiTnQiLCJ6dCIsIlV0IiwicXQiLCJCdCIsIkh0IiwiRWxlbWVudCIsImlkIiwiY2xvc2VzdCIsIld0Iiwibm9kZVR5cGUiLCJHdCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsIkp0IiwiVnQiLCJLdCIsIll0IiwiaHJlZiIsInNvbWUiLCJtYXRjaCIsIlh0IiwiY2xhc3NOYW1lIiwiYmFzZVZhbCIsImdldEF0dHJpYnV0ZSIsIlF0IiwiZmlsdGVyIiwidmkiLCJzdWJzdHJpbmciLCJadCIsInNpIiwibmkiLCJjaGlsZE5vZGVzIiwidGV4dENvbnRlbnQiLCJ0aSIsInRhcmdldCIsInNyY0VsZW1lbnQiLCJzaGFkb3dSb290IiwiY29tcG9zZWRQYXRoIiwiaWkiLCJlaSIsInJpIiwidXJsX2FsbG93bGlzdCIsInVybF9pZ25vcmVsaXN0IiwiZG9tX2V2ZW50X2FsbG93bGlzdCIsImhvc3QiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImVsZW1lbnRfYWxsb3dsaXN0IiwiY3NzX3NlbGVjdG9yX2FsbG93bGlzdCIsIm1hdGNoZXMiLCJuYW1lIiwidGVzdCIsImluY2x1ZGVzIiwib2kiLCJhaSIsIlJlZ0V4cCIsImxpIiwidWkiLCJoaSIsImRpIiwiY2kiLCJmaSIsInBpIiwibWFwIiwidGFnX25hbWUiLCJhdHRyX2NsYXNzIiwic29ydCIsInRleHQiLCJudGhfY2hpbGQiLCJudGhfb2ZfdHlwZSIsImF0dHJfaWQiLCJhdHRyaWJ1dGVzIiwibG9jYWxlQ29tcGFyZSIsImdpIiwiJGVsX3RleHQiLCJhdHRyX19ocmVmIiwiX2kiLCJhdHRyX19pZCIsImF0dHJfX2NsYXNzIiwibWkiLCJjb25zdHJ1Y3RvciIsImNsaWNrcyIsImlzUmFnZUNsaWNrIiwiYWJzIiwidGltZXN0YW1wIiwiYmkiLCJ3aSIsInlpIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRmlsZSIsIlNpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiJGkiLCJraSIsInhpIiwiRWkiLCJJaSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2aW91c1NpYmxpbmciLCJQaSIsImNsYXNzZXMiLCJ2YWx1ZSIsIlJpIiwibWFza0FsbEVsZW1lbnRBdHRyaWJ1dGVzIiwibWFza0FsbFRleHQiLCJlbGVtZW50QXR0cmlidXRlSWdub3JlTGlzdCIsImVsZW1lbnRzQ2hhaW5Bc1N0cmluZyIsInByb3BzIiwiZXhwbGljaXROb0NhcHR1cmUiLCIkZXZlbnRfdHlwZSIsIiRjZV92ZXJzaW9uIiwiJGVsZW1lbnRzIiwiJGVsZW1lbnRzX2NoYWluIiwiJGV4dGVybmFsX2NsaWNrX3VybCIsIlRpIiwicmFnZWNsaWNrcyIsImluc3RhbmNlIiwiYXV0b2NhcHR1cmUiLCJpc0Jyb3dzZXJTdXBwb3J0ZWQiLCJldmVudCIsImNhcHR1cmVfY29waWVkX3RleHQiLCJzdGFydElmRW5hYmxlZCIsImlzRW5hYmxlZCIsIm9uUmVtb3RlQ29uZmlnIiwicGVyc2lzdGVuY2UiLCJyZWdpc3RlciIsImF1dG9jYXB0dXJlX29wdF9vdXQiLCJzZXRFbGVtZW50U2VsZWN0b3JzIiwiZ2V0RWxlbWVudFNlbGVjdG9ycyIsImFkdmFuY2VkX2Rpc2FibGVfZGVjaWRlIiwiTW91c2VFdmVudCIsInJhZ2VjbGljayIsImNsaWVudFgiLCJjbGllbnRZIiwiZ2V0VGltZSIsIm1hc2tfYWxsX2VsZW1lbnRfYXR0cmlidXRlcyIsIm1hc2tfYWxsX3RleHQiLCJlbGVtZW50X2F0dHJpYnV0ZV9pZ25vcmVsaXN0IiwiJGVsZW1lbnRfc2VsZWN0b3JzIiwiZ2V0U2VsZWN0aW9uIiwiJHNlbGVjdGVkX2NvbnRlbnQiLCIkY29weV90eXBlIiwidHJ1bmMiLCJjZWlsIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaXNGaW5pdGUiLCJNaSIsIk9pIiwiYnl0ZXMiLCJUeXBlRXJyb3IiLCJmcm9tRmllbGRzVjciLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsInBvdyIsImNoYXJBdCIsIkVycm9yIiwiY2xvbmUiLCJlcXVhbHMiLCJjb21wYXJlVG8iLCJzaWduIiwiQ2kiLCJEaSIsImdlbmVyYXRlIiwiZ2VuZXJhdGVPckFib3J0IiwibmV4dFVpbnQzMiIsIkZpIiwiQWkiLCJVVUlEVjdfREVOWV9XRUFLX1JORyIsInJhbmRvbSIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwiamkiLCJMaSIsIk5pIiwiemkiLCJVaSIsInFpIiwibWluIiwiY29va2llIiwiQmkiLCJIaSIsIkpTT04iLCJwYXJzZSIsInNldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInN0cmluZ2lmeSIsIldpIiwiR2kiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJKaSIsIlZpIiwiS2kiLCJZaSIsIlhpIiwiUWkiLCJzZXNzaW9uU3RvcmFnZSIsIlBFTkRJTkciLCJERU5JRUQiLCJHUkFOVEVEIiwiWmkiLCJjb25zZW50IiwiaXNPcHRlZE91dCIsIm9wdF9vdXRfY2FwdHVyaW5nX2J5X2RlZmF1bHQiLCJpc09wdGVkSW4iLCJvcHRJbk91dCIsImNvb2tpZV9leHBpcmF0aW9uIiwiY3Jvc3Nfc3ViZG9tYWluX2Nvb2tpZSIsInNlY3VyZV9jb29raWUiLCJyZXNldCIsIm9wdF9vdXRfY2FwdHVyaW5nX2Nvb2tpZV9wcmVmaXgiLCJvcHRfb3V0X2NhcHR1cmluZ19wZXJzaXN0ZW5jZV90eXBlIiwicmVzcGVjdF9kbnQiLCJkb05vdFRyYWNrIiwibXNEb05vdFRyYWNrIiwidGUiLCJpZSIsImVlIiwiZ2V0X3Byb3BlcnR5IiwiY2FwdHVyZV9kZWFkX2NsaWNrcyIsInJlIiwibGF6eUxvYWRlZERlYWRDbGlja3NBdXRvY2FwdHVyZSIsIm9uQ2FwdHVyZSIsImNhcHR1cmVEZWFkQ2xpY2tzIiwiaW5pdERlYWRDbGlja3NBdXRvY2FwdHVyZSIsIl9fb25DYXB0dXJlIiwic3RhcnQiLCJzdG9wIiwic2UiLCJuZSIsImVycm9yV3JhcHBpbmdGdW5jdGlvbnMiLCJ3cmFwT25FcnJvciIsIndyYXBVbmhhbmRsZWRSZWplY3Rpb24iLCJ3cmFwQ29uc29sZUVycm9yIiwiY2FwdHVyZV91bmhhbmRsZWRfZXJyb3JzIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImNhcHR1cmVfdW5oYW5kbGVkX3JlamVjdGlvbnMiLCJjYXB0dXJlX2NvbnNvbGVfZXJyb3JzIiwicmVtb3RlRW5hYmxlZCIsImNhcHR1cmVfZXhjZXB0aW9ucyIsImF1dG9jYXB0dXJlRXhjZXB0aW9ucyIsIiRleGNlcHRpb25fcGVyc29uVVJMIiwiZ2V0X2Rpc3RpbmN0X2lkIiwiZXhjZXB0aW9ucyIsInNlbmRFeGNlcHRpb25FdmVudCIsIm9lIiwiRXZlbnQiLCJhZSIsImxlIiwidWUiLCJoZSIsImRlIiwidmUiLCJjZSIsImZlIiwicGxhdGZvcm0iLCJmaWxlbmFtZSIsImZ1bmN0aW9uIiwiaW5fYXBwIiwibGluZW5vIiwiY29sbm8iLCJwZSIsImdlIiwiX2UiLCJtZSIsImJlIiwid2UiLCJmcm9tIiwicmV2ZXJzZSIsInllIiwiZXhlYyIsInhlIiwiU2UiLCIkZSIsImtlIiwiRWUiLCJJZSIsInN0YWNrdHJhY2UiLCJzdGFjayIsIlBlIiwibWVzc2FnZSIsIl9wb3N0aG9nQ2h1bmtJZHMiLCJyZWR1Y2UiLCJjaHVua19pZCIsIlJlIiwiaGFuZGxlZCIsInN5bnRoZXRpYyIsIm92ZXJyaWRlRXhjZXB0aW9uVHlwZSIsIlN0cmluZyIsImZyYW1lcyIsIm1lY2hhbmlzbSIsIlRlIiwiY2F1c2UiLCJNZSIsIiRleGNlcHRpb25fbGlzdCIsIiRleGNlcHRpb25fbGV2ZWwiLCJPZSIsImRlZmF1bHRFeGNlcHRpb25UeXBlIiwiZGVmYXVsdEV4Y2VwdGlvbk1lc3NhZ2UiLCJzeW50aGV0aWNFeGNlcHRpb24iLCJDZSIsIkZlIiwibGV2ZWwiLCJBZSIsIiRleGNlcHRpb25fRE9NRXhjZXB0aW9uX2NvZGUiLCJjb2RlIiwiRGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX19wb3N0aG9nX3dyYXBwZWRfXyIsImVudW1lcmFibGUiLCJqZSIsInBhdGhuYW1lIiwiY2FwdHVyZV9wYWdldmlldyIsIm1vbml0b3JIaXN0b3J5Q2hhbmdlcyIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiLCJuYXZpZ2F0aW9uX3R5cGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTGUiLCJwb3AiLCJOZSIsInNpemUiLCJkYXRhIiwic2Vzc2lvbklkIiwid2luZG93SWQiLCJmbGF0TWFwIiwiemUiLCJEb21Db250ZW50TG9hZGVkIiwiTG9hZCIsIkZ1bGxTbmFwc2hvdCIsIkluY3JlbWVudGFsU25hcHNob3QiLCJNZXRhIiwiQ3VzdG9tIiwiUGx1Z2luIiwiVWUiLCJNdXRhdGlvbiIsIk1vdXNlTW92ZSIsIk1vdXNlSW50ZXJhY3Rpb24iLCJTY3JvbGwiLCJWaWV3cG9ydFJlc2l6ZSIsIklucHV0IiwiVG91Y2hNb3ZlIiwiTWVkaWFJbnRlcmFjdGlvbiIsIlN0eWxlU2hlZXRSdWxlIiwiQ2FudmFzTXV0YXRpb24iLCJGb250IiwiTG9nIiwiRHJhZyIsIlN0eWxlRGVjbGFyYXRpb24iLCJTZWxlY3Rpb24iLCJBZG9wdGVkU3R5bGVTaGVldCIsIkN1c3RvbUVsZW1lbnQiLCJxZSIsIkJlIiwiSGUiLCJpbml0aWF0b3JUeXBlcyIsIm1hc2tSZXF1ZXN0Rm4iLCJyZWNvcmRIZWFkZXJzIiwicmVjb3JkQm9keSIsInJlY29yZEluaXRpYWxSZXF1ZXN0cyIsInJlY29yZFBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VFbnRyeVR5cGVUb09ic2VydmUiLCJwYXlsb2FkU2l6ZUxpbWl0Qnl0ZXMiLCJwYXlsb2FkSG9zdERlbnlMaXN0IiwiV2UiLCJHZSIsIkplIiwiVmUiLCJCbG9iIiwicGFyc2VJbnQiLCJLZSIsIlllIiwic2Vzc2lvbl9yZWNvcmRpbmciLCJjYXB0dXJlX3BlcmZvcm1hbmNlIiwicmVxdWVzdEJvZHkiLCJyZXF1ZXN0SGVhZGVycyIsInJlc3BvbnNlQm9keSIsInJlc3BvbnNlSGVhZGVycyIsImFwaV9ob3N0IiwibWFza05ldHdvcmtSZXF1ZXN0Rm4iLCJtYXNrQ2FwdHVyZWROZXR3b3JrUmVxdWVzdEZuIiwidXJsIiwiWGUiLCJRZSIsIl9ycndlYiIsIm1pcnJvciIsImdldE5vZGUiLCJub2RlTmFtZSIsImdldElkIiwicmVtb3ZlcyIsInRleHRzIiwiYWRkcyIsInRocm90dGxlTXV0YXRpb25zIiwic291cmNlIiwibWF4Iiwib25CbG9ja2VkTm9kZSIsInJlZmlsbFJhdGUiLCJidWNrZXRTaXplIiwic2V0SW50ZXJ2YWwiLCJaZSIsInRyIiwiVWludDE2QXJyYXkiLCJpciIsImVyIiwicnIiLCJzciIsIm5yIiwib3IiLCJhciIsImxyIiwidXIiLCJociIsImRyIiwidnIiLCJjciIsImZyIiwicHIiLCJnciIsIl9yIiwibXIiLCJiciIsInNldCIsInN1YmFycmF5Iiwid3IiLCJ5ciIsIlNyIiwiJHIiLCJrciIsInhyIiwiRXIiLCJJciIsIlByIiwiUnIiLCJUciIsIk1yIiwibWVtIiwibG9nIiwiT3IiLCJDciIsIm10aW1lIiwiY2hhckNvZGVBdCIsIkZyIiwiQXIiLCJEciIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwianIiLCJMciIsIk5yIiwienIiLCJycndlYiIsInJlY29yZCIsIlVyIiwicXIiLCJCciIsInJyd2ViTWV0aG9kIiwiZW5xdWV1ZWRBdCIsImF0dGVtcHQiLCJIciIsImZyb21DaGFyQ29kZSIsIldyIiwidGFnIiwiR3IiLCJtYXRjaGluZyIsIkpyIiwic2Vzc2lvbl9pZGxlX3RocmVzaG9sZF9tcyIsInN0YXJ0ZWQiLCJzZXNzaW9uTWFuYWdlciIsImZ1bGxfc25hcHNob3RfaW50ZXJ2YWxfbWlsbGlzIiwic2Vzc2lvblN0YXJ0VGltZXN0YW1wIiwiY2hlY2tBbmRHZXRTZXNzaW9uQW5kV2luZG93SWQiLCJkaXNhYmxlX3Nlc3Npb25fcmVjb3JkaW5nIiwiZW5hYmxlX3JlY29yZGluZ19jb25zb2xlX2xvZyIsImNhcHR1cmVDYW52YXMiLCJyZWNvcmRDYW52YXMiLCJlbmFibGVkIiwiY2FudmFzRnBzIiwiZnBzIiwiY2FudmFzUXVhbGl0eSIsInF1YWxpdHkiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJuZXR3b3JrX3RpbWluZyIsImNhcHR1cmVQZXJmb3JtYW5jZSIsIm1hc2tBbGxJbnB1dHMiLCJtYXNrVGV4dFNlbGVjdG9yIiwiYmxvY2tTZWxlY3RvciIsInN0YXR1cyIsIl9mb3JjZUFsbG93TG9jYWxob3N0TmV0d29ya0NhcHR1cmUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJfX3ByZXZpZXdfZXhwZXJpbWVudGFsX2Nvb2tpZWxlc3NfbW9kZSIsInNlc3Npb25UaW1lb3V0TXMiLCJzdGFydElmRW5hYmxlZE9yU3RvcCIsIm9uIiwicHJvcGVydGllcyIsIiRjdXJyZW50X3VybCIsIm9uU2Vzc2lvbklkIiwiY2hhbmdlUmVhc29uIiwidW5yZWdpc3RlciIsInN0b3BSZWNvcmRpbmciLCJjbGVhckludGVydmFsIiwic2FtcGxlUmF0ZSIsImlzU2FtcGxlZCIsInNlc3Npb25SZWNvcmRpbmciLCJsaW5rZWRGbGFnIiwiZW5kcG9pbnQiLCJmbGFnIiwidmFyaWFudCIsIm9uRmVhdHVyZUZsYWdzIiwibGlua2VkVmFyaWFudCIsInVybFRyaWdnZXJzIiwidXJsQmxvY2tsaXN0IiwiZXZlbnRUcmlnZ2VycyIsIm1pbmltdW1EdXJhdGlvbk1pbGxpc2Vjb25kcyIsImNvbnNvbGVMb2dSZWNvcmRpbmdFbmFibGVkIiwibmV0d29ya1BheWxvYWRDYXB0dXJlIiwibWFza2luZyIsInNjcmlwdENvbmZpZyIsIm9uUlJ3ZWJFbWl0IiwicGx1Z2luIiwicGF5bG9hZCIsInRyYWNlIiwic2NyaXB0IiwiZXZlbnRUaW1lc3RhbXAiLCJsYXN0QWN0aXZpdHlUaW1lc3RhbXAiLCJ0aHJlc2hvbGQiLCJidWZmZXJMZW5ndGgiLCJidWZmZXJTaXplIiwicmVhc29uIiwiYWRkQ3VzdG9tRXZlbnQiLCJ0YWtlRnVsbFNuYXBzaG90IiwiYmxvY2tDbGFzcyIsImlnbm9yZUNsYXNzIiwibWFza1RleHRDbGFzcyIsIm1hc2tUZXh0Rm4iLCJtYXNrSW5wdXRPcHRpb25zIiwicGFzc3dvcmQiLCJtYXNrSW5wdXRGbiIsInNsaW1ET01PcHRpb25zIiwiY29sbGVjdEZvbnRzIiwiaW5saW5lU3R5bGVzaGVldCIsInJlY29yZENyb3NzT3JpZ2luSWZyYW1lcyIsInNhbXBsaW5nIiwiY2FudmFzIiwiZGF0YVVSTE9wdGlvbnMiLCJfX211dGF0aW9uUmF0ZUxpbWl0ZXJSZWZpbGxSYXRlIiwiX19tdXRhdGlvblJhdGVMaW1pdGVyQnVja2V0U2l6ZSIsIm5vZGUiLCJlbWl0IiwicGx1Z2lucyIsInNlc3Npb25SZWNvcmRpbmdPcHRpb25zIiwiYWN0aXZlUGx1Z2lucyIsInJyd2ViUGx1Z2lucyIsImdldFJlY29yZENvbnNvbGVQbHVnaW4iLCJnZXRSZWNvcmROZXR3b3JrUGx1Z2luIiwiY29tcHJlc3NfZXZlbnRzIiwiY3YiLCIkc25hcHNob3RfYnl0ZXMiLCIkc25hcHNob3RfZGF0YSIsIiRzZXNzaW9uX2lkIiwiJHdpbmRvd19pZCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCIkbGliIiwiJGxpYl92ZXJzaW9uIiwiX3VybCIsIl9ub1RydW5jYXRlIiwiX2JhdGNoS2V5Iiwic2tpcF9jbGllbnRfcmF0ZV9saW1pdGluZyIsIm92ZXJyaWRlTGlua2VkRmxhZyIsIm92ZXJyaWRlU2FtcGxpbmciLCJvdmVycmlkZVRyaWdnZXIiLCJyZWdpc3Rlcl9mb3Jfc2Vzc2lvbiIsIiRzZXNzaW9uX3JlY29yZGluZ19zdGFydF9yZWFzb24iLCJzZGtEZWJ1Z1Byb3BlcnRpZXMiLCIkcmVjb3JkaW5nX3N0YXR1cyIsIiRzZGtfZGVidWdfcmVwbGF5X2ludGVybmFsX2J1ZmZlcl9sZW5ndGgiLCIkc2RrX2RlYnVnX3JlcGxheV9pbnRlcm5hbF9idWZmZXJfc2l6ZSIsIiRzZGtfZGVidWdfY3VycmVudF9zZXNzaW9uX2R1cmF0aW9uIiwiJHNka19kZWJ1Z19zZXNzaW9uX3N0YXJ0IiwiVnIiLCJLciIsInNlZ21lbnQiLCJhbm9ueW1vdXNJZCIsImdldF9kZXZpY2VfaWQiLCJkaXN0aW5jdF9pZCIsIiRkZXZpY2VfaWQiLCJzZXRfcHJvcGVydHkiLCJ1c2VyIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidXNlcklkIiwiaWRlbnRpZnkiLCJpc0xvYWRlZCIsImxvYWQiLCJ0cmFjayIsInBhZ2UiLCJzY3JlZW4iLCJZciIsIlhyIiwib3JnYW5pemF0aW9uIiwicHJvamVjdElkIiwicHJlZml4Iiwic2V2ZXJpdHlBbGxvd0xpc3QiLCJfX2xvYWRlZCIsInRhZ3MiLCJzZXNzaW9uUmVjb3JkaW5nU3RhcnRlZCIsImdldF9zZXNzaW9uX3JlcGxheV91cmwiLCJ3aXRoVGltZXN0YW1wIiwiZXhjZXB0aW9uIiwidmFsdWVzIiwiJGV4Y2VwdGlvbl9tZXNzYWdlIiwiJGV4Y2VwdGlvbl90eXBlIiwiJHNlbnRyeV9ldmVudF9pZCIsImV2ZW50X2lkIiwiJHNlbnRyeV9leGNlcHRpb24iLCIkc2VudHJ5X2V4Y2VwdGlvbl9tZXNzYWdlIiwiJHNlbnRyeV9leGNlcHRpb25fdHlwZSIsIiRzZW50cnlfdGFncyIsIiRzZW50cnlfdXJsIiwiUXIiLCJzZXR1cE9uY2UiLCJaciIsInRzIiwiaGFzaCIsImlzIiwiZXMiLCJVTklOSVRJQUxJWkVEIiwiTE9BRElORyIsIkxPQURFRCIsInJzIiwicGhfdG9vbGJhcl9zdGF0ZSIsIm1heWJlTG9hZFRvb2xiYXIiLCJhdG9iIiwiYWN0aW9uIiwiZGVzaXJlZEhhc2giLCJzdGF0ZSIsInNlYXJjaCIsInVzZXJJbnRlbnQiLCJsb2FkVG9vbGJhciIsInBoX2xvYWRfdG9vbGJhciIsInBoX2xvYWRfZWRpdG9yIiwiZ2V0RWxlbWVudEJ5SWQiLCJyZWdpb24iLCJhZHZhbmNlZF9kaXNhYmxlX3Rvb2xiYXJfbWV0cmljcyIsImFwaVVSTCIsImluc3RydW1lbnQiLCJtYXliZUxvYWRFZGl0b3IiLCJzcyIsIm5zIiwidHJhY2luZ0hlYWRlcnNQYXRjaEZucyIsIl9wYXRjaFhIUiIsIl9wYXRjaEZldGNoIiwiX19hZGRfdHJhY2luZ19oZWFkZXJzIiwib3MiLCJhcyIsImxzIiwibWV0cmljcyIsImZpcnN0TWV0cmljVGltZXN0YW1wIiwiZmx1c2hUb0NhcHR1cmVUaW1lb3V0TXMiLCJhdHRyaWJ1dGlvbiIsImludGVyYWN0aW9uVGFyZ2V0RWxlbWVudCIsImFsbG93ZWRNZXRyaWNzIiwicG9zdEhvZ1dlYlZpdGFsc0NhbGxiYWNrcyIsIm9uTENQIiwib25DTFMiLCJvbkZDUCIsIm9uSU5QIiwid2ViX3ZpdGFsc19hbGxvd2VkX21ldHJpY3MiLCJ3ZWJfdml0YWxzX2RlbGF5ZWRfZmx1c2hfbXMiLCJfX3dlYl92aXRhbHNfbWF4X3ZhbHVlIiwicHJvdG9jb2wiLCJ3ZWJfdml0YWxzIiwidXMiLCJocyIsImRzIiwiZmx1c2hJbnRlcnZhbE1pbGxpc2Vjb25kcyIsImNhcHR1cmVfaGVhdG1hcHMiLCJmbHVzaF9pbnRlcnZhbF9taWxsaXNlY29uZHMiLCJlbmFibGVfaGVhdG1hcHMiLCJnZXRBbmRDbGVhckJ1ZmZlciIsImhlYXRtYXBzIiwib3JpZ2luYWxFdmVudCIsInNjcm9sbE1hbmFnZXIiLCJzY3JvbGxZIiwic2Nyb2xsWCIsInNjcm9sbEVsZW1lbnQiLCJwb3NpdGlvbiIsInRhcmdldF9maXhlZCIsIiRoZWF0bWFwX2RhdGEiLCJ2cyIsImRvUGFnZVZpZXciLCJwYWdlVmlld0lkIiwicmVzZXRDb250ZXh0IiwiZG9QYWdlTGVhdmUiLCJkb0V2ZW50IiwiJHBhZ2V2aWV3X2lkIiwiJHByZXZfcGFnZXZpZXdfaWQiLCJnZXRDb250ZXh0IiwiZGlzYWJsZV9zY3JvbGxfcHJvcGVydGllcyIsIm1heFNjcm9sbEhlaWdodCIsImxhc3RTY3JvbGxZIiwibWF4U2Nyb2xsWSIsIm1heENvbnRlbnRIZWlnaHQiLCJsYXN0Q29udGVudFkiLCJtYXhDb250ZW50WSIsIiRwcmV2X3BhZ2V2aWV3X2xhc3Rfc2Nyb2xsIiwiJHByZXZfcGFnZXZpZXdfbGFzdF9zY3JvbGxfcGVyY2VudGFnZSIsIiRwcmV2X3BhZ2V2aWV3X21heF9zY3JvbGwiLCIkcHJldl9wYWdldmlld19tYXhfc2Nyb2xsX3BlcmNlbnRhZ2UiLCIkcHJldl9wYWdldmlld19sYXN0X2NvbnRlbnQiLCIkcHJldl9wYWdldmlld19sYXN0X2NvbnRlbnRfcGVyY2VudGFnZSIsIiRwcmV2X3BhZ2V2aWV3X21heF9jb250ZW50IiwiJHByZXZfcGFnZXZpZXdfbWF4X2NvbnRlbnRfcGVyY2VudGFnZSIsIiRwcmV2X3BhZ2V2aWV3X3BhdGhuYW1lIiwiJHByZXZfcGFnZXZpZXdfZHVyYXRpb24iLCJjcyIsImZzIiwicHMiLCJncyIsIl9zIiwibXMiLCJicyIsIndzIiwieXMiLCJTcyIsIiRzIiwia3MiLCJ4cyIsIkVzIiwiSXMiLCJQcyIsIlJzIiwiVHMiLCJNcyIsIk9zIiwiQ3MiLCJGcyIsIkFzIiwiRHMiLCJqcyIsIkxzIiwiTnMiLCJ6cyIsIlVzIiwicXMiLCJCcyIsIkhzIiwiV3MiLCJHcyIsIkpzIiwiVnMiLCJLcyIsIllzIiwiWHMiLCJRcyIsIlpzIiwidG4iLCJlbiIsInJuIiwic24iLCJubiIsImFuIiwiTW96aWxsYSIsImxuIiwidW4iLCJobiIsImRuIiwidm4iLCJjbiIsImZuIiwicG4iLCJnbiIsIlVSTCIsImNvbmNhdCIsIl9uIiwiJHNlYXJjaF9lbmdpbmUiLCJyZWZlcnJlciIsInBoX2tleXdvcmQiLCJtbiIsImxhbmd1YWdlIiwidXNlckxhbmd1YWdlIiwiYm4iLCJ3biIsInluIiwiJHJlZmVycmVyIiwiJHJlZmVycmluZ19kb21haW4iLCIkaG9zdCIsIiRwYXRobmFtZSIsIlNuIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwicmVzb2x2ZWRPcHRpb25zIiwidGltZVpvbmUiLCIkbiIsImdldFRpbWV6b25lT2Zmc2V0Iiwia24iLCIkb3MiLCIkb3NfdmVyc2lvbiIsIiRicm93c2VyIiwidmVuZG9yIiwiJGRldmljZSIsIiRkZXZpY2VfdHlwZSIsIiR0aW1lem9uZSIsIiR0aW1lem9uZV9vZmZzZXQiLCIkcmF3X3VzZXJfYWdlbnQiLCIkYnJvd3Nlcl92ZXJzaW9uIiwiJGJyb3dzZXJfbGFuZ3VhZ2UiLCIkYnJvd3Nlcl9sYW5ndWFnZV9wcmVmaXgiLCIkc2NyZWVuX2hlaWdodCIsImhlaWdodCIsIiRzY3JlZW5fd2lkdGgiLCJ3aWR0aCIsIiR2aWV3cG9ydF9oZWlnaHQiLCJpbm5lckhlaWdodCIsIiR2aWV3cG9ydF93aWR0aCIsImlubmVyV2lkdGgiLCIkaW5zZXJ0X2lkIiwiJHRpbWUiLCJ4biIsIkVuIiwiSW4iLCJQbiIsIlJuIiwiVG4iLCJNbiIsIk9uIiwiQ24iLCJmbGFncyIsImZlYXR1cmVGbGFncyIsImZyb21FbnRyaWVzIiwiZmVhdHVyZUZsYWdQYXlsb2FkcyIsIm1ldGFkYXRhIiwiRmVhdHVyZUZsYWdzIiwiUmVjb3JkaW5ncyIsIkZuIiwiZmVhdHVyZUZsYWdFdmVudEhhbmRsZXJzIiwiZGVjaWRlIiwiX19wcmV2aWV3X3JlbW90ZV9jb25maWciLCJhZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3MiLCJhZHZhbmNlZF9kaXNhYmxlX2ZlYXR1cmVfZmxhZ3Nfb25fZmlyc3RfbG9hZCIsImRpc2FibGVGbGFncyIsImhhc0xvYWRlZEZsYWdzIiwiZ2V0RmxhZ3MiLCJnZXRGbGFnVmFyaWFudHMiLCJnZXRGbGFnc1dpdGhEZXRhaWxzIiwib3JpZ2luYWxfZW5hYmxlZCIsIm9yaWdpbmFsX3ZhcmlhbnQiLCJvcmlnaW5hbF9wYXlsb2FkIiwiZmxhZ0RldGFpbHMiLCJvdmVycmlkZGVuUGF5bG9hZHMiLCJmaW5hbERldGFpbHMiLCJlbmFibGVkRmxhZ3MiLCJvdmVycmlkZGVuRmxhZ3MiLCJmaW5hbEZsYWdzIiwiZ2V0RmxhZ1BheWxvYWRzIiwiZmxhZ1BheWxvYWRzIiwiZmluYWxQYXlsb2FkcyIsInJlbG9hZEZlYXR1cmVGbGFncyIsImVuc3VyZUZsYWdzTG9hZGVkIiwic2V0QW5vbnltb3VzRGlzdGluY3RJZCIsIiRhbm9uX2Rpc3RpbmN0X2lkIiwic2V0UmVsb2FkaW5nUGF1c2VkIiwiZ3JvdXBzIiwiZ2V0R3JvdXBzIiwicGVyc29uX3Byb3BlcnRpZXMiLCJnZXRfaW5pdGlhbF9wcm9wcyIsImdyb3VwX3Byb3BlcnRpZXMiLCJkaXNhYmxlX2ZsYWdzIiwiX19wcmV2aWV3X2ZsYWdzX3YyIiwidGltZXpvbmUiLCJtZXRob2QiLCJjb21wcmVzc2lvbiIsImRpc2FibGVfY29tcHJlc3Npb24iLCJ0aW1lb3V0IiwiZmVhdHVyZV9mbGFnX3JlcXVlc3RfdGltZW91dF9tcyIsImNhbGxiYWNrIiwic3RhdHVzQ29kZSIsImpzb24iLCJxdW90YUxpbWl0ZWQiLCJyZWNlaXZlZEZlYXR1cmVGbGFncyIsImdldEZlYXR1cmVGbGFnIiwic2VuZF9ldmVudCIsImdldEZlYXR1cmVGbGFnRGV0YWlscyIsIiRmZWF0dXJlX2ZsYWciLCIkZmVhdHVyZV9mbGFnX3Jlc3BvbnNlIiwiJGZlYXR1cmVfZmxhZ19wYXlsb2FkIiwiZ2V0RmVhdHVyZUZsYWdQYXlsb2FkIiwiJGZlYXR1cmVfZmxhZ19yZXF1ZXN0X2lkIiwiJGZlYXR1cmVfZmxhZ19ib290c3RyYXBwZWRfcmVzcG9uc2UiLCJib290c3RyYXAiLCIkZmVhdHVyZV9mbGFnX2Jvb3RzdHJhcHBlZF9wYXlsb2FkIiwiJHVzZWRfYm9vdHN0cmFwX3ZhbHVlIiwiJGZlYXR1cmVfZmxhZ192ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCIkZmVhdHVyZV9mbGFnX3JlYXNvbiIsIiRmZWF0dXJlX2ZsYWdfaWQiLCIkZmVhdHVyZV9mbGFnX29yaWdpbmFsX3Jlc3BvbnNlIiwiJGZlYXR1cmVfZmxhZ19vcmlnaW5hbF9wYXlsb2FkIiwiZ2V0UmVtb3RlQ29uZmlnUGF5bG9hZCIsImlzRmVhdHVyZUVuYWJsZWQiLCJhZGRGZWF0dXJlRmxhZ3NIYW5kbGVyIiwicmVtb3ZlRmVhdHVyZUZsYWdzSGFuZGxlciIsInJlcXVlc3RJZCIsImVycm9yc1doaWxlQ29tcHV0aW5nRmxhZ3MiLCJvdmVycmlkZSIsIm92ZXJyaWRlRmVhdHVyZUZsYWdzIiwic3VwcHJlc3NXYXJuaW5nIiwiQm9vbGVhbiIsInBheWxvYWRzIiwiZmxhZ1ZhcmlhbnRzIiwidXBkYXRlRWFybHlBY2Nlc3NGZWF0dXJlRW5yb2xsbWVudCIsImZpbmQiLCJmbGFnS2V5IiwiJGZlYXR1cmVfZW5yb2xsbWVudCIsIiRzZXQiLCIkZWFybHlfYWNjZXNzX2ZlYXR1cmVfbmFtZSIsInNldFBlcnNvblByb3BlcnRpZXNGb3JGbGFncyIsImdldEVhcmx5QWNjZXNzRmVhdHVyZXMiLCJlYXJseUFjY2Vzc0ZlYXR1cmVzIiwiZXJyb3JzTG9hZGluZyIsInJlc2V0UGVyc29uUHJvcGVydGllc0ZvckZsYWdzIiwic2V0R3JvdXBQcm9wZXJ0aWVzRm9yRmxhZ3MiLCJyZXNldEdyb3VwUHJvcGVydGllc0ZvckZsYWdzIiwiQW4iLCJEbiIsInBlcnNpc3RlbmNlX25hbWUiLCJkZWJ1ZyIsInVwZGF0ZV9jb25maWciLCJzYXZlIiwicmVtb3ZlIiwiY2xlYXIiLCJyZWdpc3Rlcl9vbmNlIiwidXBkYXRlX2NhbXBhaWduX3BhcmFtcyIsImN1c3RvbV9jYW1wYWlnbl9wYXJhbXMiLCJtYXNrX3BlcnNvbmFsX2RhdGFfcHJvcGVydGllcyIsImN1c3RvbV9wZXJzb25hbF9kYXRhX3Byb3BlcnRpZXMiLCJ1cGRhdGVfc2VhcmNoX2tleXdvcmQiLCJ1cGRhdGVfcmVmZXJyZXJfaW5mbyIsInNldF9pbml0aWFsX3BlcnNvbl9pbmZvIiwic2FmZV9tZXJnZSIsInNldF9kaXNhYmxlZCIsImRpc2FibGVfcGVyc2lzdGVuY2UiLCJzZXRfY3Jvc3Nfc3ViZG9tYWluIiwic2V0X3NlY3VyZSIsInNldF9ldmVudF90aW1lciIsInJlbW92ZV9ldmVudF90aW1lciIsImpuIiwiTG4iLCJObiIsImluaXQiLCJzdGVwcyIsInNlbGVjdG9yIiwib25BY3Rpb24iLCJ1cmxfbWF0Y2hpbmciLCJocmVmX21hdGNoaW5nIiwidGV4dF9tYXRjaGluZyIsInpuIiwiVW4iLCJNYXAiLCJjb25kaXRpb25zIiwiYWN0aW9ucyIsImdldCIsImV2ZW50cyIsIm9uRXZlbnQiLCJldmVudFBheWxvYWQiLCJleGlzdGluZ0FjdGl2YXRlZFN1cnZleXMiLCIkc3VydmV5X2lkIiwic3BsaWNlIiwic3VydmV5cyIsImdldFN1cnZleXMiLCJnZXRFdmVudFRvU3VydmV5cyIsInFuIiwibG9hZElmRW5hYmxlZCIsImtleSIsInN0YXJ0c1dpdGgiLCJkaXNhYmxlX3N1cnZleXMiLCJnZW5lcmF0ZVN1cnZleXMiLCJvblN1cnZleXNMb2FkZWQiLCJzdXJ2ZXlzX3JlcXVlc3RfdGltZW91dF9tcyIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsImdldEFjdGl2ZU1hdGNoaW5nU3VydmV5cyIsImVsaWdpYmxlIiwiY2hlY2tTdXJ2ZXlFbGlnaWJpbGl0eSIsImNhblJlbmRlclN1cnZleSIsInZpc2libGUiLCJkaXNhYmxlZFJlYXNvbiIsImNhblJlbmRlclN1cnZleUFzeW5jIiwicmVuZGVyU3VydmV5IiwicXVlcnlTZWxlY3RvciIsIkJuIiwiSG4iLCJzZXJ2ZXJMaW1pdHMiLCJsYXN0RXZlbnRSYXRlTGltaXRlZCIsImNoZWNrRm9yTGltaXRpbmciLCJxdW90YV9saW1pdGVkIiwiY2FwdHVyZUV2ZW50c1BlclNlY29uZCIsInJhdGVfbGltaXRpbmciLCJldmVudHNfcGVyX3NlY29uZCIsImNhcHR1cmVFdmVudHNCdXJzdExpbWl0IiwiZXZlbnRzX2J1cnN0X2xpbWl0IiwiY2xpZW50UmF0ZUxpbWl0Q29udGV4dCIsImlzUmF0ZUxpbWl0ZWQiLCJ0b2tlbnMiLCJsYXN0IiwiJCRjbGllbnRfaW5nZXN0aW9uX3dhcm5pbmdfbWVzc2FnZSIsInJlbWFpbmluZ1Rva2VucyIsImlzU2VydmVyUmF0ZUxpbWl0ZWQiLCJXbiIsIkduIiwicmVtb3RlQ29uZmlnIiwiX1BPU1RIT0dfUkVNT1RFX0NPTkZJRyIsImhhc0ZlYXR1cmVGbGFncyIsIkpuIiwiVm4iLCJLbiIsIlluIiwiWG4iLCJRbiIsImNvbnRlbnRUeXBlIiwiZXN0aW1hdGVkU2l6ZSIsIlpuIiwidHJhbnNwb3J0IiwiSGVhZGVycyIsImhlYWRlcnMiLCJhcHBlbmQiLCJzaWduYWwiLCJhYm9ydCIsImtlZXBhbGl2ZSIsImZldGNoT3B0aW9ucyIsImNhdGNoIiwiZmluYWxseSIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2l0aENyZWRlbnRpYWxzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJzZW5kQmVhY29uIiwiYmVhY29uIiwidG8iLCJpbyIsImZsdXNoX2ludGVydmFsX21zIiwiZW5xdWV1ZSIsInVubG9hZCIsImVuYWJsZSIsIm9mZnNldCIsImJhdGNoS2V5IiwiZW8iLCJybyIsIm9uTGluZSIsInJldHJpYWJsZVJlcXVlc3QiLCJyZXRyaWVzUGVyZm9ybWVkU29GYXIiLCJyZXRyeV9jb3VudCIsInJldHJ5QXQiLCJyZXF1ZXN0T3B0aW9ucyIsInNvIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic3RhcnRNZWFzdXJpbmdTY3JvbGxQb3NpdGlvbiIsInNjcm9sbF9yb290X3NlbGVjdG9yIiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJubyIsIm9vIiwiZ2V0U2V0T25jZVByb3BzIiwicmVmZXJyaW5nRG9tYWluIiwiaW5pdGlhbFBhdGhOYW1lIiwidXRtX3NvdXJjZSIsInV0bV9jYW1wYWlnbiIsInV0bV9tZWRpdW0iLCJ1dG1fY29udGVudCIsInV0bV90ZXJtIiwiZ2V0U2Vzc2lvblByb3BzIiwiYW8iLCJsbyIsIl9zZXNzaW9uU3RhcnRUaW1lc3RhbXAiLCJfc2Vzc2lvbkFjdGl2aXR5VGltZXN0YW1wIiwic2Vzc2lvbl9pZGxlX3RpbWVvdXRfc2Vjb25kcyIsIl9zZXNzaW9uVGltZW91dE1zIiwiJGNvbmZpZ3VyZWRfc2Vzc2lvbl90aW1lb3V0X21zIiwic2Vzc2lvbklEIiwicmVzZXRTZXNzaW9uSWQiLCJub1Nlc3Npb25JZCIsImFjdGl2aXR5VGltZW91dCIsInNlc3Npb25QYXN0TWF4aW11bUxlbmd0aCIsInVvIiwiaG8iLCJ2byIsImFwcHMiLCJvcHRfaW5fc2l0ZV9hcHBzIiwiZ2xvYmFsc0ZvckV2ZW50Iiwic2l0ZUFwcExvYWRlcnMiLCJzaXRlQXBwcyIsIiRzZXRfb25jZSIsImVsZW1lbnRzX2NoYWluIiwicGVyc29uIiwic2V0dXBTaXRlQXBwIiwiZXJyb3JlZCIsInByb2Nlc3NFdmVudCIsInByb2Nlc3NlZEJ1ZmZlciIsImV2ZXJ5IiwibG9hZGVkIiwicG9zdGhvZyIsImNvIiwiZm8iLCJwbyIsImdvIiwidXNlckFnZW50RGF0YSIsImJyYW5kcyIsImJyYW5kIiwid2ViZHJpdmVyIiwiX28iLCJ1c2VyUHJvcGVydGllc1RvU2V0IiwidXNlclByb3BlcnRpZXNUb1NldE9uY2UiLCJVUyIsIkVVIiwiQ1VTVE9NIiwibW8iLCJibyIsImFwaUhvc3QiLCJ1aUhvc3QiLCJ1aV9ob3N0Iiwid28iLCJpY29udGFpbnMiLCJub3RfaWNvbnRhaW5zIiwicmVnZXgiLCJub3RfcmVnZXgiLCJleGFjdCIsImlzX25vdCIsInlvIiwiZ2V0V2ViRXhwZXJpbWVudHNBbmRFdmFsdWF0ZURpc3BsYXlMb2dpYyIsImdldFdlYkV4cGVyaW1lbnRzIiwiZmVhdHVyZV9mbGFnX2tleSIsInZhcmlhbnRzIiwidHJhbnNmb3JtcyIsIl9pc19ib3QiLCJkaXNhYmxlX3dlYl9leHBlcmltZW50cyIsInByZXZpZXdXZWJFeHBlcmltZW50IiwiZ2V0V2luZG93TG9jYXRpb24iLCJleHBlcmltZW50cyIsInVybE1hdGNoVHlwZSIsInV0bSIsImh0bWwiLCJpbm5lckhUTUwiLCJjc3MiLCJzZXRBdHRyaWJ1dGUiLCJjdXN0b21fYmxvY2tlZF91c2VyYWdlbnRzIiwiU28iLCIkbyIsImtvIiwieG8iLCJFbyIsInNhdmVfY2FtcGFpZ25fcGFyYW1zIiwic2F2ZV9yZWZlcnJlciIsImNhcHR1cmVfcGFnZWxlYXZlIiwidXBncmFkZSIsImlwIiwib3B0X291dF9wZXJzaXN0ZW5jZV9ieV9kZWZhdWx0Iiwib3B0X291dF91c2VyYWdlbnRfZmlsdGVyIiwicHJvcGVydHlfZGVueWxpc3QiLCJzYW5pdGl6ZV9wcm9wZXJ0aWVzIiwicmVxdWVzdF9oZWFkZXJzIiwicmVxdWVzdF9iYXRjaGluZyIsInByb3BlcnRpZXNfc3RyaW5nX21heF9sZW5ndGgiLCJvbl9yZXF1ZXN0X2Vycm9yIiwicGVyc29uX3Byb2ZpbGVzIiwiYmVmb3JlX3NlbmQiLCJyZXF1ZXN0X3F1ZXVlX2NvbmZpZyIsIl9vbkNhcHR1cmUiLCJJbyIsInByb2Nlc3NfcGVyc29uIiwieGhyX2hlYWRlcnMiLCJjb29raWVfbmFtZSIsImRpc2FibGVfY29va2llIiwic3RvcmVfZ29vZ2xlIiwidmVyYm9zZSIsInByb3BlcnR5X2JsYWNrbGlzdCIsIlBvIiwiX19mb3JjZUFsbG93TG9jYWxob3N0IiwiUm8iLCJkZWNpZGVFbmRwb2ludFdhc0hpdCIsIndlYlBlcmZvcm1hbmNlIiwiU2VudHJ5SW50ZWdyYXRpb24iLCJzZW50cnlJbnRlZ3JhdGlvbiIsIl9fcmVxdWVzdF9xdWV1ZSIsImFuYWx5dGljc0RlZmF1bHRFbmRwb2ludCIsInRvb2xiYXIiLCJwYWdlVmlld01hbmFnZXIiLCJyYXRlTGltaXRlciIsInBlb3BsZSIsInNldFBlcnNvblByb3BlcnRpZXMiLCJzZXRfb25jZSIsIl9pbml0Iiwic2V0X2NvbmZpZyIsIm9uX3hocl9lcnJvciIsInNlc3Npb25QZXJzaXN0ZW5jZSIsInNlc3Npb25Qcm9wc01hbmFnZXIiLCJ3ZWJWaXRhbHNBdXRvY2FwdHVyZSIsImV4Y2VwdGlvbk9ic2VydmVyIiwiZGVhZENsaWNrc0F1dG9jYXB0dXJlIiwiaGlzdG9yeUF1dG9jYXB0dXJlIiwidGhpcyIsInRoaXNDIiwiZGlzdGluY3RJRCIsImlzSWRlbnRpZmllZElEIiwic2VsZiIsIl9oYW5kbGVfdW5sb2FkIiwic3VwcG9ydGVkQ29tcHJlc3Npb24iLCJhbmFseXRpY3MiLCJoYXNfb3B0ZWRfb3V0X2NhcHR1cmluZyIsIl9kb21fbG9hZGVkIiwiYXBpX3RyYW5zcG9ydCIsImZldGNoX29wdGlvbnMiLCJ2ZXIiLCJfZXhlY3V0ZV9hcnJheSIsInV1aWQiLCIkbGliX3JhdGVfbGltaXRfcmVtYWluaW5nX3Rva2VucyIsIiRldmVudF90aW1lX292ZXJyaWRlX3Byb3ZpZGVkIiwiJGV2ZW50X3RpbWVfb3ZlcnJpZGVfc3lzdGVtX3RpbWUiLCJzZW5kX2luc3RhbnRseSIsIiRjb29raWVsZXNzX21vZGUiLCIkc2RrX2RlYnVnX3JldHJ5X3F1ZXVlX3NpemUiLCIkc2RrX2RlYnVnX2Vycm9yX2NhcHR1cmluZ19wcm9wZXJ0aWVzIiwiJGxpYl9jdXN0b21fYXBpX2hvc3QiLCJ0aXRsZSIsIiRkdXJhdGlvbiIsInRvRml4ZWQiLCIkYnJvd3Nlcl90eXBlIiwiJGlzX2lkZW50aWZpZWQiLCJfaXNJZGVudGlmaWVkIiwiJHByb2Nlc3NfcGVyc29uX3Byb2ZpbGUiLCJ1bnJlZ2lzdGVyX2Zvcl9zZXNzaW9uIiwiJHVzZXJfaWQiLCIkaGFkX3BlcnNpc3RlZF9kaXN0aW5jdF9pZCIsImdyb3VwIiwiJGdyb3VwcyIsIiRncm91cF90eXBlIiwiJGdyb3VwX2tleSIsIiRncm91cF9zZXQiLCJyZXNldEdyb3VwcyIsIiRsYXN0X3Bvc3Rob2dfcmVzZXQiLCJ0b0lTT1N0cmluZyIsImdldF9zZXNzaW9uX2lkIiwidGltZXN0YW1wTG9va0JhY2siLCJhbGlhcyIsIm9sZENvbmZpZyIsIm5ld0NvbmZpZyIsInN0YXJ0U2Vzc2lvblJlY29yZGluZyIsImxpbmtlZF9mbGFnIiwidXJsX3RyaWdnZXIiLCJldmVudF90cmlnZ2VyIiwic3RvcFNlc3Npb25SZWNvcmRpbmciLCJnZXRTZXNzaW9uUHJvcGVydHkiLCJjcmVhdGVQZXJzb25Qcm9maWxlIiwib3B0X2luX2NhcHR1cmluZyIsImNhcHR1cmVFdmVudE5hbWUiLCJjYXB0dXJlUHJvcGVydGllcyIsIm9wdF9vdXRfY2FwdHVyaW5nIiwiaGFzX29wdGVkX2luX2NhcHR1cmluZyIsImNsZWFyX29wdF9pbl9vdXRfY2FwdHVyaW5nIiwiZ2V0UGFnZVZpZXdJZCIsImNhcHR1cmVUcmFjZUZlZWRiYWNrIiwiJGFpX3RyYWNlX2lkIiwiJGFpX2ZlZWRiYWNrX3RleHQiLCJjYXB0dXJlVHJhY2VNZXRyaWMiLCIkYWlfbWV0cmljX25hbWUiLCIkYWlfbWV0cmljX3ZhbHVlIiwiVG8iLCJNbyIsIk9vIiwiQ28iLCJGbyIsIkFvIiwiQnV0dG9uIiwiVGFiIiwiU2VsZWN0b3IiLCJMZWZ0IiwiQ2VudGVyIiwiUmlnaHQiLCJOZXh0VG9UcmlnZ2VyIiwiUG9wb3ZlciIsIkFQSSIsIldpZGdldCIsIk9wZW4iLCJNdWx0aXBsZUNob2ljZSIsIlNpbmdsZUNob2ljZSIsIlJhdGluZyIsIkxpbmsiLCJOZXh0UXVlc3Rpb24iLCJFbmQiLCJSZXNwb25zZUJhc2VkIiwiU3BlY2lmaWNRdWVzdGlvbiIsIk9uY2UiLCJSZWN1cnJpbmciLCJBbHdheXMiLCJEbyIsImpvIiwiZG9uZSIsIkNPUFlfQVVUT0NBUFRVUkVfRVZFTlQiLCJDb21wcmVzc2lvbiIsIlBvc3RIb2ciLCJTdXJ2ZXlQb3NpdGlvbiIsIlN1cnZleVF1ZXN0aW9uQnJhbmNoaW5nVHlwZSIsIlN1cnZleVF1ZXN0aW9uVHlwZSIsIlN1cnZleVNjaGVkdWxlIiwiU3VydmV5VHlwZSIsIlN1cnZleVdpZGdldFR5cGUiLCJkZWZhdWx0Iiwia25vd25VbnNhZmVFZGl0YWJsZUV2ZW50Iiwic2V2ZXJpdHlMZXZlbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/posthog-js/dist/module.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/posthog-js/react/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/posthog-js/react/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHogContext: () => (/* binding */ PostHogContext),\n/* harmony export */   PostHogErrorBoundary: () => (/* binding */ PostHogErrorBoundary),\n/* harmony export */   PostHogFeature: () => (/* binding */ PostHogFeature),\n/* harmony export */   PostHogProvider: () => (/* binding */ PostHogProvider),\n/* harmony export */   useActiveFeatureFlags: () => (/* binding */ useActiveFeatureFlags),\n/* harmony export */   useFeatureFlagEnabled: () => (/* binding */ useFeatureFlagEnabled),\n/* harmony export */   useFeatureFlagPayload: () => (/* binding */ useFeatureFlagPayload),\n/* harmony export */   useFeatureFlagVariantKey: () => (/* binding */ useFeatureFlagVariantKey),\n/* harmony export */   usePostHog: () => (/* binding */ usePostHog)\n/* harmony export */ });\n/* harmony import */ var posthog_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! posthog-js */ \"(ssr)/./node_modules/posthog-js/dist/module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar PostHogContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    client: posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n});\nfunction isDeepEqual(obj1, obj2, visited) {\n    if (visited === void 0) {\n        visited = new WeakMap();\n    }\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (typeof obj1 !== \"object\" || obj1 === null || typeof obj2 !== \"object\" || obj2 === null) {\n        return false;\n    }\n    if (visited.has(obj1) && visited.get(obj1) === obj2) {\n        return true;\n    }\n    visited.set(obj1, obj2);\n    var keys1 = Object.keys(obj1);\n    var keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for(var _i = 0, keys1_1 = keys1; _i < keys1_1.length; _i++){\n        var key = keys1_1[_i];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (!isDeepEqual(obj1[key], obj2[key], visited)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction PostHogProvider(_a) {\n    var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;\n    var previousInitializationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(function() {\n        if (client) {\n            if (apiKey) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `apiKey` to `PostHogProvider`. `apiKey` will be ignored in favour of `client`.\");\n            }\n            if (options) {\n                console.warn(\"[PostHog.js] You have provided both `client` and `options` to `PostHogProvider`. `options` will be ignored in favour of `client`.\");\n            }\n            return client;\n        }\n        if (apiKey) {\n            return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        }\n        console.warn(\"[PostHog.js] No `apiKey` or `client` were provided to `PostHogProvider`. Using default global `window.posthog` instance. You must initialize it manually. This is not recommended behavior.\");\n        return posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (client) {\n            return;\n        }\n        var previousInitialization = previousInitializationRef.current;\n        if (!previousInitialization) {\n            if (posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].__loaded) {\n                console.warn(\"[PostHog.js] `posthog` was already loaded elsewhere. This may cause issues.\");\n            }\n            posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init(apiKey, options);\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        } else {\n            if (apiKey !== previousInitialization.apiKey) {\n                console.warn(\"[PostHog.js] You have provided a different `apiKey` to `PostHogProvider` than the one that was already initialized. This is not supported by our provider and we'll keep using the previous key. If you need to toggle between API Keys you need to control the `client` yourself and pass it in as a prop rather than an `apiKey` prop.\");\n            }\n            if (options && !isDeepEqual(options, previousInitialization.options)) {\n                posthog_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set_config(options);\n            }\n            previousInitializationRef.current = {\n                apiKey: apiKey,\n                options: options !== null && options !== void 0 ? options : {}\n            };\n        }\n    }, [\n        client,\n        apiKey,\n        JSON.stringify(options)\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PostHogContext.Provider, {\n        value: {\n            client: posthog\n        }\n    }, children);\n}\nvar usePostHog = function() {\n    var client = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PostHogContext).client;\n    return client;\n};\nfunction useFeatureFlagEnabled(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.isFeatureEnabled(flag);\n    }), featureEnabled = _a[0], setFeatureEnabled = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureEnabled(client.isFeatureEnabled(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureEnabled;\n}\nfunction useFeatureFlagPayload(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlagPayload(flag);\n    }), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagPayload(client.getFeatureFlagPayload(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagPayload;\n}\nfunction useActiveFeatureFlags() {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.featureFlags.getFlags();\n    }), featureFlags = _a[0], setFeatureFlags = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function(flags) {\n            setFeatureFlags(flags);\n        });\n    }, [\n        client\n    ]);\n    return featureFlags;\n}\nfunction useFeatureFlagVariantKey(flag) {\n    var client = usePostHog();\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function() {\n        return client.getFeatureFlag(flag);\n    }), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        return client.onFeatureFlags(function() {\n            setFeatureFlagVariantKey(client.getFeatureFlag(flag));\n        });\n    }, [\n        client,\n        flag\n    ]);\n    return featureFlagVariantKey;\n}\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nvar isFunction = function(f) {\n    return typeof f === \"function\";\n};\nvar isUndefined = function(x) {\n    return x === void 0;\n};\nvar isNull = function(x) {\n    return x === null;\n};\nfunction PostHogFeature(_a) {\n    var flag = _a.flag, match = _a.match, children = _a.children, fallback = _a.fallback, visibilityObserverOptions = _a.visibilityObserverOptions, trackInteraction = _a.trackInteraction, trackView = _a.trackView, props = __rest(_a, [\n        \"flag\",\n        \"match\",\n        \"children\",\n        \"fallback\",\n        \"visibilityObserverOptions\",\n        \"trackInteraction\",\n        \"trackView\"\n    ]);\n    var payload = useFeatureFlagPayload(flag);\n    var variant = useFeatureFlagVariantKey(flag);\n    var shouldTrackInteraction = trackInteraction !== null && trackInteraction !== void 0 ? trackInteraction : true;\n    var shouldTrackView = trackView !== null && trackView !== void 0 ? trackView : true;\n    if (isUndefined(match) || variant === match) {\n        var childNode = isFunction(children) ? children(payload) : children;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTrackers, __assign({\n            flag: flag,\n            options: visibilityObserverOptions,\n            trackInteraction: shouldTrackInteraction,\n            trackView: shouldTrackView\n        }, props), childNode);\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, fallback);\n}\nfunction captureFeatureInteraction(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_interaction/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_interaction\", properties);\n}\nfunction captureFeatureView(_a) {\n    var _b;\n    var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;\n    var properties = {\n        feature_flag: flag,\n        $set: (_b = {}, _b[\"$feature_view/\".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)\n    };\n    if (typeof flagVariant === \"string\") {\n        properties.feature_flag_variant = flagVariant;\n    }\n    posthog.capture(\"$feature_view\", properties);\n}\nfunction VisibilityAndClickTracker(_a) {\n    var flag = _a.flag, children = _a.children, onIntersect = _a.onIntersect, onClick = _a.onClick, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"onIntersect\",\n        \"onClick\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    var posthog = usePostHog();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (isNull(ref.current) || !trackView) return;\n        var observer = new IntersectionObserver(function(_a) {\n            var entry = _a[0];\n            return onIntersect(entry);\n        }, __assign({\n            threshold: 0.1\n        }, options));\n        observer.observe(ref.current);\n        return function() {\n            return observer.disconnect();\n        };\n    }, [\n        flag,\n        options,\n        posthog,\n        ref,\n        trackView,\n        onIntersect\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"div\", __assign({\n        ref: ref\n    }, props, {\n        onClick: onClick\n    }), children);\n}\nfunction VisibilityAndClickTrackers(_a) {\n    var flag = _a.flag, children = _a.children, trackInteraction = _a.trackInteraction, trackView = _a.trackView, options = _a.options, props = __rest(_a, [\n        \"flag\",\n        \"children\",\n        \"trackInteraction\",\n        \"trackView\",\n        \"options\"\n    ]);\n    var clickTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var visibilityTrackedRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    var posthog = usePostHog();\n    var variant = useFeatureFlagVariantKey(flag);\n    var cachedOnClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function() {\n        if (!clickTrackedRef.current && trackInteraction) {\n            captureFeatureInteraction({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            clickTrackedRef.current = true;\n        }\n    }, [\n        flag,\n        posthog,\n        trackInteraction,\n        variant\n    ]);\n    var onIntersect = function(entry) {\n        if (!visibilityTrackedRef.current && entry.isIntersecting) {\n            captureFeatureView({\n                flag: flag,\n                posthog: posthog,\n                flagVariant: variant\n            });\n            visibilityTrackedRef.current = true;\n        }\n    };\n    var trackedChildren = react__WEBPACK_IMPORTED_MODULE_1__.Children.map(children, function(child) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(VisibilityAndClickTracker, __assign({\n            flag: flag,\n            onClick: cachedOnClick,\n            onIntersect: onIntersect,\n            trackView: trackView,\n            options: options\n        }, props), child);\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, trackedChildren);\n}\nvar INITIAL_STATE = {\n    componentStack: null,\n    error: null\n};\nvar __POSTHOG_ERROR_MESSAGES = {\n    INVALID_FALLBACK: \"[PostHog.js][PostHogErrorBoundary] Invalid fallback prop, provide a valid React element or a function that returns a valid React element.\"\n};\nvar PostHogErrorBoundary = function(_super) {\n    __extends(PostHogErrorBoundary, _super);\n    function PostHogErrorBoundary(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = INITIAL_STATE;\n        return _this;\n    }\n    PostHogErrorBoundary.prototype.componentDidCatch = function(error, errorInfo) {\n        var componentStack = errorInfo.componentStack;\n        var additionalProperties = this.props.additionalProperties;\n        this.setState({\n            error: error,\n            componentStack: componentStack\n        });\n        var currentProperties;\n        if (isFunction(additionalProperties)) {\n            currentProperties = additionalProperties(error);\n        } else if (typeof additionalProperties === \"object\") {\n            currentProperties = additionalProperties;\n        }\n        var client = this.context.client;\n        client.captureException(error, currentProperties);\n    };\n    PostHogErrorBoundary.prototype.render = function() {\n        var _a = this.props, children = _a.children, fallback = _a.fallback;\n        var state = this.state;\n        if (state.componentStack == null) {\n            return isFunction(children) ? children() : children;\n        }\n        var element = isFunction(fallback) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(fallback, {\n            error: state.error,\n            componentStack: state.componentStack\n        }) : fallback;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().isValidElement(element)) {\n            return element;\n        }\n        console.warn(__POSTHOG_ERROR_MESSAGES.INVALID_FALLBACK);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null);\n    };\n    PostHogErrorBoundary.contextType = PostHogContext;\n    return PostHogErrorBoundary;\n}((react__WEBPACK_IMPORTED_MODULE_1___default().Component));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9yZWFjdC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBbUM7QUFDbUY7QUFFdEgsSUFBSVUsK0JBQWlCUixvREFBYUEsQ0FBQztJQUFFUyxRQUFRWCxrREFBU0E7QUFBQztBQUV2RCxTQUFTWSxZQUFZQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsT0FBTztJQUNwQyxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUFFQSxVQUFVLElBQUlDO0lBQVc7SUFDbkQsSUFBSUgsU0FBU0MsTUFBTTtRQUNmLE9BQU87SUFDWDtJQUNBLElBQUksT0FBT0QsU0FBUyxZQUFZQSxTQUFTLFFBQVEsT0FBT0MsU0FBUyxZQUFZQSxTQUFTLE1BQU07UUFDeEYsT0FBTztJQUNYO0lBQ0EsSUFBSUMsUUFBUUUsR0FBRyxDQUFDSixTQUFTRSxRQUFRRyxHQUFHLENBQUNMLFVBQVVDLE1BQU07UUFDakQsT0FBTztJQUNYO0lBQ0FDLFFBQVFJLEdBQUcsQ0FBQ04sTUFBTUM7SUFDbEIsSUFBSU0sUUFBUUMsT0FBT0MsSUFBSSxDQUFDVDtJQUN4QixJQUFJVSxRQUFRRixPQUFPQyxJQUFJLENBQUNSO0lBQ3hCLElBQUlNLE1BQU1JLE1BQU0sS0FBS0QsTUFBTUMsTUFBTSxFQUFFO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUMsS0FBSyxHQUFHQyxVQUFVTixPQUFPSyxLQUFLQyxRQUFRRixNQUFNLEVBQUVDLEtBQU07UUFDekQsSUFBSUUsTUFBTUQsT0FBTyxDQUFDRCxHQUFHO1FBQ3JCLElBQUksQ0FBQ0YsTUFBTUssUUFBUSxDQUFDRCxNQUFNO1lBQ3RCLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQ2YsWUFBWUMsSUFBSSxDQUFDYyxJQUFJLEVBQUViLElBQUksQ0FBQ2EsSUFBSSxFQUFFWixVQUFVO1lBQzdDLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBRUEsU0FBU2MsZ0JB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LFFBQVEsRUFBRXlFLFdBQVcxRSxHQUFHMEUsUUFBUTtRQUNuRSxJQUFJK0MsUUFBUSxJQUFJLENBQUNBLEtBQUs7UUFDdEIsSUFBSUEsTUFBTVAsY0FBYyxJQUFJLE1BQU07WUFDOUIsT0FBTy9DLFdBQVdsRSxZQUFZQSxhQUFhQTtRQUMvQztRQUNBLElBQUlpSSxVQUFVL0QsV0FBV08sMEJBQ25CdkcsMERBQW1CLENBQUN1RyxVQUFVO1lBQzVCeUMsT0FBT00sTUFBTU4sS0FBSztZQUNsQkQsZ0JBQWdCTyxNQUFNUCxjQUFjO1FBQ3hDLEtBQ0V4QztRQUNOLGtCQUFJdkcsMkRBQW9CLENBQUMrSixVQUFVO1lBQy9CLE9BQU9BO1FBQ1g7UUFDQTVILFFBQVFDLElBQUksQ0FBQzZHLHlCQUF5QkMsZ0JBQWdCO1FBQ3RELHFCQUFPbEosMERBQW1CLENBQUNBLHVEQUFjLEVBQUU7SUFDL0M7SUFDQW1KLHFCQUFxQmMsV0FBVyxHQUFHeEo7SUFDbkMsT0FBTzBJO0FBQ1gsRUFBRW5KLHdEQUFlO0FBRTJLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWR3YXJkLWxlZS1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvcG9zdGhvZy1qcy9yZWFjdC9kaXN0L2VzbS9pbmRleC5qcz8xZTI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwb3N0aG9nSnMgZnJvbSAncG9zdGhvZy1qcyc7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlUmVmLCB1c2VNZW1vLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgQ2hpbGRyZW4gfSBmcm9tICdyZWFjdCc7XG5cbnZhciBQb3N0SG9nQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoeyBjbGllbnQ6IHBvc3Rob2dKcyB9KTtcblxuZnVuY3Rpb24gaXNEZWVwRXF1YWwob2JqMSwgb2JqMiwgdmlzaXRlZCkge1xyXG4gICAgaWYgKHZpc2l0ZWQgPT09IHZvaWQgMCkgeyB2aXNpdGVkID0gbmV3IFdlYWtNYXAoKTsgfVxyXG4gICAgaWYgKG9iajEgPT09IG9iajIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygb2JqMSAhPT0gJ29iamVjdCcgfHwgb2JqMSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqMiAhPT0gJ29iamVjdCcgfHwgb2JqMiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh2aXNpdGVkLmhhcyhvYmoxKSAmJiB2aXNpdGVkLmdldChvYmoxKSA9PT0gb2JqMikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgdmlzaXRlZC5zZXQob2JqMSwgb2JqMik7XHJcbiAgICB2YXIga2V5czEgPSBPYmplY3Qua2V5cyhvYmoxKTtcclxuICAgIHZhciBrZXlzMiA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzMV8xID0ga2V5czE7IF9pIDwga2V5czFfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0ga2V5czFfMVtfaV07XHJcbiAgICAgICAgaWYgKCFrZXlzMi5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc0RlZXBFcXVhbChvYmoxW2tleV0sIG9iajJba2V5XSwgdmlzaXRlZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XG5cbmZ1bmN0aW9uIFBvc3RIb2dQcm92aWRlcihfYSkge1xyXG4gICAgdmFyIGNoaWxkcmVuID0gX2EuY2hpbGRyZW4sIGNsaWVudCA9IF9hLmNsaWVudCwgYXBpS2V5ID0gX2EuYXBpS2V5LCBvcHRpb25zID0gX2Eub3B0aW9ucztcclxuICAgIHZhciBwcmV2aW91c0luaXRpYWxpemF0aW9uUmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgdmFyIHBvc3Rob2cgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoY2xpZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChhcGlLZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignW1Bvc3RIb2cuanNdIFlvdSBoYXZlIHByb3ZpZGVkIGJvdGggYGNsaWVudGAgYW5kIGBhcGlLZXlgIHRvIGBQb3N0SG9nUHJvdmlkZXJgLiBgYXBpS2V5YCB3aWxsIGJlIGlnbm9yZWQgaW4gZmF2b3VyIG9mIGBjbGllbnRgLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tQb3N0SG9nLmpzXSBZb3UgaGF2ZSBwcm92aWRlZCBib3RoIGBjbGllbnRgIGFuZCBgb3B0aW9uc2AgdG8gYFBvc3RIb2dQcm92aWRlcmAuIGBvcHRpb25zYCB3aWxsIGJlIGlnbm9yZWQgaW4gZmF2b3VyIG9mIGBjbGllbnRgLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcGlLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc3Rob2dKcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdbUG9zdEhvZy5qc10gTm8gYGFwaUtleWAgb3IgYGNsaWVudGAgd2VyZSBwcm92aWRlZCB0byBgUG9zdEhvZ1Byb3ZpZGVyYC4gVXNpbmcgZGVmYXVsdCBnbG9iYWwgYHdpbmRvdy5wb3N0aG9nYCBpbnN0YW5jZS4gWW91IG11c3QgaW5pdGlhbGl6ZSBpdCBtYW51YWxseS4gVGhpcyBpcyBub3QgcmVjb21tZW5kZWQgYmVoYXZpb3IuJyk7XHJcbiAgICAgICAgcmV0dXJuIHBvc3Rob2dKcztcclxuICAgIH0sIFtjbGllbnQsIGFwaUtleSwgSlNPTi5zdHJpbmdpZnkob3B0aW9ucyldKTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGNsaWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwcmV2aW91c0luaXRpYWxpemF0aW9uID0gcHJldmlvdXNJbml0aWFsaXphdGlvblJlZi5jdXJyZW50O1xyXG4gICAgICAgIGlmICghcHJldmlvdXNJbml0aWFsaXphdGlvbikge1xyXG4gICAgICAgICAgICBpZiAocG9zdGhvZ0pzLl9fbG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tQb3N0SG9nLmpzXSBgcG9zdGhvZ2Agd2FzIGFscmVhZHkgbG9hZGVkIGVsc2V3aGVyZS4gVGhpcyBtYXkgY2F1c2UgaXNzdWVzLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBvc3Rob2dKcy5pbml0KGFwaUtleSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHByZXZpb3VzSW5pdGlhbGl6YXRpb25SZWYuY3VycmVudCA9IHtcclxuICAgICAgICAgICAgICAgIGFwaUtleTogYXBpS2V5LFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYXBpS2V5ICE9PSBwcmV2aW91c0luaXRpYWxpemF0aW9uLmFwaUtleSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1Bvc3RIb2cuanNdIFlvdSBoYXZlIHByb3ZpZGVkIGEgZGlmZmVyZW50IGBhcGlLZXlgIHRvIGBQb3N0SG9nUHJvdmlkZXJgIHRoYW4gdGhlIG9uZSB0aGF0IHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgb3VyIHByb3ZpZGVyIGFuZCB3ZSdsbCBrZWVwIHVzaW5nIHRoZSBwcmV2aW91cyBrZXkuIElmIHlvdSBuZWVkIHRvIHRvZ2dsZSBiZXR3ZWVuIEFQSSBLZXlzIHlvdSBuZWVkIHRvIGNvbnRyb2wgdGhlIGBjbGllbnRgIHlvdXJzZWxmIGFuZCBwYXNzIGl0IGluIGFzIGEgcHJvcCByYXRoZXIgdGhhbiBhbiBgYXBpS2V5YCBwcm9wLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiAhaXNEZWVwRXF1YWwob3B0aW9ucywgcHJldmlvdXNJbml0aWFsaXphdGlvbi5vcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgcG9zdGhvZ0pzLnNldF9jb25maWcob3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJldmlvdXNJbml0aWFsaXphdGlvblJlZi5jdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgYXBpS2V5OiBhcGlLZXksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbY2xpZW50LCBhcGlLZXksIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpXSk7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQb3N0SG9nQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogeyBjbGllbnQ6IHBvc3Rob2cgfSB9LCBjaGlsZHJlbik7XHJcbn1cblxudmFyIHVzZVBvc3RIb2cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2xpZW50ID0gdXNlQ29udGV4dChQb3N0SG9nQ29udGV4dCkuY2xpZW50O1xyXG4gICAgcmV0dXJuIGNsaWVudDtcclxufTtcblxuZnVuY3Rpb24gdXNlRmVhdHVyZUZsYWdFbmFibGVkKGZsYWcpIHtcclxuICAgIHZhciBjbGllbnQgPSB1c2VQb3N0SG9nKCk7XHJcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnQuaXNGZWF0dXJlRW5hYmxlZChmbGFnKTsgfSksIGZlYXR1cmVFbmFibGVkID0gX2FbMF0sIHNldEZlYXR1cmVFbmFibGVkID0gX2FbMV07XHJcbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBjbGllbnQub25GZWF0dXJlRmxhZ3MoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZXRGZWF0dXJlRW5hYmxlZChjbGllbnQuaXNGZWF0dXJlRW5hYmxlZChmbGFnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBbY2xpZW50LCBmbGFnXSk7XHJcbiAgICByZXR1cm4gZmVhdHVyZUVuYWJsZWQ7XHJcbn1cblxuZnVuY3Rpb24gdXNlRmVhdHVyZUZsYWdQYXlsb2FkKGZsYWcpIHtcclxuICAgIHZhciBjbGllbnQgPSB1c2VQb3N0SG9nKCk7XHJcbiAgICB2YXIgX2EgPSB1c2VTdGF0ZShmdW5jdGlvbiAoKSB7IHJldHVybiBjbGllbnQuZ2V0RmVhdHVyZUZsYWdQYXlsb2FkKGZsYWcpOyB9KSwgZmVhdHVyZUZsYWdQYXlsb2FkID0gX2FbMF0sIHNldEZlYXR1cmVGbGFnUGF5bG9hZCA9IF9hWzFdO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50Lm9uRmVhdHVyZUZsYWdzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2V0RmVhdHVyZUZsYWdQYXlsb2FkKGNsaWVudC5nZXRGZWF0dXJlRmxhZ1BheWxvYWQoZmxhZykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW2NsaWVudCwgZmxhZ10pO1xyXG4gICAgcmV0dXJuIGZlYXR1cmVGbGFnUGF5bG9hZDtcclxufVxuXG5mdW5jdGlvbiB1c2VBY3RpdmVGZWF0dXJlRmxhZ3MoKSB7XHJcbiAgICB2YXIgY2xpZW50ID0gdXNlUG9zdEhvZygpO1xyXG4gICAgdmFyIF9hID0gdXNlU3RhdGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xpZW50LmZlYXR1cmVGbGFncy5nZXRGbGFncygpOyB9KSwgZmVhdHVyZUZsYWdzID0gX2FbMF0sIHNldEZlYXR1cmVGbGFncyA9IF9hWzFdO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50Lm9uRmVhdHVyZUZsYWdzKGZ1bmN0aW9uIChmbGFncykge1xyXG4gICAgICAgICAgICBzZXRGZWF0dXJlRmxhZ3MoZmxhZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW2NsaWVudF0pO1xyXG4gICAgcmV0dXJuIGZlYXR1cmVGbGFncztcclxufVxuXG5mdW5jdGlvbiB1c2VGZWF0dXJlRmxhZ1ZhcmlhbnRLZXkoZmxhZykge1xyXG4gICAgdmFyIGNsaWVudCA9IHVzZVBvc3RIb2coKTtcclxuICAgIHZhciBfYSA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gY2xpZW50LmdldEZlYXR1cmVGbGFnKGZsYWcpO1xyXG4gICAgfSksIGZlYXR1cmVGbGFnVmFyaWFudEtleSA9IF9hWzBdLCBzZXRGZWF0dXJlRmxhZ1ZhcmlhbnRLZXkgPSBfYVsxXTtcclxuICAgIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudC5vbkZlYXR1cmVGbGFncyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNldEZlYXR1cmVGbGFnVmFyaWFudEtleShjbGllbnQuZ2V0RmVhdHVyZUZsYWcoZmxhZykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW2NsaWVudCwgZmxhZ10pO1xyXG4gICAgcmV0dXJuIGZlYXR1cmVGbGFnVmFyaWFudEtleTtcclxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG52YXIgaXNVbmRlZmluZWQgPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgcmV0dXJuIHggPT09IHZvaWQgMDtcclxufTtcclxudmFyIGlzTnVsbCA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICByZXR1cm4geCA9PT0gbnVsbDtcclxufTtcblxuZnVuY3Rpb24gUG9zdEhvZ0ZlYXR1cmUoX2EpIHtcclxuICAgIHZhciBmbGFnID0gX2EuZmxhZywgbWF0Y2ggPSBfYS5tYXRjaCwgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgZmFsbGJhY2sgPSBfYS5mYWxsYmFjaywgdmlzaWJpbGl0eU9ic2VydmVyT3B0aW9ucyA9IF9hLnZpc2liaWxpdHlPYnNlcnZlck9wdGlvbnMsIHRyYWNrSW50ZXJhY3Rpb24gPSBfYS50cmFja0ludGVyYWN0aW9uLCB0cmFja1ZpZXcgPSBfYS50cmFja1ZpZXcsIHByb3BzID0gX19yZXN0KF9hLCBbXCJmbGFnXCIsIFwibWF0Y2hcIiwgXCJjaGlsZHJlblwiLCBcImZhbGxiYWNrXCIsIFwidmlzaWJpbGl0eU9ic2VydmVyT3B0aW9uc1wiLCBcInRyYWNrSW50ZXJhY3Rpb25cIiwgXCJ0cmFja1ZpZXdcIl0pO1xyXG4gICAgdmFyIHBheWxvYWQgPSB1c2VGZWF0dXJlRmxhZ1BheWxvYWQoZmxhZyk7XHJcbiAgICB2YXIgdmFyaWFudCA9IHVzZUZlYXR1cmVGbGFnVmFyaWFudEtleShmbGFnKTtcclxuICAgIHZhciBzaG91bGRUcmFja0ludGVyYWN0aW9uID0gdHJhY2tJbnRlcmFjdGlvbiAhPT0gbnVsbCAmJiB0cmFja0ludGVyYWN0aW9uICE9PSB2b2lkIDAgPyB0cmFja0ludGVyYWN0aW9uIDogdHJ1ZTtcclxuICAgIHZhciBzaG91bGRUcmFja1ZpZXcgPSB0cmFja1ZpZXcgIT09IG51bGwgJiYgdHJhY2tWaWV3ICE9PSB2b2lkIDAgPyB0cmFja1ZpZXcgOiB0cnVlO1xyXG4gICAgaWYgKGlzVW5kZWZpbmVkKG1hdGNoKSB8fCB2YXJpYW50ID09PSBtYXRjaCkge1xyXG4gICAgICAgIHZhciBjaGlsZE5vZGUgPSBpc0Z1bmN0aW9uKGNoaWxkcmVuKSA/IGNoaWxkcmVuKHBheWxvYWQpIDogY2hpbGRyZW47XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFZpc2liaWxpdHlBbmRDbGlja1RyYWNrZXJzLCBfX2Fzc2lnbih7IGZsYWc6IGZsYWcsIG9wdGlvbnM6IHZpc2liaWxpdHlPYnNlcnZlck9wdGlvbnMsIHRyYWNrSW50ZXJhY3Rpb246IHNob3VsZFRyYWNrSW50ZXJhY3Rpb24sIHRyYWNrVmlldzogc2hvdWxkVHJhY2tWaWV3IH0sIHByb3BzKSwgY2hpbGROb2RlKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgZmFsbGJhY2spO1xyXG59XHJcbmZ1bmN0aW9uIGNhcHR1cmVGZWF0dXJlSW50ZXJhY3Rpb24oX2EpIHtcclxuICAgIHZhciBfYjtcclxuICAgIHZhciBmbGFnID0gX2EuZmxhZywgcG9zdGhvZyA9IF9hLnBvc3Rob2csIGZsYWdWYXJpYW50ID0gX2EuZmxhZ1ZhcmlhbnQ7XHJcbiAgICB2YXIgcHJvcGVydGllcyA9IHtcclxuICAgICAgICBmZWF0dXJlX2ZsYWc6IGZsYWcsXHJcbiAgICAgICAgJHNldDogKF9iID0ge30sIF9iW1wiJGZlYXR1cmVfaW50ZXJhY3Rpb24vXCIuY29uY2F0KGZsYWcpXSA9IGZsYWdWYXJpYW50ICE9PSBudWxsICYmIGZsYWdWYXJpYW50ICE9PSB2b2lkIDAgPyBmbGFnVmFyaWFudCA6IHRydWUsIF9iKSxcclxuICAgIH07XHJcbiAgICBpZiAodHlwZW9mIGZsYWdWYXJpYW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHByb3BlcnRpZXMuZmVhdHVyZV9mbGFnX3ZhcmlhbnQgPSBmbGFnVmFyaWFudDtcclxuICAgIH1cclxuICAgIHBvc3Rob2cuY2FwdHVyZSgnJGZlYXR1cmVfaW50ZXJhY3Rpb24nLCBwcm9wZXJ0aWVzKTtcclxufVxyXG5mdW5jdGlvbiBjYXB0dXJlRmVhdHVyZVZpZXcoX2EpIHtcclxuICAgIHZhciBfYjtcclxuICAgIHZhciBmbGFnID0gX2EuZmxhZywgcG9zdGhvZyA9IF9hLnBvc3Rob2csIGZsYWdWYXJpYW50ID0gX2EuZmxhZ1ZhcmlhbnQ7XHJcbiAgICB2YXIgcHJvcGVydGllcyA9IHtcclxuICAgICAgICBmZWF0dXJlX2ZsYWc6IGZsYWcsXHJcbiAgICAgICAgJHNldDogKF9iID0ge30sIF9iW1wiJGZlYXR1cmVfdmlldy9cIi5jb25jYXQoZmxhZyldID0gZmxhZ1ZhcmlhbnQgIT09IG51bGwgJiYgZmxhZ1ZhcmlhbnQgIT09IHZvaWQgMCA/IGZsYWdWYXJpYW50IDogdHJ1ZSwgX2IpLFxyXG4gICAgfTtcclxuICAgIGlmICh0eXBlb2YgZmxhZ1ZhcmlhbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcHJvcGVydGllcy5mZWF0dXJlX2ZsYWdfdmFyaWFudCA9IGZsYWdWYXJpYW50O1xyXG4gICAgfVxyXG4gICAgcG9zdGhvZy5jYXB0dXJlKCckZmVhdHVyZV92aWV3JywgcHJvcGVydGllcyk7XHJcbn1cclxuZnVuY3Rpb24gVmlzaWJpbGl0eUFuZENsaWNrVHJhY2tlcihfYSkge1xyXG4gICAgdmFyIGZsYWcgPSBfYS5mbGFnLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBvbkludGVyc2VjdCA9IF9hLm9uSW50ZXJzZWN0LCBvbkNsaWNrID0gX2Eub25DbGljaywgdHJhY2tWaWV3ID0gX2EudHJhY2tWaWV3LCBvcHRpb25zID0gX2Eub3B0aW9ucywgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZsYWdcIiwgXCJjaGlsZHJlblwiLCBcIm9uSW50ZXJzZWN0XCIsIFwib25DbGlja1wiLCBcInRyYWNrVmlld1wiLCBcIm9wdGlvbnNcIl0pO1xyXG4gICAgdmFyIHJlZiA9IHVzZVJlZihudWxsKTtcclxuICAgIHZhciBwb3N0aG9nID0gdXNlUG9zdEhvZygpO1xyXG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaXNOdWxsKHJlZi5jdXJyZW50KSB8fCAhdHJhY2tWaWV3KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSBfYVswXTtcclxuICAgICAgICAgICAgcmV0dXJuIG9uSW50ZXJzZWN0KGVudHJ5KTtcclxuICAgICAgICB9LCBfX2Fzc2lnbih7IHRocmVzaG9sZDogMC4xIH0sIG9wdGlvbnMpKTtcclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHJlZi5jdXJyZW50KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2ZXIuZGlzY29ubmVjdCgpOyB9O1xyXG4gICAgfSwgW2ZsYWcsIG9wdGlvbnMsIHBvc3Rob2csIHJlZiwgdHJhY2tWaWV3LCBvbkludGVyc2VjdF0pO1xyXG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgcmVmOiByZWYgfSwgcHJvcHMsIHsgb25DbGljazogb25DbGljayB9KSwgY2hpbGRyZW4pKTtcclxufVxyXG5mdW5jdGlvbiBWaXNpYmlsaXR5QW5kQ2xpY2tUcmFja2VycyhfYSkge1xyXG4gICAgdmFyIGZsYWcgPSBfYS5mbGFnLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCB0cmFja0ludGVyYWN0aW9uID0gX2EudHJhY2tJbnRlcmFjdGlvbiwgdHJhY2tWaWV3ID0gX2EudHJhY2tWaWV3LCBvcHRpb25zID0gX2Eub3B0aW9ucywgcHJvcHMgPSBfX3Jlc3QoX2EsIFtcImZsYWdcIiwgXCJjaGlsZHJlblwiLCBcInRyYWNrSW50ZXJhY3Rpb25cIiwgXCJ0cmFja1ZpZXdcIiwgXCJvcHRpb25zXCJdKTtcclxuICAgIHZhciBjbGlja1RyYWNrZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xyXG4gICAgdmFyIHZpc2liaWxpdHlUcmFja2VkUmVmID0gdXNlUmVmKGZhbHNlKTtcclxuICAgIHZhciBwb3N0aG9nID0gdXNlUG9zdEhvZygpO1xyXG4gICAgdmFyIHZhcmlhbnQgPSB1c2VGZWF0dXJlRmxhZ1ZhcmlhbnRLZXkoZmxhZyk7XHJcbiAgICB2YXIgY2FjaGVkT25DbGljayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIWNsaWNrVHJhY2tlZFJlZi5jdXJyZW50ICYmIHRyYWNrSW50ZXJhY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FwdHVyZUZlYXR1cmVJbnRlcmFjdGlvbih7IGZsYWc6IGZsYWcsIHBvc3Rob2c6IHBvc3Rob2csIGZsYWdWYXJpYW50OiB2YXJpYW50IH0pO1xyXG4gICAgICAgICAgICBjbGlja1RyYWNrZWRSZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2ZsYWcsIHBvc3Rob2csIHRyYWNrSW50ZXJhY3Rpb24sIHZhcmlhbnRdKTtcclxuICAgIHZhciBvbkludGVyc2VjdCA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgIGlmICghdmlzaWJpbGl0eVRyYWNrZWRSZWYuY3VycmVudCAmJiBlbnRyeS5pc0ludGVyc2VjdGluZykge1xyXG4gICAgICAgICAgICBjYXB0dXJlRmVhdHVyZVZpZXcoeyBmbGFnOiBmbGFnLCBwb3N0aG9nOiBwb3N0aG9nLCBmbGFnVmFyaWFudDogdmFyaWFudCB9KTtcclxuICAgICAgICAgICAgdmlzaWJpbGl0eVRyYWNrZWRSZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHZhciB0cmFja2VkQ2hpbGRyZW4gPSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChWaXNpYmlsaXR5QW5kQ2xpY2tUcmFja2VyLCBfX2Fzc2lnbih7IGZsYWc6IGZsYWcsIG9uQ2xpY2s6IGNhY2hlZE9uQ2xpY2ssIG9uSW50ZXJzZWN0OiBvbkludGVyc2VjdCwgdHJhY2tWaWV3OiB0cmFja1ZpZXcsIG9wdGlvbnM6IG9wdGlvbnMgfSwgcHJvcHMpLCBjaGlsZCkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdHJhY2tlZENoaWxkcmVuKTtcclxufVxuXG52YXIgSU5JVElBTF9TVEFURSA9IHtcclxuICAgIGNvbXBvbmVudFN0YWNrOiBudWxsLFxyXG4gICAgZXJyb3I6IG51bGwsXHJcbn07XHJcbnZhciBfX1BPU1RIT0dfRVJST1JfTUVTU0FHRVMgPSB7XHJcbiAgICBJTlZBTElEX0ZBTExCQUNLOiAnW1Bvc3RIb2cuanNdW1Bvc3RIb2dFcnJvckJvdW5kYXJ5XSBJbnZhbGlkIGZhbGxiYWNrIHByb3AsIHByb3ZpZGUgYSB2YWxpZCBSZWFjdCBlbGVtZW50IG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdmFsaWQgUmVhY3QgZWxlbWVudC4nLFxyXG59O1xyXG52YXIgUG9zdEhvZ0Vycm9yQm91bmRhcnkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgX19leHRlbmRzKFBvc3RIb2dFcnJvckJvdW5kYXJ5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gUG9zdEhvZ0Vycm9yQm91bmRhcnkocHJvcHMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zdGF0ZSA9IElOSVRJQUxfU1RBVEU7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgUG9zdEhvZ0Vycm9yQm91bmRhcnkucHJvdG90eXBlLmNvbXBvbmVudERpZENhdGNoID0gZnVuY3Rpb24gKGVycm9yLCBlcnJvckluZm8pIHtcclxuICAgICAgICB2YXIgY29tcG9uZW50U3RhY2sgPSBlcnJvckluZm8uY29tcG9uZW50U3RhY2s7XHJcbiAgICAgICAgdmFyIGFkZGl0aW9uYWxQcm9wZXJ0aWVzID0gdGhpcy5wcm9wcy5hZGRpdGlvbmFsUHJvcGVydGllcztcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGFjazogY29tcG9uZW50U3RhY2ssXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRQcm9wZXJ0aWVzO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGFkZGl0aW9uYWxQcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICBjdXJyZW50UHJvcGVydGllcyA9IGFkZGl0aW9uYWxQcm9wZXJ0aWVzKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBjdXJyZW50UHJvcGVydGllcyA9IGFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2xpZW50ID0gdGhpcy5jb250ZXh0LmNsaWVudDtcclxuICAgICAgICBjbGllbnQuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwgY3VycmVudFByb3BlcnRpZXMpO1xyXG4gICAgfTtcclxuICAgIFBvc3RIb2dFcnJvckJvdW5kYXJ5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgY2hpbGRyZW4gPSBfYS5jaGlsZHJlbiwgZmFsbGJhY2sgPSBfYS5mYWxsYmFjaztcclxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgIGlmIChzdGF0ZS5jb21wb25lbnRTdGFjayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSA/IGNoaWxkcmVuKCkgOiBjaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBpc0Z1bmN0aW9uKGZhbGxiYWNrKVxyXG4gICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoZmFsbGJhY2ssIHtcclxuICAgICAgICAgICAgICAgIGVycm9yOiBzdGF0ZS5lcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiBzdGF0ZS5jb21wb25lbnRTdGFjayxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgOiBmYWxsYmFjaztcclxuICAgICAgICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUud2FybihfX1BPU1RIT0dfRVJST1JfTUVTU0FHRVMuSU5WQUxJRF9GQUxMQkFDSyk7XHJcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwpO1xyXG4gICAgfTtcclxuICAgIFBvc3RIb2dFcnJvckJvdW5kYXJ5LmNvbnRleHRUeXBlID0gUG9zdEhvZ0NvbnRleHQ7XHJcbiAgICByZXR1cm4gUG9zdEhvZ0Vycm9yQm91bmRhcnk7XHJcbn0oUmVhY3QuQ29tcG9uZW50KSk7XG5cbmV4cG9ydCB7IFBvc3RIb2dDb250ZXh0LCBQb3N0SG9nRXJyb3JCb3VuZGFyeSwgUG9zdEhvZ0ZlYXR1cmUsIFBvc3RIb2dQcm92aWRlciwgdXNlQWN0aXZlRmVhdHVyZUZsYWdzLCB1c2VGZWF0dXJlRmxhZ0VuYWJsZWQsIHVzZUZlYXR1cmVGbGFnUGF5bG9hZCwgdXNlRmVhdHVyZUZsYWdWYXJpYW50S2V5LCB1c2VQb3N0SG9nIH07XG4iXSwibmFtZXMiOlsicG9zdGhvZ0pzIiwiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlUmVmIiwidXNlTWVtbyIsInVzZUVmZmVjdCIsInVzZUNvbnRleHQiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwiQ2hpbGRyZW4iLCJQb3N0SG9nQ29udGV4dCIsImNsaWVudCIsImlzRGVlcEVxdWFsIiwib2JqMSIsIm9iajIiLCJ2aXNpdGVkIiwiV2Vha01hcCIsImhhcyIsImdldCIsInNldCIsImtleXMxIiwiT2JqZWN0Iiwia2V5cyIsImtleXMyIiwibGVuZ3RoIiwiX2kiLCJrZXlzMV8xIiwia2V5IiwiaW5jbHVkZXMiLCJQb3N0SG9nUHJvdmlkZXIiLCJfYSIsImNoaWxkcmVuIiwiYXBpS2V5Iiwib3B0aW9ucyIsInByZXZpb3VzSW5pdGlhbGl6YXRpb25SZWYiLCJwb3N0aG9nIiwiY29uc29sZSIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwicHJldmlvdXNJbml0aWFsaXphdGlvbiIsImN1cnJlbnQiLCJfX2xvYWRlZCIsImluaXQiLCJzZXRfY29uZmlnIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VQb3N0SG9nIiwidXNlRmVhdHVyZUZsYWdFbmFibGVkIiwiZmxhZyIsImlzRmVhdHVyZUVuYWJsZWQiLCJmZWF0dXJlRW5hYmxlZCIsInNldEZlYXR1cmVFbmFibGVkIiwib25GZWF0dXJlRmxhZ3MiLCJ1c2VGZWF0dXJlRmxhZ1BheWxvYWQiLCJnZXRGZWF0dXJlRmxhZ1BheWxvYWQiLCJmZWF0dXJlRmxhZ1BheWxvYWQiLCJzZXRGZWF0dXJlRmxhZ1BheWxvYWQiLCJ1c2VBY3RpdmVGZWF0dXJlRmxhZ3MiLCJmZWF0dXJlRmxhZ3MiLCJnZXRGbGFncyIsInNldEZlYXR1cmVGbGFncyIsImZsYWdzIiwidXNlRmVhdHVyZUZsYWdWYXJpYW50S2V5IiwiZ2V0RmVhdHVyZUZsYWciLCJmZWF0dXJlRmxhZ1ZhcmlhbnRLZXkiLCJzZXRGZWF0dXJlRmxhZ1ZhcmlhbnRLZXkiLCJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJfX2Fzc2lnbiIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJhcHBseSIsIl9fcmVzdCIsImUiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpc0Z1bmN0aW9uIiwiZiIsImlzVW5kZWZpbmVkIiwieCIsImlzTnVsbCIsIlBvc3RIb2dGZWF0dXJlIiwibWF0Y2giLCJmYWxsYmFjayIsInZpc2liaWxpdHlPYnNlcnZlck9wdGlvbnMiLCJ0cmFja0ludGVyYWN0aW9uIiwidHJhY2tWaWV3IiwicHJvcHMiLCJwYXlsb2FkIiwidmFyaWFudCIsInNob3VsZFRyYWNrSW50ZXJhY3Rpb24iLCJzaG91bGRUcmFja1ZpZXciLCJjaGlsZE5vZGUiLCJWaXNpYmlsaXR5QW5kQ2xpY2tUcmFja2VycyIsIkZyYWdtZW50IiwiY2FwdHVyZUZlYXR1cmVJbnRlcmFjdGlvbiIsIl9iIiwiZmxhZ1ZhcmlhbnQiLCJwcm9wZXJ0aWVzIiwiZmVhdHVyZV9mbGFnIiwiJHNldCIsImNvbmNhdCIsImZlYXR1cmVfZmxhZ192YXJpYW50IiwiY2FwdHVyZSIsImNhcHR1cmVGZWF0dXJlVmlldyIsIlZpc2liaWxpdHlBbmRDbGlja1RyYWNrZXIiLCJvbkludGVyc2VjdCIsIm9uQ2xpY2siLCJyZWYiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiZW50cnkiLCJ0aHJlc2hvbGQiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImNsaWNrVHJhY2tlZFJlZiIsInZpc2liaWxpdHlUcmFja2VkUmVmIiwiY2FjaGVkT25DbGljayIsImlzSW50ZXJzZWN0aW5nIiwidHJhY2tlZENoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJJTklUSUFMX1NUQVRFIiwiY29tcG9uZW50U3RhY2siLCJlcnJvciIsIl9fUE9TVEhPR19FUlJPUl9NRVNTQUdFUyIsIklOVkFMSURfRkFMTEJBQ0siLCJQb3N0SG9nRXJyb3JCb3VuZGFyeSIsIl9zdXBlciIsIl90aGlzIiwic3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsImVycm9ySW5mbyIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwic2V0U3RhdGUiLCJjdXJyZW50UHJvcGVydGllcyIsImNvbnRleHQiLCJjYXB0dXJlRXhjZXB0aW9uIiwicmVuZGVyIiwiZWxlbWVudCIsImlzVmFsaWRFbGVtZW50IiwiY29udGV4dFR5cGUiLCJDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/posthog-js/react/dist/esm/index.js\n");

/***/ })

};
;